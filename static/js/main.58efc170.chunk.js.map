{"version":3,"sources":["StateForceGraph.js","StopwatchMachine.js","ModeButtons.js","Mermaid.js","StateMachineVisualizer.js","StateMachineView.js","index.js","useStateMachine.js","reduceHistory.js"],"names":["global","__webpack_require__","d","__webpack_exports__","StateForceGraph","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","findNode","nodes","id","find","it","canFire","machine","state","event","mode","states","on","_ref","value","lastEvent","prevState","definition","dispatch","valueLatest","React","useRef","lastProps","prevProps","useEffect","current","ref","diagram","useMemo","stateIds","Object","keys","map","key","name","links","forEach","source","targetId","target","push","Graph","ForceGraph","height","linkCurvature","linkDirectionalArrowLength","linkDirectionalArrowRelPos","nodeCanvasObjectMode","nodeCanvasObject","node","ctx","globalScale","label","font","concat","textAlign","textBaseline","fillStyle","fillText","x","y","nodeId","nodeLabel","nodeAutoColorBy","linkCanvasObjectMode","linkCanvasObject","link","LABEL_NODE_MARGIN","nodeRelSize","start","end","textPos","assign","c","[object Object]","curvature","__controlPoints","t","sx","sy","cp1x","cp1y","ex","ey","getQuadraticXY","relLink","maxTextLength","Math","sqrt","pow","textAngle","atan2","PI","fontSize","min","measureText","width","bckgDimensions","save","translate","rotate","fillRect","color","restore","linkColor","type","linkDirectionalParticleColor","linkDirectionalParticleSpeed","linkDirectionalParticleWidth","linkHoverPrecision","onLinkClick","_ref2","selfLoopLinks","sameNodesLinks","nodePairId","lastIndex","length","delta","i","filter","lastLink","offset","flipped","graphData","setTimeout","emitParticle","createElement","Fragment","Initial","effects","Running","stop","pause","Idle","resume","StopwatchMachine","initialState","initialContext","lapse","lapseTime","configure","Configuring","Saving_Config","saved","Deploying_Config","deployed","Resume_or_Restart","start_over","startInterval","setContext","context","interval","setInterval","startTime","Date","now","prevTime","clearInterval","clearLapse","_ref3","reducer","action","ModeButtons","style","buttonStyles","onClick","lastId","Mermaid","memo","onRender","elRef","svg","useMermaid","content","setSvg","useState","isCancelled","mermaid","mermaidAPI","render","then","svgraph","InlineSvg","forwardRef","dimensions","setDimensions","viewBoxMatch","match","split","Number","minHeight","dangerouslySetInnerHTML","__html","StateMachineVisualizer","window","_len","arguments","args","Array","_key","console","log","callbackName","rows","ifactive","join","toDiagram","StateMachineView","steps","active","events","eventStyle","disabled","stateStyle","backgroundColor","fontWeight","eventsStyle","containerStyle","padding","display","margin","borderRadius","borderWidth","borderStyle","marginBottom","Stopwatch","lastAction","setLastAction","status","previous","innerDispatch","setStatus","draftStatus","nextStatus","nextMode","effect","useStateMachine","history","reduceHistory","className","JSON","stringify","border","background","rootElement","document","getElementById","ReactDOM"],"mappings":"2FAAA,SAAAA,GAAAC,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAEA,SAASG,EAASC,EAAOC,GACvB,OAAOD,EAAME,KAAMC,GAAOA,EAAGF,KAAOA,GAGtC,SAASG,EAAQC,EAASC,EAAOC,GAE/B,MAAMC,EAAOH,EAAQI,OAAOH,GAC5B,OAAOE,GAAQA,EAAKE,IAAMF,EAAKE,GAAGH,GAGrB,SAASZ,EAAegB,GAMpC,IANqCC,MACtCA,EAAKC,UACLA,EAASC,UACTA,EAASC,WACTA,EAAUC,SACVA,GACDL,EACC,MAAMM,EAAcC,IAAMC,SACpBC,EAAYF,IAAMC,OAAO,CAAEN,YAAWC,YAAWF,UACjDS,EAAYH,IAAMC,OAAO,IAC/BG,oBAAU,KACRD,EAAUE,QAAUH,EAAUG,QAC9BH,EAAUG,QAAU,CAAEV,YAAWC,YAAWF,UAC3C,CAACA,EAAOC,EAAWC,IACtBQ,oBAAU,KACRL,EAAYM,QAAUX,GACrB,CAACA,IAEJ,MAAMY,EAAMN,IAAMC,SACZM,EAAUC,kBAAQ,KAEtB,MAAMC,EAAWC,OAAOC,KAAKd,EAAWN,QAClCT,EAAQ2B,EAASG,IAAKC,IACnB,CAAEC,KAAMD,EAAK9B,GAAI8B,KAGpBE,EAAQ,GAYd,OAXAN,EAASO,QAASH,IAChB,MAAMzB,EAAQS,EAAWN,OAAOsB,GAC1BI,EAASpC,EAASC,EAAO+B,GAC/BzB,EAAMI,IACJkB,OAAOC,KAAKvB,EAAMI,IAAIwB,QAASF,IAC7B,MAAMI,EAAW9B,EAAMI,GAAGsB,GACpBK,EAAStC,EAASC,EAAOoC,GAC/BH,EAAMK,KAAK,CAAEN,OAAMG,SAAQE,eAI1B,CAAErC,QAAOiC,UACf,CAAClB,IAgOJ,OA5NAO,oBAAU,KACR,MAAMiB,EAAQhD,EAAOiD,YAAPjD,CAAoBiC,EAAID,SACtCC,EAAID,QAAQgB,MAAQA,EACpBA,EAAME,OAAO,KAEVC,cAAc,aACdC,2BAA2B,GAC3BC,2BAA2B,GAC3BC,qBAAqB,IAAM,SAC3BC,iBAAiB,CAACC,EAAMC,EAAKC,KAI5B,MAAMC,EAAQH,EAAKf,KAEnBgB,EAAIG,KAAI,GAAAC,OADS,EACK,iBACtBJ,EAAIK,UAAY,OAChBL,EAAIM,aAAe,SACnBN,EAAIO,UACFR,EAAKf,OAASZ,EAAUG,QAAQX,MAAQ,QAAU,WACpDoC,EAAIQ,SAASN,EAAOH,EAAKU,EAAI,EAAGV,EAAKW,KAGtCC,OAAO,MACPC,UAAU,QACVC,gBAAgB,QAChBC,qBAAqB,IAAM,SAC3BC,iBAAiB,CAACC,EAAMhB,KAMvB,MACMiB,EAA0C,IAAtB1B,EAAM2B,cAE1BC,EAAQH,EAAK7B,OACbiC,EAAMJ,EAAK3B,OAGjB,GAAqB,kBAAV8B,GAAqC,kBAARC,EAAkB,OAG1D,IAAIC,EAAUzC,OAAO0C,UAChB,CAAC,IAAK,KAAKxC,IAAKyC,IAAC,CAClBC,CAACD,GAAIJ,EAAMI,IAAMH,EAAIG,GAAKJ,EAAMI,IAAM,OAIrCP,EAAKS,UAAY,GAEhBT,EAAKU,kBACPL,EAgLZ,SAAwBM,EAAGC,EAAIC,EAAIC,EAAMC,EAAMC,EAAIC,GACjD,MAAO,CACLxB,GAAI,EAAIkB,IAAM,EAAIA,GAAKC,EAAK,GAAK,EAAID,GAAKA,EAAIG,EAAOH,EAAIA,EAAIK,EAC7DtB,GAAI,EAAIiB,IAAM,EAAIA,GAAKE,EAAK,GAAK,EAAIF,GAAKA,EAAII,EAAOJ,EAAIA,EAAIM,GAnL3CC,CACR,GACAf,EAAMV,EACNU,EAAMT,EACNM,EAAKU,gBAAgB,GACrBV,EAAKU,gBAAgB,GACrBN,EAAIX,EACJW,EAAIV,IAOV,MAAMyB,EAAU,CAAE1B,EAAGW,EAAIX,EAAIU,EAAMV,EAAGC,EAAGU,EAAIV,EAAIS,EAAMT,GAEjD0B,EACJC,KAAKC,KAAKD,KAAKE,IAAIJ,EAAQ1B,EAAG,GAAK4B,KAAKE,IAAIJ,EAAQzB,EAAG,IACnC,EAApBO,EAEF,IAAIuB,EAAYH,KAAKI,MAAMN,EAAQzB,EAAGyB,EAAQ1B,GAE1C+B,EAAYH,KAAKK,GAAK,IAAGF,IAAcH,KAAKK,GAAKF,IACjDA,GAAaH,KAAKK,GAAK,IAAGF,KAAeH,KAAKK,GAAKF,IAEvD,MAAMtC,EAAK,GAAAE,OAAMY,EAAKhC,MAGtBgB,EAAIG,KAAO,iBACX,MAAMwC,EAAWN,KAAKO,IAhDA,EAkDpBR,EAAgBpC,EAAI6C,YAAY3C,GAAO4C,OAEzC9C,EAAIG,KAAI,GAAAC,OAAMuC,EAAQ,iBACtB,MACMI,EAAiB,CADL/C,EAAI6C,YAAY3C,GAAO4C,MACNH,GAAU7D,IAC1ChC,GAAMA,EAAe,GAAX6F,GAIb3C,EAAIgD,OACJhD,EAAIiD,UAAU5B,EAAQZ,EAAGY,EAAQX,GAOjCV,EAAIkD,OAAOV,GAEXxC,EAAIO,UAAY,2BAChBP,EAAImD,UACDJ,EAAe,GAAK,GACpBA,EAAe,GAAK,KAClBA,GAEL,MAAMK,EACJnF,EAAYM,UAAYyC,EAAK7B,OAAOH,MACpC5B,EAAQW,EAAYE,EAAYM,QAASyC,EAAKhC,MAC1C,OACA,WACNgB,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,UAAY6C,EAChBpD,EAAIQ,SAASQ,EAAKhC,KAAM,EAAG,GAC3BgB,EAAIqD,YAELC,UAAWtC,GACV/C,EAAYM,UAAYyC,EAAK7B,OAAOH,MACpC5B,EAAQW,EAAYE,EAAYM,QAASyC,EAAKhC,MAC1C,OACAZ,EAAUG,QAAQT,YAAckD,EAAK7B,OAAOH,MAC5CZ,EAAUG,QAAQV,WAClBO,EAAUG,QAAQV,UAAU0F,OAASvC,EAAKhC,KAC1C,OACA,YAELwE,6BAA6B,IAAM,QACnCC,6BAA6B,KAC7BC,6BAA6B,GAC7BC,mBAAmB,IACnBC,YAAYC,IAAc,IAAb7E,KAAEA,GAAM6E,EACpB7F,EAAS,CAAEuF,KAAMvE,MAGrB,IAAI8E,EAAgB,GAChBC,EAAiB,GAKrBtF,EAAQQ,MAAMC,QAAS8B,IACrBA,EAAKgD,WACHhD,EAAK7B,QAAU6B,EAAK3B,OAChB2B,EAAK7B,OAAS,IAAM6B,EAAK3B,OACzB2B,EAAK3B,OAAS,IAAM2B,EAAK7B,OAC/B,IAAIL,EAAMkC,EAAK7B,SAAW6B,EAAK3B,OAASyE,EAAgBC,EACnDjF,EAAIkC,EAAKgD,cACZlF,EAAIkC,EAAKgD,YAAc,IAEzBlF,EAAIkC,EAAKgD,YAAY1E,KAAK0B,KAI5BpC,OAAOC,KAAKiF,GAAe5E,QAASjC,IAClC,IAAIgC,EAAQ6E,EAAc7G,GACtBgH,EAAYhF,EAAMiF,OAAS,EAC/BjF,EAAMgF,GAAWxC,UAAY,EAC7B,IAAI0C,EAAQ,GAAwBF,EACpC,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAWG,IAC7BnF,EAAMmF,GAAG3C,UAvBW,GAuBmB2C,EAAID,IAK/CvF,OAAOC,KAAKkF,GACTM,OAAQL,GAAeD,EAAeC,GAAYE,OAAS,GAC3DhF,QAAS8E,IACR,IAAI/E,EAAQ8E,EAAeC,GACvBC,EAAYhF,EAAMiF,OAAS,EAC3BI,EAAWrF,EAAMgF,GACrBK,EAAS7C,UAlCW,GAmCpB,IAAI0C,EAAS,EAAuBF,EACpC,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAWG,IAC7BnF,EAAMmF,GAAG3C,UAA+B2C,EAAID,EArC1B,GAsClBlF,EAAMmF,GAAGG,OAASH,EACdE,EAASnF,SAAWF,EAAMmF,GAAGjF,SAC/BF,EAAMmF,GAAG3C,YAAc,EACvBxC,EAAMmF,GAAGI,SAAU,MAM1B,CAAC,IACJlG,oBAAU,KAGR,MAAMiB,MAAEA,GAAUf,EAAID,QACtBgB,EAAM3B,MAAQA,EACd2B,EAAMkF,UAAUhG,IAGf,CAACA,EAASb,IAEbU,oBAAU,KAER,IAAKT,EAAW,OAChB,MAAMoB,MAAEA,GAAUR,EAClB,GAAIX,EAAW,CAEb,MAAMyF,KAAEA,GAAS1F,EACXmD,EAAOvC,EAAQQ,MAAM/B,KACxBC,GAAOA,EAAGgC,OAAOlC,KAAOa,GAAaX,EAAG6B,OAASuE,GAGpDmB,WAAW,KACTlG,EAAID,QAAQgB,MAAMoF,aAAa3D,IAE9B,IAEDxC,EAAID,SAAWC,EAAID,QAAQgB,OAM9B,CAAC1B,IAEFK,IAAA0G,cAAA1G,IAAA2G,SAAA,KAEE3G,IAAA0G,cAAA,OAAKpG,IAAKA,GAAK,sNCtRrB,IAAIf,EAAS,CACXqH,QAAS,CACPpH,GAAI,CAAEyD,MAAO,WACb4D,QAAS,CAAC,gBAAiB,eAE7BC,QAAS,CACPtH,GAAI,CAAEuH,KAAM,UAAWC,MAAO,QAC9BH,QAAS,CAAC,kBAEZI,KAAM,CACJzH,GAAI,CAAEuH,KAAM,UAAWG,OAAQ,WAC/BL,QAAS,CAAC,mBAsBd,MAwDaM,EAAmB,CAC9BC,aAAc,UACdC,eA1DqB,CAAEC,MAAO,EAAGC,UAAW,MA2D5ChI,OA1EFA,EAAS,IACJA,EACH0H,KAAM,IACD1H,EAAO0H,KACVzH,GAAI,IACCD,EAAO0H,KAAKzH,GACfgI,UAAW,gBAGfC,YAAa,CAAEjI,GAAI,CAAEsF,KAAM,kBAC3B4C,cAAe,CAAElI,GAAI,CAAEmI,MAAO,qBAC9BC,iBAAkB,CAAEpI,GAAI,CAAEqI,SAAU,sBACpCC,kBAAmB,CAAEtI,GAAI,CAAE0H,OAAQ,UAAWa,WAAY,aA+D1DlB,QA1Dc,CACdmB,cAAevI,IAAA,IAACwI,WAAEA,GAAYxI,EAAA,OAC5BwI,EAAYC,IACV,IAAIC,EAAWD,EAAQC,SAkBvB,OAjBKA,IACHA,EAAWC,YAAY,KACrBH,EAAYC,IACV,MAAMZ,MAAEA,GAAUY,EACZG,EAAYC,KAAKC,MAEjBC,EAAWN,EAAQX,WAAac,EAChCd,EAAYe,KAAKC,MACjBtC,EAAQsB,EAAYiB,EAC1B,MAAO,IACFN,EACHZ,OAAQA,GAAS,GAAKrB,EACtBsB,gBAGH,KAEE,IACFW,EACHC,eAGNM,cAAe9C,IAAA,IAACsC,WAAEA,GAAYtC,EAAA,OAC5BsC,EAAYC,IAAO,IACdA,EACHC,SAAUD,EAAQC,SAAWM,cAAcP,EAAQC,UAAY,KAC/DZ,UAAW,SAEfmB,WAAYC,IAAA,IAACV,WAAEA,GAAYU,EAAA,OACzBV,EAAYC,IAAO,IACdA,EACHZ,MAAO,OAwBXsB,QApBqBA,CAACxJ,EAAOyJ,KAE7B,OAAQA,EAAOxD,MACb,IAAK,QACHjG,EAAQ,IACHA,EACHkI,MAAO,GAMb,OAAOlI,ICnFM,SAAS0J,EAAWrJ,GAAqB,IAApBH,KAAEA,EAAIQ,SAAEA,GAAUL,EACpD,OACEO,IAAA0G,cAAA1G,IAAA2G,SAAA,KACGrH,GAAQA,EAAKE,GACVkB,OAAOC,KAAKrB,EAAKE,IAAIoB,IAAKC,GACxBb,IAAA0G,cAAA,UACEqC,MAAOC,EACPnI,IAAKA,EACLoI,QAASA,KACPnJ,EAAS,CAAEuF,KAAMxE,MAGlBA,IAGL,0BCCV,IAAIqI,EAAS,EACN,MAAMC,EAAUnJ,IAAMoJ,KAAK3J,IAA2B,IAA1Bc,QAAEA,EAAO8I,SAAEA,GAAU5J,EACpD,MAAMV,EAAKyB,kBAAQ,eAAA0B,SAAmBgH,GAAU,IAC1CI,EAAQrJ,iBAAO,MACfsJ,EAnBSC,EAACzK,EAAI0K,KACpB,MAAOF,EAAKG,GAAUC,mBAAS,MAY/B,OAXAvJ,oBAAU,KACN,IAAIwJ,GAAc,EAMlB,OALAC,IAAQC,WAAWC,OAAOhL,EAAI0K,GAASO,KAAKC,IACnCL,GACDF,EAAOO,EAAQV,OAGhB,KACHK,GAAc,IAEnB,CAAC7K,EAAI0K,IACDF,GAMKC,CAAWzK,EAAIwB,GAM3B,OALAH,oBAAU,KACFmJ,GAAOF,IACM,OAAbA,QAAkC,IAAbA,GAA+BA,EAASC,EAAMjJ,WAExE,CAACkJ,IACCA,EAEEvJ,IAAM0G,cAAc,MAAO,KAC9B1G,IAAM0G,cAAcwD,EAAW,CAAEX,IAAKA,EAAKjJ,IAAKgJ,KAFzCtJ,IAAM0G,cAAc,MAAO,KAAM,gBAI1CwD,EAAYlK,IAAMoJ,KAAKe,qBAAW,CAAAxE,EAAUrF,KAAQ,IAAjBiJ,IAAEA,GAAK5D,EAC5C,MAAOyE,EAAYC,GAAiBV,mBAAS,CAAE/E,MAAO,EAAGrD,OAAQ,IAQjE,OAPAnB,oBAAU,KACN,MAAMkK,EAAuB,OAARf,QAAwB,IAARA,OAAiB,EAASA,EAAIgB,MAAM,qEACzE,GAAID,GAAgBA,EAAa,GAAI,CACjC,MAAM,EAAK1F,EAAOrD,GAAU+I,EAAa,GAAGE,MAAM,OAAO5J,IAAI6J,QAC7DJ,EAAc,CAAEzF,QAAOrD,aAE5B,CAACgI,IACGvJ,IAAM0G,cAAc,MAAO,CAAEpG,IAAKA,EAAKyI,MAAO,CAC7C2B,UAAS,GAAAxI,OAAKkI,EAAW7I,OAAM,OAChCoJ,wBAAyB,CAAEC,OAAQrB,QAE/BJ,QCpBA,SAAS0B,EAAsBpL,GAAwB,IAAvBI,WAAEA,EAAUH,MAAEA,GAAOD,EAElE,MAAMV,EAAK,kBACX+L,OAAO/L,GAAM,WAAa,QAAAgM,EAAAC,UAAAhF,OAATiF,EAAI,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAJF,EAAIE,GAAAH,UAAAG,GACnBC,QAAQC,IAAI,WAAYJ,IAE1B,MAAM1K,EA/BR,SAAmBV,EAAYH,EAAO4L,GACpC,MAAMC,EAAO,GAqBb,OApBA7K,OAAOC,KAAKd,EAAWN,QAAU,IAAIyB,QAASH,IAC5C,MAAMzB,EAAQS,EAAWN,OAAOsB,GAE1B2K,EAAW3K,IAAQnB,EAAQ,YAAc,GAC/C6L,EAAKnK,KAAK,CAAC,OAAQP,EAAK2K,GAAUC,KAAK,KACnCrM,EAAMI,IACRkB,OAAOC,KAAKvB,EAAMI,IAAIwB,QAAS3B,IAE7B,MAAM8B,EAAS/B,EAAMI,GAAGH,GAExBkM,EAAKnK,KAAI,OAAAc,OAAQrB,EAAG,WAAAqB,OAAO7C,EAAK,MAAA6C,OAAKf,EAAM,KAAAe,OAAIf,EAAM,UAK/C,eAAAe,OAEZqJ,EAAKE,KAAK,MAAK,4CAYCC,CAAU7L,EAAYH,GACtC,OACEM,IAAA0G,cAAA1G,IAAA2G,SAAA,KACE3G,IAAA0G,cAACyC,EAAO,CAAC5I,QAASA,KClCT,SAASoL,EAAgBlM,GAAkC,IAAjCI,WAAEA,EAAUH,MAAEA,EAAKI,SAAEA,GAAUL,EACzDI,EAAWN,OAAOG,GAA/B,MAEMkM,EAAQlL,OAAOC,KAAKd,EAAWN,QAAQqB,IAAKC,IAChD,MAAMvB,EAAOO,EAAWN,OAAOsB,GACzBgL,EAASnM,IAAUmB,EACnBiL,EACJxM,GACAA,EAAKE,IACLkB,OAAOC,KAAKrB,EAAKE,IAAIoB,IAAKC,GAEtBb,IAAA0G,cAAA,OAAK7F,IAAKA,GACRb,IAAA0G,cAAA,UACE7F,IAAKA,EACLkI,MAAOgD,EACPC,UAAWH,EACX5C,QAASA,KACPnJ,EAAS,CAAEuF,KAAMxE,MAGlBA,GACO,IAAI,UACXvB,EAAKE,GAAGqB,KAInB,OACEb,IAAA0G,cAAA,OACE7F,IAAKA,EACLkI,MAAO,IACFkD,EACHC,gBAAiBL,EAAS,aAAe,SAG3C7L,IAAA0G,cAAA,OAAKqC,MAAO,CAAEoD,WAAY,SAAWtL,GACpCvB,GAAQA,EAAKuH,SAAW7G,IAAA0G,cAAA,aAAQpH,EAAKuH,QAAQ4E,KAAK,OACnDzL,IAAA0G,cAAA,OAAKqC,MAAOqD,GAAcN,MAKhC,OAAO9L,IAAA0G,cAAA,OAAKqC,MAAOsD,GAAiBT,GAGtC,MAAMS,EAAiB,CACrBC,QAAS,GACTC,QAAS,QAELN,EAAa,CACjBK,QAAS,GACTE,OAAQ,GACRC,aAAc,GACdC,YAAa,EACbC,YAAa,SAETP,EAAc,CAGlBjK,UAAW,QAEP4J,EAAa,CAIjBa,aAAc,uBCvDhB,SAASC,IACP,MAAOC,EAAYC,GAAiBpD,qBAC9B/J,EAAYI,IAAMC,WACjB+M,OAAEA,EAAM9E,QAAEA,EAAO+E,SAAEA,GAAYC,GCZjC,SACL/N,EACAiI,EACAC,EACAuB,GAEAxB,EAAeA,GAAgBjI,EAAQiI,aACvC,MAAO4F,EAAQG,GAAaxD,mBAASvC,GAC/BgG,EAAcnN,iBAAOmH,GACrB6F,EAAWhN,iBAAO,KACjBiI,EAASD,GAAc0B,mBAC5BtC,GAAkBlI,EAAQkI,gBAoD5B,MAAO,CAAC,CAAE2F,SAAQ9E,UAAS+E,SAAUA,EAAS5M,SAlD5BwI,IAChB,MAAMtJ,OAAEA,EAAM6H,aAAEA,GAAiBjI,EAC3B6N,EAASI,EAAY/M,QAC3B,IAAIjB,EAAQ8I,EACZ+E,EAAS5M,QAAU,CACjBjB,MAAO4N,EACP9E,UACAW,UAEF,MAAMvJ,EAAOC,EAAOyN,IAAW5F,EAE/B,GAAI9H,EAAKE,GAAI,CACX,MAAM6N,EAAa/N,EAAKE,GAAGqJ,EAAOxD,MAClC,GAAIgI,EAAY,CAEdD,EAAY/M,QAAUgN,EAEtBF,EAAUE,GACV,MAAMC,EAAW/N,EAAO8N,GACxB,GAAIC,EAAU,CACZ,MAAMzG,QAAEA,GAAYyG,EAChBzG,GACFA,EAAQ7F,QAASuM,IACO,kBAAXA,IAETA,EAASpO,EAAQ0H,QAAQ0G,IAEvBA,GACFA,EAAO,CACLtF,aACAY,SACAzJ,aAORD,EAAQyJ,SACVX,EAAYC,GACH/I,EAAQyJ,QAAQV,EAASW,IAGhCD,GACFX,EAAYC,GACHU,EAAQV,EAASW,OD9CuB2E,CACrDrG,EACA,KACA,KACA,CAAC/H,EAAOyJ,KAENkE,EAAclE,GEpBb,SAAuBzJ,EAAOyJ,GACnC,MAAM4E,EAAU,IACVrO,EAAMqO,SAAW,GAErB5E,EAAOxD,MAGT,MAAO,IACFjG,EACHqO,WFYSC,CAActO,EAAOyJ,KAGhCzI,oBAAU,KACRR,EAAUS,QAAU2M,GACnB,CAACA,IACJ,MAAMlN,EAAY+I,IAGhBqE,EAAcrE,KAGVvB,MAAEA,GAAUY,GACZ3I,OAAEA,GAAW4H,EACb7H,EAAOC,EAAOyN,IAAW7F,EAAiBC,aAChD,OACEpH,IAAA0G,cAAA1G,IAAA2G,SAAA,KACE3G,IAAA0G,cAAA,OAAKiH,UAAU,OACb3N,IAAA0G,cAAA,OAAKqC,MAAO,CAAE5G,UAAW,WACvBnC,IAAA0G,cAAA,SACEqC,MAAO,CACLtE,SAAU,MACV8H,QAAS,UAGVjF,EAAM,OAETtH,IAAA0G,cAAA,WAAMsG,GACNhN,IAAA0G,cAACoC,EAAW,CAAOxJ,OAAMQ,aACzBE,IAAA0G,cAAA,WACE1G,IAAA0G,cAACjI,IAAe,CACdiB,MAAOsN,EACP1N,KAAMA,EACNK,UAAWsN,EAASpE,OACpBjJ,UAAWqN,EAAS7N,MACpBS,WAAYsH,EACZrH,SAAUA,KAGdE,IAAA0G,cAACmE,EAAsB,CACrBnL,MAAOsN,EACPnN,WAAYsH,IAEdnH,IAAA0G,cAACiF,EAAgB,CACfjM,MAAOsN,EACPnN,WAAYsH,EACZrH,SAAUA,KAIdE,IAAA0G,cAAA,WAAMkH,KAAKC,UAAU,CAAEb,SAAQ9E,WAAW,KAAM,MAvExD5J,EAAAC,EAAAC,EAAA,iCAAAwK,IA6EO,MAAMA,EAAe,CAC1B8E,OAAQ,iBACRC,WAAY,OACZtJ,SAAU,MACV6H,QAAS,GACTE,OAAQ,EACR5H,MAAO,KAGMiI,YAEf,MAAMmB,EAAcC,SAASC,eAAe,QAC5CC,IAASpE,OAAO/J,IAAA0G,cAACmG,EAAS,MAAKmB","file":"static/js/main.58efc170.chunk.js","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\n\nfunction findNode(nodes, id) {\n  return nodes.find((it) => it.id === id);\n}\n\nfunction canFire(machine, state, event) {\n  // console.log({machine, state, event})\n  const mode = machine.states[state];\n  return mode && mode.on && mode.on[event];\n}\n\nexport default function StateForceGraph({\n  value,\n  lastEvent,\n  prevState,\n  definition,\n  dispatch\n}) {\n  const valueLatest = React.useRef();\n  const lastProps = React.useRef({ lastEvent, prevState, value });\n  const prevProps = React.useRef({});\n  useEffect(() => {\n    prevProps.current = lastProps.current;\n    lastProps.current = { lastEvent, prevState, value };\n  }, [value, lastEvent, prevState]);\n  useEffect(() => {\n    valueLatest.current = value;\n  }, [value]);\n  // console.log(\"lastevent:\", { lastEvent, prevState });\n  const ref = React.useRef();\n  const diagram = useMemo(() => {\n    // generate list of nodes and edges with ids\n    const stateIds = Object.keys(definition.states);\n    const nodes = stateIds.map((key) => {\n      return { name: key, id: key };\n    });\n\n    const links = [];\n    stateIds.forEach((key) => {\n      const state = definition.states[key];\n      const source = findNode(nodes, key);\n      state.on &&\n        Object.keys(state.on).forEach((name) => {\n          const targetId = state.on[name];\n          const target = findNode(nodes, targetId); //definition.states[targetId];\n          links.push({ name, source, target });\n        });\n    });\n\n    return { nodes, links };\n  }, [definition]);\n  // console.log(\"diagram\", diagram);\n  // let Graph =\n\n  useEffect(() => {\n    const Graph = global.ForceGraph()(ref.current);\n    ref.current.Graph = Graph;\n    Graph.height(300)\n      // .linkDirectionalParticles(1)\n      .linkCurvature(\"curvature\")\n      .linkDirectionalArrowLength(6)\n      .linkDirectionalArrowRelPos(1)\n      .nodeCanvasObjectMode(() => \"after\")\n      .nodeCanvasObject((node, ctx, globalScale) => {\n        // if (node.name !== Graph.value) {\n        //   return;\n        // }\n        const label = node.name;\n        const fontSize = 6; /// globalScale;\n        ctx.font = `${fontSize}px Sans-Serif`;\n        ctx.textAlign = \"left\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle =\n          node.name === lastProps.current.value ? \"black\" : \"darkGrey\"; //node.color;\n        ctx.fillText(label, node.x - 2, node.y);\n      })\n      // edge labels\n      .nodeId(\"id\")\n      .nodeLabel(\"name\")\n      .nodeAutoColorBy(\"name\")\n      .linkCanvasObjectMode(() => \"after\")\n      .linkCanvasObject((link, ctx) => {\n        // console.log({link, lastEvent})\n        // console.log('link', link.curvature)\n        // if (lastEvent !== link.name) {\n        //   return\n        // }\n        const MAX_FONT_SIZE = 4;\n        const LABEL_NODE_MARGIN = Graph.nodeRelSize() * 1.5;\n\n        const start = link.source;\n        const end = link.target;\n\n        // ignore unbound links\n        if (typeof start !== \"object\" || typeof end !== \"object\") return;\n\n        // calculate label positioning\n        let textPos = Object.assign(\n          ...[\"x\", \"y\"].map((c) => ({\n            [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point\n          }))\n        );\n\n        if (+link.curvature > 0) {\n          // console.log( 'um', { start, link, end })\n          if (link.__controlPoints)\n            textPos = getQuadraticXY(\n              0.5,\n              start.x,\n              start.y,\n              link.__controlPoints[0],\n              link.__controlPoints[1],\n              end.x,\n              end.y\n            );\n        }\n\n        // textPos.y += (link.curvature * 20)\n        // textPos.x -= (link.curvature * 20)\n\n        const relLink = { x: end.x - start.x, y: end.y - start.y };\n\n        const maxTextLength =\n          Math.sqrt(Math.pow(relLink.x, 2) + Math.pow(relLink.y, 2)) -\n          LABEL_NODE_MARGIN * 2;\n\n        let textAngle = Math.atan2(relLink.y, relLink.x);\n        // maintain label vertical orientation for legibility\n        if (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\n        if (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\n\n        const label = `${link.name}`;\n\n        // estimate fontSize to fit in link length\n        ctx.font = \"1px Sans-Serif\";\n        const fontSize = Math.min(\n          MAX_FONT_SIZE,\n          maxTextLength / ctx.measureText(label).width\n        );\n        ctx.font = `${fontSize}px Sans-Serif`;\n        const textWidth = ctx.measureText(label).width;\n        const bckgDimensions = [textWidth, fontSize].map(\n          (n) => n + fontSize * 0.2\n        ); // some padding\n\n        // draw text label (with background rect)\n        ctx.save();\n        ctx.translate(textPos.x, textPos.y);\n        // ctx.translate(\n        //   // link.curvature* bckgDimensions[0]*2,\n        //   0,\n        //   link.curvature *  4 * bckgDimensions[1]\n        //   // link.offset * bckgDimensions[1]*3\n        // )\n        ctx.rotate(textAngle);\n\n        ctx.fillStyle = \"rgba(255, 255, 255, 0.9)\";\n        ctx.fillRect(\n          -bckgDimensions[0] / 2,\n          -bckgDimensions[1] / 2,\n          ...bckgDimensions\n        );\n        const color =\n          valueLatest.current === link.source.name &&\n          canFire(definition, valueLatest.current, link.name)\n            ? \"blue\"\n            : \"darkgrey\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = color;\n        ctx.fillText(link.name, 0, 0); // +link.curvature + (link.flipped ? '-f' : '')+link.offset, 0, 0);\n        ctx.restore();\n      })\n      .linkColor((link) =>\n        valueLatest.current === link.source.name &&\n        canFire(definition, valueLatest.current, link.name)\n          ? \"blue\"\n          : lastProps.current.prevState === link.source.name &&\n            lastProps.current.lastEvent &&\n            lastProps.current.lastEvent.type === link.name\n          ? \"teal\"\n          : \"darkgrey\"\n      )\n      .linkDirectionalParticleColor(() => \"teal\")\n      .linkDirectionalParticleSpeed(0.04)\n      .linkDirectionalParticleWidth(8)\n      .linkHoverPrecision(10)\n      .onLinkClick(({ name }) => {\n        dispatch({ type: name });\n        // console.log(\"dispatched\", name);\n      });\n    let selfLoopLinks = {};\n    let sameNodesLinks = {};\n    const curvatureMinMax = 0.5;\n\n    // 1. assign each link a nodePairId that combines their source and target independent of the links direction\n    // 2. group links together that share the same two nodes or are self-loops\n    diagram.links.forEach((link) => {\n      link.nodePairId =\n        link.source <= link.target\n          ? link.source + \"_\" + link.target\n          : link.target + \"_\" + link.source;\n      let map = link.source === link.target ? selfLoopLinks : sameNodesLinks;\n      if (!map[link.nodePairId]) {\n        map[link.nodePairId] = [];\n      }\n      map[link.nodePairId].push(link);\n    });\n\n    // Compute the curvature for self-loop links to avoid overlaps\n    Object.keys(selfLoopLinks).forEach((id) => {\n      let links = selfLoopLinks[id];\n      let lastIndex = links.length - 1;\n      links[lastIndex].curvature = 1;\n      let delta = (1 - curvatureMinMax) / lastIndex;\n      for (let i = 0; i < lastIndex; i++) {\n        links[i].curvature = curvatureMinMax + i * delta;\n      }\n    });\n\n    // Compute the curvature for links sharing the same two nodes to avoid overlaps\n    Object.keys(sameNodesLinks)\n      .filter((nodePairId) => sameNodesLinks[nodePairId].length > 1)\n      .forEach((nodePairId) => {\n        let links = sameNodesLinks[nodePairId];\n        let lastIndex = links.length - 1;\n        let lastLink = links[lastIndex];\n        lastLink.curvature = curvatureMinMax;\n        let delta = (2 * curvatureMinMax) / lastIndex;\n        for (let i = 0; i < lastIndex; i++) {\n          links[i].curvature = -curvatureMinMax + i * delta;\n          links[i].offset = i;\n          if (lastLink.source !== links[i].source) {\n            links[i].curvature *= -1;\n            links[i].flipped = true; // flip it around, otherwise they overlap\n          }\n        }\n      });\n\n    // console.log(\"made graph\", Graph);\n  }, [0]);\n  useEffect(() => {\n    // console.log(\"effect\", ref.current, { definition, value });\n    // const Graph = ForceGraph()(ref.current);\n    const { Graph } = ref.current;\n    Graph.value = value;\n    Graph.graphData(diagram);\n    // if (Graph) {\n    // }\n  }, [diagram, value]);\n\n  useEffect(() => {\n    // console.log(\"lastEvent\", lastEvent);\n    if (!lastEvent) return;\n    const { links } = diagram;\n    if (prevState) {\n      // console.log(\"event\", prevState, lastEvent);\n      const { type } = lastEvent;\n      const link = diagram.links.find(\n        (it) => it.source.id === prevState && it.name === type\n      );\n      // console.log(\"link\", link, links);\n      setTimeout(() => {\n        ref.current.Graph.emitParticle(link);\n        // console.log(\"emitted\", link);\n      }, 10);\n    }\n    if (ref.current && ref.current.Graph) {\n      // [...Array(10).keys()].forEach(() => {\n      //   const link = links[Math.floor(Math.random() * links.length)];\n      //   ref.current.Graph.emitParticle(link);\n      // });\n    }\n  }, [lastEvent]);\n  return (\n    <>\n      {/* Debug: {JSON.stringify({ prevState, lastEvent })} */}\n      <div ref={ref}>Coming soon: StateForceGraph</div>\n    </>\n  );\n}\n\nfunction getQuadraticXY(t, sx, sy, cp1x, cp1y, ex, ey) {\n  return {\n    x: (1 - t) * (1 - t) * sx + 2 * (1 - t) * t * cp1x + t * t * ex,\n    y: (1 - t) * (1 - t) * sy + 2 * (1 - t) * t * cp1y + t * t * ey\n  };\n}\n","let states = {\n  Initial: {\n    on: { start: \"Running\" },\n    effects: [\"clearInterval\", \"clearLapse\"]\n  },\n  Running: {\n    on: { stop: \"Initial\", pause: \"Idle\" },\n    effects: [\"startInterval\"]\n  },\n  Idle: {\n    on: { stop: \"Initial\", resume: \"Running\" },\n    effects: [\"clearInterval\"]\n  }\n};\n\n// TRY UNCOMMENTING THESE LINES\n// FOR A COMPLEX EXAMPLE\n\nstates = {\n  ...states,\n  Idle: {\n    ...states.Idle,\n    on: {\n      ...states.Idle.on,\n      configure: \"Configuring\"\n    }\n  },\n  Configuring: { on: { save: \"Saving_Config\" } },\n  Saving_Config: { on: { saved: \"Deploying_Config\" } },\n  Deploying_Config: { on: { deployed: \"Resume_or_Restart\" } },\n  Resume_or_Restart: { on: { resume: \"Running\", start_over: \"Initial\" } }\n};\n\nconst initialContext = { lapse: 0, lapseTime: null };\n\nconst effects = {\n  startInterval: ({ setContext }) =>\n    setContext((context) => {\n      let interval = context.interval;\n      if (!interval) {\n        interval = setInterval(() => {\n          setContext((context) => {\n            const { lapse } = context;\n            const startTime = Date.now();\n\n            const prevTime = context.lapseTime || startTime;\n            const lapseTime = Date.now();\n            const delta = lapseTime - prevTime;\n            return {\n              ...context,\n              lapse: (lapse || 0) + delta,\n              lapseTime\n            };\n          });\n        }, 50);\n      }\n      return {\n        ...context,\n        interval\n      };\n    }),\n  clearInterval: ({ setContext }) =>\n    setContext((context) => ({\n      ...context,\n      interval: context.interval ? clearInterval(context.interval) : null,\n      lapseTime: null\n    })),\n  clearLapse: ({ setContext }) =>\n    setContext((context) => ({\n      ...context,\n      lapse: 0\n    }))\n};\n\nexport const reducer = (state, action) => {\n  // console.log(\"reduce\", state, action);\n  switch (action.type) {\n    case \"clear\":\n      state = {\n        ...state,\n        lapse: 0\n      };\n      break;\n    default:\n      break;\n  }\n  return state;\n};\n\nexport const StopwatchMachine = {\n  initialState: \"Initial\",\n  initialContext,\n  states,\n  effects,\n  reducer\n};\n","import React from \"react\";\nimport { buttonStyles } from \"./index\";\n\nexport default function ModeButtons({ mode, dispatch }) {\n  return (\n    <>\n      {mode && mode.on\n        ? Object.keys(mode.on).map((key) => (\n            <button\n              style={buttonStyles}\n              key={key}\n              onClick={() => {\n                dispatch({ type: key });\n              }}\n            >\n              {key}\n            </button>\n          ))\n        : null}\n    </>\n  );\n}\n","import React, { useState, useEffect, useMemo, useRef, forwardRef } from 'react';\nimport mermaid from 'mermaid';\nimport './mermaid.css';\n// Initialize Mermaid\nconst useMermaid = (id, content) => {\n    const [svg, setSvg] = useState(null);\n    useEffect(() => {\n        let isCancelled = false;\n        mermaid.mermaidAPI.render(id, content).then(svgraph => {\n            if (!isCancelled) {\n                setSvg(svgraph.svg);\n            }\n        });\n        return () => {\n            isCancelled = true;\n        };\n    }, [id, content]);\n    return svg;\n};\nlet lastId = 0;\nexport const Mermaid = React.memo(({ diagram, onRender }) => {\n    const id = useMemo(() => `mermaid-${++lastId}`, []);\n    const elRef = useRef(null);\n    const svg = useMermaid(id, diagram);\n    useEffect(() => {\n        if (svg && onRender) {\n            onRender === null || onRender === void 0 ? void 0 : onRender(elRef.current);\n        }\n    }, [svg]);\n    if (!svg)\n        return React.createElement(\"div\", null, \"Loading...\");\n    return React.createElement(\"div\", null,\n        React.createElement(InlineSvg, { svg: svg, ref: elRef }));\n});\nconst InlineSvg = React.memo(forwardRef(({ svg }, ref) => {\n    const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n    useEffect(() => {\n        const viewBoxMatch = svg === null || svg === void 0 ? void 0 : svg.match(/viewBox=\"(-?\\d*\\.?\\d+\\s+-?\\d*\\.?\\d+\\s+-?\\d*\\.?\\d+\\s+-?\\d*\\.?\\d+)\"/);\n        if (viewBoxMatch && viewBoxMatch[1]) {\n            const [, , width, height] = viewBoxMatch[1].split(/\\s+/).map(Number);\n            setDimensions({ width, height });\n        }\n    }, [svg]);\n    return React.createElement(\"div\", { ref: ref, style: {\n            minHeight: `${dimensions.height}px`,\n        }, dangerouslySetInnerHTML: { __html: svg } });\n}));\nexport default Mermaid;","import React, { useEffect, useState } from \"react\";\nimport Mermaid from \"./Mermaid\";\nfunction toDiagram(definition, value, callbackName) {\n  const rows = [];\n  Object.keys(definition.states || {}).forEach((key) => {\n    const state = definition.states[key];\n    // console.log(\"state\", key, state);\n    const ifactive = key === value ? \":::active\" : \"\";\n    rows.push([\"    \", key, ifactive].join(\"\"));\n    if (state.on) {\n      Object.keys(state.on).forEach((event) => {\n        // console.log(\"event\", event);\n        const target = state.on[event];\n\n        rows.push(`    ${key}-->|${event}| ${target}[${target}]`);\n      });\n    }\n    // rows.push([\"   \", \"click\", key, callbackName].join(\" \"));\n  });\n  const output = `\ngraph LR\n${rows.join(\"\\n\")}\n    classDef active fill:aquamarine;\n`;\n  return output;\n}\n\nexport default function StateMachineVisualizer({ definition, value }) {\n  //const [id] = useState(uuid.v4())\n  const id = \"mermaidCallback\";\n  window[id] = (...args) => {\n    console.log(\"callback\", args);\n  };\n  const diagram = toDiagram(definition, value, id);\n  return (\n    <>\n      <Mermaid diagram={diagram} />\n      {/*<pre>{diagram}</pre>*/}\n      {/*<pre>{JSON.stringify(definition, null, 2)}</pre>*/}\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function StateMachineView({ definition, value, dispatch }) {\n  const mode = definition.states[value];\n\n  const steps = Object.keys(definition.states).map((key) => {\n    const mode = definition.states[key];\n    const active = value === key;\n    const events =\n      mode &&\n      mode.on &&\n      Object.keys(mode.on).map((key) => {\n        return (\n          <div key={key}>\n            <button\n              key={key}\n              style={eventStyle}\n              disabled={!active}\n              onClick={() => {\n                dispatch({ type: key });\n              }}\n            >\n              {key}\n            </button>{\" \"}\n            → {mode.on[key]}\n          </div>\n        );\n      });\n    return (\n      <div\n        key={key}\n        style={{\n          ...stateStyle,\n          backgroundColor: active ? \"aquamarine\" : \"#ccc\"\n        }}\n      >\n        <div style={{ fontWeight: \"bold\" }}>{key}</div>\n        {mode && mode.effects && <small>{mode.effects.join(\", \")}</small>}\n        <div style={eventsStyle}>{events}</div>\n      </div>\n    );\n  });\n\n  return <div style={containerStyle}>{steps}</div>;\n}\n\nconst containerStyle = {\n  padding: 10,\n  display: \"flex\"\n};\nconst stateStyle = {\n  padding: 10,\n  margin: 10,\n  borderRadius: 10,\n  borderWidth: 1,\n  borderStyle: \"solid\"\n};\nconst eventsStyle = {\n  // display: \"flex\",\n  // flexDirection: \"column\"\n  textAlign: \"left\"\n};\nconst eventStyle = {\n  // border: \"none\",\n  // color: \"blue\",\n  // background: \"none\"\n  marginBottom: 2\n};\n","import ReactDOM from \"react-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport { useStateMachine } from \"./useStateMachine\";\nimport { StopwatchMachine } from \"./StopwatchMachine\";\nimport ModeButtons from \"./ModeButtons\";\nimport { reduceHistory } from \"./reduceHistory\";\nimport StateMachineVisualizer from \"./StateMachineVisualizer\";\nimport StateMachineView from \"./StateMachineView\";\nimport \"./styles.css\";\nimport StateForceGraph from \"./StateForceGraph\";\n\nfunction Stopwatch() {\n  const [lastAction, setLastAction] = useState();\n  const prevState = React.useRef();\n  const [{ status, context, previous }, innerDispatch] = useStateMachine(\n    StopwatchMachine,\n    null,\n    null,\n    (state, action) => {\n      // console.log(\"action\", action);\n      setLastAction(action);\n      return reduceHistory(state, action);\n    }\n  );\n  useEffect(() => {\n    prevState.current = status;\n  }, [status]);\n  const dispatch = (action) => {\n    // console.log(\"DISPATCH\", action);\n    // prevState.current = status;\n    innerDispatch(action);\n  };\n  // console.log(\"last action111\", lastAction);\n  const { lapse } = context;\n  const { states } = StopwatchMachine;\n  const mode = states[status] || StopwatchMachine.initialState;\n  return (\n    <>\n      <div className=\"App\">\n        <div style={{ textAlign: \"center\" }}>\n          <label\n            style={{\n              fontSize: \"5em\",\n              display: \"block\"\n            }}\n          >\n            {lapse} ms\n          </label>\n          <div>{status}</div>\n          <ModeButtons {...{ mode, dispatch }} />\n          <div>\n            <StateForceGraph\n              value={status}\n              mode={mode}\n              lastEvent={previous.action}\n              prevState={previous.state}\n              definition={StopwatchMachine}\n              dispatch={dispatch}\n            />\n          </div>\n          <StateMachineVisualizer\n            value={status}\n            definition={StopwatchMachine}\n          />\n          <StateMachineView\n            value={status}\n            definition={StopwatchMachine}\n            dispatch={dispatch}\n          />\n          {/* previous={JSON.stringify(previous)} */}\n        </div>\n        <pre>{JSON.stringify({ status, context }, null, 2)}</pre>\n      </div>\n    </>\n  );\n}\n\nexport const buttonStyles = {\n  border: \"1px solid #ccc\",\n  background: \"#fff\",\n  fontSize: \"2em\",\n  padding: 15,\n  margin: 5,\n  width: 200\n};\n\nexport default Stopwatch;\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Stopwatch />, rootElement);\n","import { useState, useRef } from \"react\";\n\nexport function useStateMachine(\n  machine,\n  initialState,\n  initialContext,\n  reducer\n) {\n  initialState = initialState || machine.initialState;\n  const [status, setStatus] = useState(initialState);\n  const draftStatus = useRef(initialState);\n  const previous = useRef({});\n  const [context, setContext] = useState(\n    initialContext || machine.initialContext\n  );\n  const dispatch = (action) => {\n    const { states, initialState } = machine;\n    const status = draftStatus.current;\n    let state = context;\n    previous.current = {\n      state: status,\n      context,\n      action\n    };\n    const mode = states[status] || initialState;\n    // console.log(\"machine action\", status, mode, action);\n    if (mode.on) {\n      const nextStatus = mode.on[action.type];\n      if (nextStatus) {\n        // console.log(\"next status\", nextStatus);\n        draftStatus.current = nextStatus;\n        // setState(draftState.current)\n        setStatus(nextStatus);\n        const nextMode = states[nextStatus];\n        if (nextMode) {\n          const { effects } = nextMode;\n          if (effects) {\n            effects.forEach((effect) => {\n              if (typeof effect === \"string\") {\n                // console.log(\"effect\", effect);\n                effect = machine.effects[effect];\n              }\n              if (effect) {\n                effect({\n                  setContext,\n                  action,\n                  state\n                });\n              }\n            });\n          }\n        }\n      }\n      if (machine.reducer) {\n        setContext((context) => {\n          return machine.reducer(context, action);\n        });\n      }\n      if (reducer) {\n        setContext((context) => {\n          return reducer(context, action);\n        });\n      }\n    }\n  };\n  return [{ status, context, previous: previous.current }, dispatch];\n}\n","export function reduceHistory(state, action) {\n  const history = [\n    ...(state.history || []),\n    // { state, action }\n    action.type\n  ];\n\n  return {\n    ...state,\n    history\n  };\n}\n"],"sourceRoot":""}