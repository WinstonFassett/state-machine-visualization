{"version":3,"sources":["../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/infoDiagram-736b4530.js"],"names":["__webpack_require__","r","__webpack_exports__","d","diagram","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_0__","parser","o","k","v","o2","l","length","$V0","parser2","trace","yy","symbols_","error","start","info","document","EOF","line","statement","NL","showInfo","$accept","$end","terminals_","2","4","6","9","10","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","setInfo","table","3","1","5","7","8","defaultActions","parseError","str","hash","recoverable","Error","this","parse","input","self","stack","tstack","vstack","lstack","args","slice","call","arguments","lexer2","Object","create","lexer","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","lex","token","pop","Array","getPrototypeOf","symbol","state","action","p","len","newState","expected","yyval","errStr","showPosition","join","text","match","loc","$","first_line","last_line","first_column","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","substr","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","conditions","topState","Math","abs","pushState","stateStackSize","case-insensitive","yy_","$avoiding_name_collisions","YY_START","INITIAL","inclusive","Parser","DEFAULT_INFO_DB","db","clear","toggle","getInfo","renderer","draw","id","version","debug","svg","append","attr","style"],"mappings":"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","file":"static/js/22.df7f4305.chunk.js","sourcesContent":["import { l as log, z as selectSvgElement, i as configureSvgSize } from \"./mermaid-8af3addd.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"d3\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function () {\n  var o = function (k, v, o2, l) {\n      for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n      return o2;\n    },\n    $V0 = [6, 9, 10];\n  var parser2 = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"start\": 3,\n      \"info\": 4,\n      \"document\": 5,\n      \"EOF\": 6,\n      \"line\": 7,\n      \"statement\": 8,\n      \"NL\": 9,\n      \"showInfo\": 10,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      4: \"info\",\n      6: \"EOF\",\n      9: \"NL\",\n      10: \"showInfo\"\n    },\n    productions_: [0, [3, 3], [5, 0], [5, 2], [7, 1], [7, 1], [8, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      $$.length - 1;\n      switch (yystate) {\n        case 1:\n          return yy;\n        case 4:\n          break;\n        case 6:\n          yy.setInfo(true);\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: [1, 2]\n    }, {\n      1: [3]\n    }, o($V0, [2, 2], {\n      5: 3\n    }), {\n      6: [1, 4],\n      7: 5,\n      8: 6,\n      9: [1, 7],\n      10: [1, 8]\n    }, {\n      1: [2, 1]\n    }, o($V0, [2, 3]), o($V0, [2, 4]), o($V0, [2, 5]), o($V0, [2, 6])],\n    defaultActions: {\n      4: [2, 1]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = \"\",\n        yylineno = 0,\n        yyleng = 0,\n        TERROR = 2,\n        EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol,\n        state,\n        action,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function () {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {\n        \"case-insensitive\": true\n      },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            return 4;\n          case 1:\n            return 9;\n          case 2:\n            return \"space\";\n          case 3:\n            return 10;\n          case 4:\n            return 6;\n          case 5:\n            return \"TXT\";\n        }\n      },\n      rules: [/^(?:info\\b)/i, /^(?:[\\s\\n\\r]+)/i, /^(?:[\\s]+)/i, /^(?:showInfo\\b)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: {\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nconst DEFAULT_INFO_DB = {\n  info: false\n};\nlet info = DEFAULT_INFO_DB.info;\nconst setInfo = toggle => {\n  info = toggle;\n};\nconst getInfo = () => info;\nconst clear = () => {\n  info = DEFAULT_INFO_DB.info;\n};\nconst db = {\n  clear,\n  setInfo,\n  getInfo\n};\nconst draw = (text, id, version) => {\n  log.debug(\"rendering info diagram\\n\" + text);\n  const svg = selectSvgElement(id);\n  configureSvgSize(svg, 100, 400, true);\n  const group = svg.append(\"g\");\n  group.append(\"text\").attr(\"x\", 100).attr(\"y\", 40).attr(\"class\", \"version\").attr(\"font-size\", 32).style(\"text-anchor\", \"middle\").text(\"v\".concat(version));\n};\nconst renderer = {\n  draw\n};\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer\n};\nexport { diagram };"],"sourceRoot":""}