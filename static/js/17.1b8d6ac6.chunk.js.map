{"version":3,"sources":["../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/svgDrawCommon-4835440b.js","../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/journeyDiagram-df861f2b.js"],"names":["__webpack_require__","d","__webpack_exports__","drawBackgroundRect","drawEmbeddedImage","drawImage","drawRect","getTextObj","drawText","getNoteRect","_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0__","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_1__","element","rectData","rectElement","append","attr","x","y","fill","stroke","width","height","rx","ry","attrs","attrKey","class","bounds","startx","starty","stopx","stopy","lower","textData","nText","text","replace","textElem","style","anchor","tspan","textMargin","elem","link","imageElement","sanitizedLink","Object","concat","text-anchor","r","diagram","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_0__","d3__WEBPACK_IMPORTED_MODULE_1__","_svgDrawCommon_4835440b_js__WEBPACK_IMPORTED_MODULE_2__","parser","o","k","v","o2","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","parser2","trace","yy","symbols_","error","start","journey","document","EOF","line","SPACE","statement","NEWLINE","title","acc_title","acc_title_value","acc_descr","acc_descr_value","acc_descr_multiline_value","section","taskName","taskData","$accept","$end","terminals_","2","4","6","8","10","11","12","13","14","15","16","17","18","19","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","this","$","push","setDiagramTitle","substr","trim","setAccTitle","setAccDescription","addSection","addTask","table","3","1","5","7","9","defaultActions","parseError","str","hash","recoverable","Error","parse","input","self","stack","tstack","vstack","lstack","args","slice","call","arguments","lexer2","create","lexer","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","lex","token","pop","Array","getPrototypeOf","symbol","state","action","p","len","newState","expected","yyval","errStr","showPosition","join","match","loc","first_line","last_line","first_column","last_column","range","apply","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","conditions","topState","Math","abs","pushState","stateStackSize","case-insensitive","yy_","$avoiding_name_collisions","YY_START","acc_descr_multiline","inclusive","INITIAL","Parser","parser$1","currentSection","sections","tasks","rawTasks","compileTasks","allProcessed","rawTask","entries","processed","db","getConfig","clear","getDiagramTitle","getAccTitle","getAccDescription","txt","getSections","getTasks","allItemsProcessed","iterationCount","descr","pieces","score","peeps","Number","peopleList","map","s","type","people","task","addTaskOrg","newTask","description","classes","getActors","tempActors","forEach","Set","sort","updateActors","styles","textColor","faceColor","mainBkg","nodeBorder","arrowheadColor","lineColor","edgeLabelBackground","titleColor","tertiaryColor","border2","fillType0","fillType1","fillType2","fillType3","fillType4","fillType5","fillType6","fillType7","actor0","actor1","actor2","actor3","actor4","actor5","drawCircle","circleData","circleElement","cx","cy","pos","taskCount","_drawTextCandidateFunc","byText","content","g","textAttrs","colour","_setTextAttrs","byTspan","conf2","taskFontSize","taskFontFamily","dy","byFo","body","toText","fromTextAttrsDict","key","textPlacement","svgDraw","drawSection","rect","diagramMarginX","num","drawLabel","txtObject","polygon","cut","labelMargin","drawTask","center","faceData","radius","face","face2","arc$1","startAngle","PI","endAngle","innerRadius","outerRadius","smile","sad","drawFace","xPos","person","actors","color","circle","position","bounds2","initGraphics","graphics","conf","LEFT_MARGIN","leftMargin","data","verticalPos","sequenceItems","init","updateVal","obj","val","fun","updateBounds","_self","cnt","item","boxMargin","min","max","insert","_startx","_stopx","_starty","_stopy","bumpVerticalPos","bump","getVerticalPos","getBounds","fills","sectionFills","textColours","sectionColours","drawTasks","diagram2","tasks2","lastSection","taskPos","diagramMarginY","sectionNumber","taskInSectionCount","currentSection2","taskIndex","taskMargin","taskActors","reduce","acc","actorName","renderer","setConf","cnf","keys","draw","id","version","diagObj","securityLevel","sandboxElement","root","nodes","contentDocument","select","actorNames","member","actorPos","actorColours","yPos","labelData","boxTextMargin","drawActorLegend","box","useMaxWidth","extraVertForTitle"],"mappings":"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","file":"static/js/17.1b8d6ac6.chunk.js","sourcesContent":["import { sanitizeUrl } from \"@braintree/sanitize-url\";\nimport { H as lineBreakRegex } from \"./mermaid-8af3addd.js\";\nconst drawRect = (element, rectData) => {\n  const rectElement = element.append(\"rect\");\n  rectElement.attr(\"x\", rectData.x);\n  rectElement.attr(\"y\", rectData.y);\n  rectElement.attr(\"fill\", rectData.fill);\n  rectElement.attr(\"stroke\", rectData.stroke);\n  rectElement.attr(\"width\", rectData.width);\n  rectElement.attr(\"height\", rectData.height);\n  rectData.rx !== void 0 && rectElement.attr(\"rx\", rectData.rx);\n  rectData.ry !== void 0 && rectElement.attr(\"ry\", rectData.ry);\n  if (rectData.attrs !== void 0) {\n    for (const attrKey in rectData.attrs) {\n      rectElement.attr(attrKey, rectData.attrs[attrKey]);\n    }\n  }\n  rectData.class !== void 0 && rectElement.attr(\"class\", rectData.class);\n  return rectElement;\n};\nconst drawBackgroundRect = (element, bounds) => {\n  const rectData = {\n    x: bounds.startx,\n    y: bounds.starty,\n    width: bounds.stopx - bounds.startx,\n    height: bounds.stopy - bounds.starty,\n    fill: bounds.fill,\n    stroke: bounds.stroke,\n    class: \"rect\"\n  };\n  const rectElement = drawRect(element, rectData);\n  rectElement.lower();\n};\nconst drawText = (element, textData) => {\n  const nText = textData.text.replace(lineBreakRegex, \" \");\n  const textElem = element.append(\"text\");\n  textElem.attr(\"x\", textData.x);\n  textElem.attr(\"y\", textData.y);\n  textElem.attr(\"class\", \"legend\");\n  textElem.style(\"text-anchor\", textData.anchor);\n  textData.class !== void 0 && textElem.attr(\"class\", textData.class);\n  const tspan = textElem.append(\"tspan\");\n  tspan.attr(\"x\", textData.x + textData.textMargin * 2);\n  tspan.text(nText);\n  return textElem;\n};\nconst drawImage = (elem, x, y, link) => {\n  const imageElement = elem.append(\"image\");\n  imageElement.attr(\"x\", x);\n  imageElement.attr(\"y\", y);\n  const sanitizedLink = sanitizeUrl(link);\n  imageElement.attr(\"xlink:href\", sanitizedLink);\n};\nconst drawEmbeddedImage = (element, x, y, link) => {\n  const imageElement = element.append(\"use\");\n  imageElement.attr(\"x\", x);\n  imageElement.attr(\"y\", y);\n  const sanitizedLink = sanitizeUrl(link);\n  imageElement.attr(\"xlink:href\", \"#\".concat(sanitizedLink));\n};\nconst getNoteRect = () => {\n  const noteRectData = {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n    fill: \"#EDF2AE\",\n    stroke: \"#666\",\n    anchor: \"start\",\n    rx: 0,\n    ry: 0\n  };\n  return noteRectData;\n};\nconst getTextObj = () => {\n  const testObject = {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n    \"text-anchor\": \"start\",\n    style: \"#666\",\n    textMargin: 0,\n    rx: 0,\n    ry: 0,\n    tspan: true\n  };\n  return testObject;\n};\nexport { drawBackgroundRect as a, drawEmbeddedImage as b, drawImage as c, drawRect as d, getTextObj as e, drawText as f, getNoteRect as g };","import { c as getConfig, q as setDiagramTitle, r as getDiagramTitle, s as setAccTitle, g as getAccTitle, b as setAccDescription, a as getAccDescription, t as clear$1, i as configureSvgSize } from \"./mermaid-8af3addd.js\";\nimport { arc, select } from \"d3\";\nimport { d as drawRect$1, f as drawText$1, a as drawBackgroundRect$1, g as getNoteRect } from \"./svgDrawCommon-4835440b.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function () {\n  var o = function (k, v, o2, l) {\n      for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n      return o2;\n    },\n    $V0 = [6, 8, 10, 11, 12, 14, 16, 17, 18],\n    $V1 = [1, 9],\n    $V2 = [1, 10],\n    $V3 = [1, 11],\n    $V4 = [1, 12],\n    $V5 = [1, 13],\n    $V6 = [1, 14];\n  var parser2 = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"start\": 3,\n      \"journey\": 4,\n      \"document\": 5,\n      \"EOF\": 6,\n      \"line\": 7,\n      \"SPACE\": 8,\n      \"statement\": 9,\n      \"NEWLINE\": 10,\n      \"title\": 11,\n      \"acc_title\": 12,\n      \"acc_title_value\": 13,\n      \"acc_descr\": 14,\n      \"acc_descr_value\": 15,\n      \"acc_descr_multiline_value\": 16,\n      \"section\": 17,\n      \"taskName\": 18,\n      \"taskData\": 19,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      4: \"journey\",\n      6: \"EOF\",\n      8: \"SPACE\",\n      10: \"NEWLINE\",\n      11: \"title\",\n      12: \"acc_title\",\n      13: \"acc_title_value\",\n      14: \"acc_descr\",\n      15: \"acc_descr_value\",\n      16: \"acc_descr_multiline_value\",\n      17: \"section\",\n      18: \"taskName\",\n      19: \"taskData\"\n    },\n    productions_: [0, [3, 3], [5, 0], [5, 2], [7, 2], [7, 1], [7, 1], [7, 1], [9, 1], [9, 2], [9, 2], [9, 1], [9, 1], [9, 2]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 1:\n          return $$[$0 - 1];\n        case 2:\n          this.$ = [];\n          break;\n        case 3:\n          $$[$0 - 1].push($$[$0]);\n          this.$ = $$[$0 - 1];\n          break;\n        case 4:\n        case 5:\n          this.$ = $$[$0];\n          break;\n        case 6:\n        case 7:\n          this.$ = [];\n          break;\n        case 8:\n          yy.setDiagramTitle($$[$0].substr(6));\n          this.$ = $$[$0].substr(6);\n          break;\n        case 9:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 10:\n        case 11:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 12:\n          yy.addSection($$[$0].substr(8));\n          this.$ = $$[$0].substr(8);\n          break;\n        case 13:\n          yy.addTask($$[$0 - 1], $$[$0]);\n          this.$ = \"task\";\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: [1, 2]\n    }, {\n      1: [3]\n    }, o($V0, [2, 2], {\n      5: 3\n    }), {\n      6: [1, 4],\n      7: 5,\n      8: [1, 6],\n      9: 7,\n      10: [1, 8],\n      11: $V1,\n      12: $V2,\n      14: $V3,\n      16: $V4,\n      17: $V5,\n      18: $V6\n    }, o($V0, [2, 7], {\n      1: [2, 1]\n    }), o($V0, [2, 3]), {\n      9: 15,\n      11: $V1,\n      12: $V2,\n      14: $V3,\n      16: $V4,\n      17: $V5,\n      18: $V6\n    }, o($V0, [2, 5]), o($V0, [2, 6]), o($V0, [2, 8]), {\n      13: [1, 16]\n    }, {\n      15: [1, 17]\n    }, o($V0, [2, 11]), o($V0, [2, 12]), {\n      19: [1, 18]\n    }, o($V0, [2, 4]), o($V0, [2, 9]), o($V0, [2, 10]), o($V0, [2, 13])],\n    defaultActions: {},\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = \"\",\n        yylineno = 0,\n        yyleng = 0,\n        TERROR = 2,\n        EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol,\n        state,\n        action,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function () {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {\n        \"case-insensitive\": true\n      },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            return 10;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            return 4;\n          case 6:\n            return 11;\n          case 7:\n            this.begin(\"acc_title\");\n            return 12;\n          case 8:\n            this.popState();\n            return \"acc_title_value\";\n          case 9:\n            this.begin(\"acc_descr\");\n            return 14;\n          case 10:\n            this.popState();\n            return \"acc_descr_value\";\n          case 11:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 12:\n            this.popState();\n            break;\n          case 13:\n            return \"acc_descr_multiline_value\";\n          case 14:\n            return 17;\n          case 15:\n            return 18;\n          case 16:\n            return 19;\n          case 17:\n            return \":\";\n          case 18:\n            return 6;\n          case 19:\n            return \"INVALID\";\n        }\n      },\n      rules: [/^(?:%(?!\\{)[^\\n]*)/i, /^(?:[^\\}]%%[^\\n]*)/i, /^(?:[\\n]+)/i, /^(?:\\s+)/i, /^(?:#[^\\n]*)/i, /^(?:journey\\b)/i, /^(?:title\\s[^#\\n;]+)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:section\\s[^#:\\n;]+)/i, /^(?:[^#:\\n;]+)/i, /^(?::[^#\\n;]+)/i, /^(?::)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: {\n        \"acc_descr_multiline\": {\n          \"rules\": [12, 13],\n          \"inclusive\": false\n        },\n        \"acc_descr\": {\n          \"rules\": [10],\n          \"inclusive\": false\n        },\n        \"acc_title\": {\n          \"rules\": [8],\n          \"inclusive\": false\n        },\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 14, 15, 16, 17, 18, 19],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet currentSection = \"\";\nconst sections = [];\nconst tasks = [];\nconst rawTasks = [];\nconst clear = function () {\n  sections.length = 0;\n  tasks.length = 0;\n  currentSection = \"\";\n  rawTasks.length = 0;\n  clear$1();\n};\nconst addSection = function (txt) {\n  currentSection = txt;\n  sections.push(txt);\n};\nconst getSections = function () {\n  return sections;\n};\nconst getTasks = function () {\n  let allItemsProcessed = compileTasks();\n  const maxDepth = 100;\n  let iterationCount = 0;\n  while (!allItemsProcessed && iterationCount < maxDepth) {\n    allItemsProcessed = compileTasks();\n    iterationCount++;\n  }\n  tasks.push(...rawTasks);\n  return tasks;\n};\nconst updateActors = function () {\n  const tempActors = [];\n  tasks.forEach(task => {\n    if (task.people) {\n      tempActors.push(...task.people);\n    }\n  });\n  const unique = new Set(tempActors);\n  return [...unique].sort();\n};\nconst addTask = function (descr, taskData) {\n  const pieces = taskData.substr(1).split(\":\");\n  let score = 0;\n  let peeps = [];\n  if (pieces.length === 1) {\n    score = Number(pieces[0]);\n    peeps = [];\n  } else {\n    score = Number(pieces[0]);\n    peeps = pieces[1].split(\",\");\n  }\n  const peopleList = peeps.map(s => s.trim());\n  const rawTask = {\n    section: currentSection,\n    type: currentSection,\n    people: peopleList,\n    task: descr,\n    score\n  };\n  rawTasks.push(rawTask);\n};\nconst addTaskOrg = function (descr) {\n  const newTask = {\n    section: currentSection,\n    type: currentSection,\n    description: descr,\n    task: descr,\n    classes: []\n  };\n  tasks.push(newTask);\n};\nconst compileTasks = function () {\n  const compileTask = function (pos) {\n    return rawTasks[pos].processed;\n  };\n  let allProcessed = true;\n  for (const [i, rawTask] of rawTasks.entries()) {\n    compileTask(i);\n    allProcessed = allProcessed && rawTask.processed;\n  }\n  return allProcessed;\n};\nconst getActors = function () {\n  return updateActors();\n};\nconst db = {\n  getConfig: () => getConfig().journey,\n  clear,\n  setDiagramTitle,\n  getDiagramTitle,\n  setAccTitle,\n  getAccTitle,\n  setAccDescription,\n  getAccDescription,\n  addSection,\n  getSections,\n  getTasks,\n  addTask,\n  addTaskOrg,\n  getActors\n};\nconst getStyles = options => \".label {\\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\\n    font-family: var(--mermaid-font-family);\\n    color: \".concat(options.textColor, \";\\n  }\\n  .mouth {\\n    stroke: #666;\\n  }\\n\\n  line {\\n    stroke: \").concat(options.textColor, \"\\n  }\\n\\n  .legend {\\n    fill: \").concat(options.textColor, \";\\n  }\\n\\n  .label text {\\n    fill: #333;\\n  }\\n  .label {\\n    color: \").concat(options.textColor, \"\\n  }\\n\\n  .face {\\n    \").concat(options.faceColor ? \"fill: \".concat(options.faceColor) : \"fill: #FFF8DC\", \";\\n    stroke: #999;\\n  }\\n\\n  .node rect,\\n  .node circle,\\n  .node ellipse,\\n  .node polygon,\\n  .node path {\\n    fill: \").concat(options.mainBkg, \";\\n    stroke: \").concat(options.nodeBorder, \";\\n    stroke-width: 1px;\\n  }\\n\\n  .node .label {\\n    text-align: center;\\n  }\\n  .node.clickable {\\n    cursor: pointer;\\n  }\\n\\n  .arrowheadPath {\\n    fill: \").concat(options.arrowheadColor, \";\\n  }\\n\\n  .edgePath .path {\\n    stroke: \").concat(options.lineColor, \";\\n    stroke-width: 1.5px;\\n  }\\n\\n  .flowchart-link {\\n    stroke: \").concat(options.lineColor, \";\\n    fill: none;\\n  }\\n\\n  .edgeLabel {\\n    background-color: \").concat(options.edgeLabelBackground, \";\\n    rect {\\n      opacity: 0.5;\\n    }\\n    text-align: center;\\n  }\\n\\n  .cluster rect {\\n  }\\n\\n  .cluster text {\\n    fill: \").concat(options.titleColor, \";\\n  }\\n\\n  div.mermaidTooltip {\\n    position: absolute;\\n    text-align: center;\\n    max-width: 200px;\\n    padding: 2px;\\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\\n    font-family: var(--mermaid-font-family);\\n    font-size: 12px;\\n    background: \").concat(options.tertiaryColor, \";\\n    border: 1px solid \").concat(options.border2, \";\\n    border-radius: 2px;\\n    pointer-events: none;\\n    z-index: 100;\\n  }\\n\\n  .task-type-0, .section-type-0  {\\n    \").concat(options.fillType0 ? \"fill: \".concat(options.fillType0) : \"\", \";\\n  }\\n  .task-type-1, .section-type-1  {\\n    \").concat(options.fillType0 ? \"fill: \".concat(options.fillType1) : \"\", \";\\n  }\\n  .task-type-2, .section-type-2  {\\n    \").concat(options.fillType0 ? \"fill: \".concat(options.fillType2) : \"\", \";\\n  }\\n  .task-type-3, .section-type-3  {\\n    \").concat(options.fillType0 ? \"fill: \".concat(options.fillType3) : \"\", \";\\n  }\\n  .task-type-4, .section-type-4  {\\n    \").concat(options.fillType0 ? \"fill: \".concat(options.fillType4) : \"\", \";\\n  }\\n  .task-type-5, .section-type-5  {\\n    \").concat(options.fillType0 ? \"fill: \".concat(options.fillType5) : \"\", \";\\n  }\\n  .task-type-6, .section-type-6  {\\n    \").concat(options.fillType0 ? \"fill: \".concat(options.fillType6) : \"\", \";\\n  }\\n  .task-type-7, .section-type-7  {\\n    \").concat(options.fillType0 ? \"fill: \".concat(options.fillType7) : \"\", \";\\n  }\\n\\n  .actor-0 {\\n    \").concat(options.actor0 ? \"fill: \".concat(options.actor0) : \"\", \";\\n  }\\n  .actor-1 {\\n    \").concat(options.actor1 ? \"fill: \".concat(options.actor1) : \"\", \";\\n  }\\n  .actor-2 {\\n    \").concat(options.actor2 ? \"fill: \".concat(options.actor2) : \"\", \";\\n  }\\n  .actor-3 {\\n    \").concat(options.actor3 ? \"fill: \".concat(options.actor3) : \"\", \";\\n  }\\n  .actor-4 {\\n    \").concat(options.actor4 ? \"fill: \".concat(options.actor4) : \"\", \";\\n  }\\n  .actor-5 {\\n    \").concat(options.actor5 ? \"fill: \".concat(options.actor5) : \"\", \";\\n  }\\n\");\nconst styles = getStyles;\nconst drawRect = function (elem, rectData) {\n  return drawRect$1(elem, rectData);\n};\nconst drawFace = function (element, faceData) {\n  const radius = 15;\n  const circleElement = element.append(\"circle\").attr(\"cx\", faceData.cx).attr(\"cy\", faceData.cy).attr(\"class\", \"face\").attr(\"r\", radius).attr(\"stroke-width\", 2).attr(\"overflow\", \"visible\");\n  const face = element.append(\"g\");\n  face.append(\"circle\").attr(\"cx\", faceData.cx - radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n  face.append(\"circle\").attr(\"cx\", faceData.cx + radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n  function smile(face2) {\n    const arc$1 = arc().startAngle(Math.PI / 2).endAngle(3 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n    face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 2) + \")\");\n  }\n  function sad(face2) {\n    const arc$1 = arc().startAngle(3 * Math.PI / 2).endAngle(5 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n    face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 7) + \")\");\n  }\n  function ambivalent(face2) {\n    face2.append(\"line\").attr(\"class\", \"mouth\").attr(\"stroke\", 2).attr(\"x1\", faceData.cx - 5).attr(\"y1\", faceData.cy + 7).attr(\"x2\", faceData.cx + 5).attr(\"y2\", faceData.cy + 7).attr(\"class\", \"mouth\").attr(\"stroke-width\", \"1px\").attr(\"stroke\", \"#666\");\n  }\n  if (faceData.score > 3) {\n    smile(face);\n  } else if (faceData.score < 3) {\n    sad(face);\n  } else {\n    ambivalent(face);\n  }\n  return circleElement;\n};\nconst drawCircle = function (element, circleData) {\n  const circleElement = element.append(\"circle\");\n  circleElement.attr(\"cx\", circleData.cx);\n  circleElement.attr(\"cy\", circleData.cy);\n  circleElement.attr(\"class\", \"actor-\" + circleData.pos);\n  circleElement.attr(\"fill\", circleData.fill);\n  circleElement.attr(\"stroke\", circleData.stroke);\n  circleElement.attr(\"r\", circleData.r);\n  if (circleElement.class !== void 0) {\n    circleElement.attr(\"class\", circleElement.class);\n  }\n  if (circleData.title !== void 0) {\n    circleElement.append(\"title\").text(circleData.title);\n  }\n  return circleElement;\n};\nconst drawText = function (elem, textData) {\n  return drawText$1(elem, textData);\n};\nconst drawLabel = function (elem, txtObject) {\n  function genPoints(x, y, width, height, cut) {\n    return x + \",\" + y + \" \" + (x + width) + \",\" + y + \" \" + (x + width) + \",\" + (y + height - cut) + \" \" + (x + width - cut * 1.2) + \",\" + (y + height) + \" \" + x + \",\" + (y + height);\n  }\n  const polygon = elem.append(\"polygon\");\n  polygon.attr(\"points\", genPoints(txtObject.x, txtObject.y, 50, 20, 7));\n  polygon.attr(\"class\", \"labelBox\");\n  txtObject.y = txtObject.y + txtObject.labelMargin;\n  txtObject.x = txtObject.x + 0.5 * txtObject.labelMargin;\n  drawText(elem, txtObject);\n};\nconst drawSection = function (elem, section, conf2) {\n  const g = elem.append(\"g\");\n  const rect = getNoteRect();\n  rect.x = section.x;\n  rect.y = section.y;\n  rect.fill = section.fill;\n  rect.width = conf2.width * section.taskCount +\n  // width of the tasks\n  conf2.diagramMarginX * (section.taskCount - 1);\n  rect.height = conf2.height;\n  rect.class = \"journey-section section-type-\" + section.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n  _drawTextCandidateFunc(conf2)(section.text, g, rect.x, rect.y, rect.width, rect.height, {\n    class: \"journey-section section-type-\" + section.num\n  }, conf2, section.colour);\n};\nlet taskCount = -1;\nconst drawTask = function (elem, task, conf2) {\n  const center = task.x + conf2.width / 2;\n  const g = elem.append(\"g\");\n  taskCount++;\n  const maxHeight = 300 + 5 * 30;\n  g.append(\"line\").attr(\"id\", \"task\" + taskCount).attr(\"x1\", center).attr(\"y1\", task.y).attr(\"x2\", center).attr(\"y2\", maxHeight).attr(\"class\", \"task-line\").attr(\"stroke-width\", \"1px\").attr(\"stroke-dasharray\", \"4 2\").attr(\"stroke\", \"#666\");\n  drawFace(g, {\n    cx: center,\n    cy: 300 + (5 - task.score) * 30,\n    score: task.score\n  });\n  const rect = getNoteRect();\n  rect.x = task.x;\n  rect.y = task.y;\n  rect.fill = task.fill;\n  rect.width = conf2.width;\n  rect.height = conf2.height;\n  rect.class = \"task task-type-\" + task.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n  let xPos = task.x + 14;\n  task.people.forEach(person => {\n    const colour = task.actors[person].color;\n    const circle = {\n      cx: xPos,\n      cy: task.y,\n      r: 7,\n      fill: colour,\n      stroke: \"#000\",\n      title: person,\n      pos: task.actors[person].position\n    };\n    drawCircle(g, circle);\n    xPos += 10;\n  });\n  _drawTextCandidateFunc(conf2)(task.task, g, rect.x, rect.y, rect.width, rect.height, {\n    class: \"task\"\n  }, conf2, task.colour);\n};\nconst drawBackgroundRect = function (elem, bounds2) {\n  drawBackgroundRect$1(elem, bounds2);\n};\nconst _drawTextCandidateFunc = function () {\n  function byText(content, g, x, y, width, height, textAttrs, colour) {\n    const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y + height / 2 + 5).style(\"font-color\", colour).style(\"text-anchor\", \"middle\").text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n  function byTspan(content, g, x, y, width, height, textAttrs, conf2, colour) {\n    const {\n      taskFontSize,\n      taskFontFamily\n    } = conf2;\n    const lines = content.split(/<br\\s*\\/?>/gi);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * taskFontSize - taskFontSize * (lines.length - 1) / 2;\n      const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y).attr(\"fill\", colour).style(\"text-anchor\", \"middle\").style(\"font-size\", taskFontSize).style(\"font-family\", taskFontFamily);\n      text.append(\"tspan\").attr(\"x\", x + width / 2).attr(\"dy\", dy).text(lines[i]);\n      text.attr(\"y\", y + height / 2).attr(\"dominant-baseline\", \"central\").attr(\"alignment-baseline\", \"central\");\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n  function byFo(content, g, x, y, width, height, textAttrs, conf2) {\n    const body = g.append(\"switch\");\n    const f = body.append(\"foreignObject\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height).attr(\"position\", \"fixed\");\n    const text = f.append(\"xhtml:div\").style(\"display\", \"table\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n    text.append(\"div\").attr(\"class\", \"label\").style(\"display\", \"table-cell\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").text(content);\n    byTspan(content, body, x, y, width, height, textAttrs, conf2);\n    _setTextAttrs(text, textAttrs);\n  }\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (key in fromTextAttrsDict) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n  return function (conf2) {\n    return conf2.textPlacement === \"fo\" ? byFo : conf2.textPlacement === \"old\" ? byText : byTspan;\n  };\n}();\nconst initGraphics = function (graphics) {\n  graphics.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 5).attr(\"refY\", 2).attr(\"markerWidth\", 6).attr(\"markerHeight\", 4).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 0,0 V 4 L6,2 Z\");\n};\nconst svgDraw = {\n  drawRect,\n  drawCircle,\n  drawSection,\n  drawText,\n  drawLabel,\n  drawTask,\n  drawBackgroundRect,\n  initGraphics\n};\nconst setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n  keys.forEach(function (key) {\n    conf[key] = cnf[key];\n  });\n};\nconst actors = {};\nfunction drawActorLegend(diagram2) {\n  const conf2 = getConfig().journey;\n  let yPos = 60;\n  Object.keys(actors).forEach(person => {\n    const colour = actors[person].color;\n    const circleData = {\n      cx: 20,\n      cy: yPos,\n      r: 7,\n      fill: colour,\n      stroke: \"#000\",\n      pos: actors[person].position\n    };\n    svgDraw.drawCircle(diagram2, circleData);\n    const labelData = {\n      x: 40,\n      y: yPos + 7,\n      fill: \"#666\",\n      text: person,\n      textMargin: conf2.boxTextMargin | 5\n    };\n    svgDraw.drawText(diagram2, labelData);\n    yPos += 20;\n  });\n}\nconst conf = getConfig().journey;\nconst LEFT_MARGIN = conf.leftMargin;\nconst draw = function (text, id, version, diagObj) {\n  const conf2 = getConfig().journey;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  bounds.init();\n  const diagram2 = root.select(\"#\" + id);\n  svgDraw.initGraphics(diagram2);\n  const tasks2 = diagObj.db.getTasks();\n  const title = diagObj.db.getDiagramTitle();\n  const actorNames = diagObj.db.getActors();\n  for (const member in actors) {\n    delete actors[member];\n  }\n  let actorPos = 0;\n  actorNames.forEach(actorName => {\n    actors[actorName] = {\n      color: conf2.actorColours[actorPos % conf2.actorColours.length],\n      position: actorPos\n    };\n    actorPos++;\n  });\n  drawActorLegend(diagram2);\n  bounds.insert(0, 0, LEFT_MARGIN, Object.keys(actors).length * 50);\n  drawTasks(diagram2, tasks2, 0);\n  const box = bounds.getBounds();\n  if (title) {\n    diagram2.append(\"text\").text(title).attr(\"x\", LEFT_MARGIN).attr(\"font-size\", \"4ex\").attr(\"font-weight\", \"bold\").attr(\"y\", 25);\n  }\n  const height = box.stopy - box.starty + 2 * conf2.diagramMarginY;\n  const width = LEFT_MARGIN + box.stopx + 2 * conf2.diagramMarginX;\n  configureSvgSize(diagram2, height, width, conf2.useMaxWidth);\n  diagram2.append(\"line\").attr(\"x1\", LEFT_MARGIN).attr(\"y1\", conf2.height * 4).attr(\"x2\", width - LEFT_MARGIN - 4).attr(\"y2\", conf2.height * 4).attr(\"stroke-width\", 4).attr(\"stroke\", \"black\").attr(\"marker-end\", \"url(#arrowhead)\");\n  const extraVertForTitle = title ? 70 : 0;\n  diagram2.attr(\"viewBox\", \"\".concat(box.startx, \" -25 \").concat(width, \" \").concat(height + extraVertForTitle));\n  diagram2.attr(\"preserveAspectRatio\", \"xMinYMin meet\");\n  diagram2.attr(\"height\", height + extraVertForTitle + 25);\n};\nconst bounds = {\n  data: {\n    startx: void 0,\n    stopx: void 0,\n    starty: void 0,\n    stopy: void 0\n  },\n  verticalPos: 0,\n  sequenceItems: [],\n  init: function () {\n    this.sequenceItems = [];\n    this.data = {\n      startx: void 0,\n      stopx: void 0,\n      starty: void 0,\n      stopy: void 0\n    };\n    this.verticalPos = 0;\n  },\n  updateVal: function (obj, key, val, fun) {\n    if (obj[key] === void 0) {\n      obj[key] = val;\n    } else {\n      obj[key] = fun(val, obj[key]);\n    }\n  },\n  updateBounds: function (startx, starty, stopx, stopy) {\n    const conf2 = getConfig().journey;\n    const _self = this;\n    let cnt = 0;\n    function updateFn(type) {\n      return function updateItemBounds(item) {\n        cnt++;\n        const n = _self.sequenceItems.length - cnt + 1;\n        _self.updateVal(item, \"starty\", starty - n * conf2.boxMargin, Math.min);\n        _self.updateVal(item, \"stopy\", stopy + n * conf2.boxMargin, Math.max);\n        _self.updateVal(bounds.data, \"startx\", startx - n * conf2.boxMargin, Math.min);\n        _self.updateVal(bounds.data, \"stopx\", stopx + n * conf2.boxMargin, Math.max);\n        if (!(type === \"activation\")) {\n          _self.updateVal(item, \"startx\", startx - n * conf2.boxMargin, Math.min);\n          _self.updateVal(item, \"stopx\", stopx + n * conf2.boxMargin, Math.max);\n          _self.updateVal(bounds.data, \"starty\", starty - n * conf2.boxMargin, Math.min);\n          _self.updateVal(bounds.data, \"stopy\", stopy + n * conf2.boxMargin, Math.max);\n        }\n      };\n    }\n    this.sequenceItems.forEach(updateFn());\n  },\n  insert: function (startx, starty, stopx, stopy) {\n    const _startx = Math.min(startx, stopx);\n    const _stopx = Math.max(startx, stopx);\n    const _starty = Math.min(starty, stopy);\n    const _stopy = Math.max(starty, stopy);\n    this.updateVal(bounds.data, \"startx\", _startx, Math.min);\n    this.updateVal(bounds.data, \"starty\", _starty, Math.min);\n    this.updateVal(bounds.data, \"stopx\", _stopx, Math.max);\n    this.updateVal(bounds.data, \"stopy\", _stopy, Math.max);\n    this.updateBounds(_startx, _starty, _stopx, _stopy);\n  },\n  bumpVerticalPos: function (bump) {\n    this.verticalPos = this.verticalPos + bump;\n    this.data.stopy = this.verticalPos;\n  },\n  getVerticalPos: function () {\n    return this.verticalPos;\n  },\n  getBounds: function () {\n    return this.data;\n  }\n};\nconst fills = conf.sectionFills;\nconst textColours = conf.sectionColours;\nconst drawTasks = function (diagram2, tasks2, verticalPos) {\n  const conf2 = getConfig().journey;\n  let lastSection = \"\";\n  const sectionVHeight = conf2.height * 2 + conf2.diagramMarginY;\n  const taskPos = verticalPos + sectionVHeight;\n  let sectionNumber = 0;\n  let fill = \"#CCC\";\n  let colour = \"black\";\n  let num = 0;\n  for (const [i, task] of tasks2.entries()) {\n    if (lastSection !== task.section) {\n      fill = fills[sectionNumber % fills.length];\n      num = sectionNumber % fills.length;\n      colour = textColours[sectionNumber % textColours.length];\n      let taskInSectionCount = 0;\n      const currentSection2 = task.section;\n      for (let taskIndex = i; taskIndex < tasks2.length; taskIndex++) {\n        if (tasks2[taskIndex].section == currentSection2) {\n          taskInSectionCount = taskInSectionCount + 1;\n        } else {\n          break;\n        }\n      }\n      const section = {\n        x: i * conf2.taskMargin + i * conf2.width + LEFT_MARGIN,\n        y: 50,\n        text: task.section,\n        fill,\n        num,\n        colour,\n        taskCount: taskInSectionCount\n      };\n      svgDraw.drawSection(diagram2, section, conf2);\n      lastSection = task.section;\n      sectionNumber++;\n    }\n    const taskActors = task.people.reduce((acc, actorName) => {\n      if (actors[actorName]) {\n        acc[actorName] = actors[actorName];\n      }\n      return acc;\n    }, {});\n    task.x = i * conf2.taskMargin + i * conf2.width + LEFT_MARGIN;\n    task.y = taskPos;\n    task.width = conf2.diagramMarginX;\n    task.height = conf2.diagramMarginY;\n    task.colour = colour;\n    task.fill = fill;\n    task.num = num;\n    task.actors = taskActors;\n    svgDraw.drawTask(diagram2, task, conf2);\n    bounds.insert(task.x, task.y, task.x + task.width + conf2.taskMargin, 300 + 5 * 30);\n  }\n};\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer,\n  styles,\n  init: cnf => {\n    renderer.setConf(cnf.journey);\n    db.clear();\n  }\n};\nexport { diagram };"],"sourceRoot":""}