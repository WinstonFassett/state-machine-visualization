{"version":3,"sources":["../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/xychartDiagram-2b33534f.js"],"names":["__webpack_require__","r","__webpack_exports__","d","diagram","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_0__","_createText_62fc7601_js__WEBPACK_IMPORTED_MODULE_1__","d3__WEBPACK_IMPORTED_MODULE_2__","parser","o","k","v","o2","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","$Vd","$Ve","$Vf","$Vg","$Vh","$Vi","$Vj","$Vk","$Vl","$Vm","$Vn","$Vo","$Vp","$Vq","parser2","trace","yy","symbols_","error","start","eol","XYCHART","chartConfig","document","CHART_ORIENTATION","statement","title","text","X_AXIS","parseXAxis","Y_AXIS","parseYAxis","LINE","plotData","BAR","acc_title","acc_title_value","acc_descr","acc_descr_value","acc_descr_multiline_value","SQUARE_BRACES_START","commaSeparatedNumbers","SQUARE_BRACES_END","NUMBER_WITH_DECIMAL","COMMA","xAxisData","bandData","ARROW_DELIMITER","commaSeparatedTexts","yAxisData","NEWLINE","SEMI","EOF","alphaNum","STR","MD_STR","alphaNumToken","AMP","NUM","ALPHA","PLUS","EQUALS","MULT","DOT","BRKT","MINUS","UNDERSCORE","$accept","$end","terminals_","2","5","8","10","12","14","16","18","19","20","21","22","23","24","26","27","28","31","34","35","36","38","39","41","42","43","44","45","46","47","48","49","50","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","setOrientation","setDiagramTitle","trim","setLineData","type","setBarData","this","$","setAccTitle","setAccDescription","Number","setXAxisTitle","setXAxisBand","setXAxisRangeData","setYAxisTitle","setYAxisRangeData","table","3","4","7","1","6","9","11","37","40","13","29","30","15","33","17","32","25","defaultActions","72","73","parseError","str","hash","recoverable","Error","parse","input","self","stack","tstack","vstack","lstack","args","slice","call","arguments","lexer2","Object","create","lexer","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","lex","token","pop","Array","getPrototypeOf","symbol","state","action","p","len","newState","expected","yyval","errStr","showPosition","join","match","line","loc","first_line","last_line","first_column","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","substr","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","conditions","topState","Math","abs","pushState","stateStackSize","case-insensitive","yy_","$avoiding_name_collisions","YY_START","data_inner","inclusive","data","axis_band_data","axis_data","acc_descr_multiline","md_string","string","INITIAL","Parser","parser$1","isBarPlot","isBandAxisData","isLinearAxisData","TextDimensionCalculatorWithFont","[object Object]","parentGroup","texts","fontSize","width","reduce","acc","cur","max","height","dimension","elem","append","attr","t","bbox","remove","BAR_WIDTH_TO_TICK_WIDTH_RATIO","MAX_OUTER_PADDING_PERCENT_FOR_WRT_LABEL","BaseAxis","axisConfig","textDimensionCalculator","axisThemeConfig","boundingRect","x","y","axisPosition","showTitle","showLabel","showTick","showAxisLine","outerPadding","titleTextHeight","labelTextHeight","recalculateScale","setRange","getRange","getTickValues","getMaxDimension","map","tick","toString","labelFontSize","getTickDistance","floor","availableSpace","availableHeight","axisLineWidth","spaceRequired","getLabelDimension","maxPadding","min","heightRequired","labelPadding","tickLength","titleFontSize","titlePadding","availableWidth","widthRequired","calculateSpaceIfDrawnVertical","calculateSpaceIfDrawnHorizontally","point","drawableElement","groupTexts","path","strokeFill","axisLineColor","strokeWidth","getScaleValue","fill","labelColor","rotation","verticalPos","horizontalPos","tickColor","tickWidth","titleColor","getDrawableElementsForLeftAxis","getDrawableElementsForBottomAxis","getDrawableElementsForTopAxis","BandAxis","categories","super","scale","domain","paddingInner","paddingOuter","align","value","LinearAxis","ticks","reverse","getAxis","tmpSVGGroup2","textDimansionCalculator","ChartTitle","chartData","chartThemeConfig","showChartTitle","titleDimension","drawableElem","getChartTitleComponent","LinePlot","xAxis","yAxis","orientation","plotIndex2","plotIndex","finalData","BarPlot","barData","barWidth","getAxisOuterPadding","barWidthHalf","BasePlot","plot","plots","entries","linePlot","chartOrientation","getDrawableElement","barPlot","getPlotComponent","Orchestrator","componentStore","xAxisTitleColor","xAxisLabelColor","xAxisTickColor","xAxisLineColor","yAxisTitleColor","yAxisLabelColor","yAxisTickColor","yAxisLineColor","plotX","plotY","chartWidth","plotReservedSpacePercent","chartHeight","spaceUsed","calculateSpace","setAxisPosition","setBoundingBoxXY","some","recalculateOuterPaddingToDrawBar","titleYEnd","calculateHorizonatalSpace","calculateVerticalSpace","setAxes","component","values","getDrawableElements","XYChartBuilder","config","tmpSVGGroup","xyChartConfig","getChartDefaultConfig","xyChartThemeConfig","getChartDefaultThemeConfig","xyChartData","getChartDefaultData","plotColorPalette","color","hasSetXAxis","hasSetYAxis","defaultThemeVariables","xyChart","themeVariables","Infinity","textSanitizer","transformDataWithoutCategory","retData","prevMinValue","prevMaxValue","minValue","maxValue","setYAxisRangeFromPlotData","step","getPlotColorFromPalette","db","getDrawableElem","build","clear","getAccTitle","getDiagramTitle","getAccDescription","setTmpSVGG","SVGG","getChartThemeConfig","getChartConfig","renderer","draw","txt","id","_version","diagObj","db2","themeConfig","getDominantBaseLine","getTextAnchor","getTextTransformation","debug","svg","group","background","backgroundColor","shapes","groups","getGroup","gList","prefix","parent","shape","shapeGroup","selectAll","enter"],"mappings":"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OAGA,OAEA,OADApI,KAAA2H,WACA,GACA,OACA,UACA,OACA,MACA,OACA,UACA,OAEA,OADA3H,KAAAgI,UAAA,aACA,GACA,OAEA,OADAhI,KAAA2H,WACA,kBACA,OAEA,OADA3H,KAAAgI,UAAA,aACA,GACA,QAEA,OADAhI,KAAA2H,WACA,kBACA,QACA3H,KAAAgI,UAAA,uBACA,MACA,QACAhI,KAAA2H,WACA,MACA,QACA,kCACA,QACA,SACA,QACA,SACA,QAEA,OADA3H,KAAAgI,UAAA,aACA,SACA,QAEA,OADAhI,KAAAgI,UAAA,aACA,SACA,QAEA,OADAhI,KAAAgI,UAAA,kBACA,GACA,QACA,UACA,QAEA,OADAhI,KAAAgI,UAAA,QACA,GACA,QAEA,OADAhI,KAAAgI,UAAA,QACA,GACA,QAEA,OADAhI,KAAAgI,UAAA,cACA,GACA,QACA,UACA,QAEA,OADAhI,KAAA2H,WACA,GACA,QACA3H,KAAA2H,WACA,MACA,QACA3H,KAAAgI,UAAA,UACA,MACA,QACAhI,KAAA2H,WACA,MACA,QACA,YACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,cACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,MACA,QACA,UACA,QACA,YAGAN,MAAA,wBAA0B,sBAAqB,0MAA0N,WAAe,eAAc,yXAAmX,6NAAoQ,WAC75BO,WAAA,CACAU,WAAA,CACAjB,MAAA,oGACAkB,WAAA,GAEAC,KAAA,CACAnB,MAAA,mGACAkB,WAAA,GAEAE,eAAA,CACApB,MAAA,iGACAkB,WAAA,GAEAG,UAAA,CACArB,MAAA,yGACAkB,WAAA,GAEAI,oBAAA,CACAtB,MAAA,QACAkB,WAAA,GAEAxN,UAAA,CACAsM,MAAA,KACAkB,WAAA,GAEA1N,UAAA,CACAwM,MAAA,IACAkB,WAAA,GAEAnO,MAAA,CACAiN,MAAA,GACAkB,WAAA,GAEAK,UAAA,CACAvB,MAAA,GACAkB,WAAA,GAEAM,OAAA,CACAxB,MAAA,QACAkB,WAAA,GAEAO,QAAA,CACAzB,MAAA,8FACAkB,WAAA,KAOA,SAAAQ,IACA/I,KAAAtG,GAAA,GAIA,OANAF,EAAA0J,QAIA6F,EAAA3F,UAAA5J,EACAA,EAAAuP,SACA,IAAAA,EA/jCA,IAikCAzR,WACA,MAAA0R,EAAA1R,EACA,SAAA2R,EAAAT,GACA,cAAAA,EAAA1I,KAEA,SAAAoJ,EAAAV,GACA,eAAAA,EAAA1I,KAEA,SAAAqJ,EAAAX,GACA,iBAAAA,EAAA1I,KAEA,MAAAsJ,EACAC,YAAAC,GACAtJ,KAAAsJ,cAEAD,gBAAAE,EAAAC,GACA,IAAAxJ,KAAAsJ,YACA,OACAG,MAAAF,EAAAG,OAAA,CAAAC,EAAAC,IAAA9B,KAAA+B,IAAAD,EAAAhS,OAAA+R,GAAA,GAAAH,EACAM,OAAAN,GAGA,MAAAO,EAAA,CACAN,MAAA,EACAK,OAAA,GAEAE,EAAAhK,KAAAsJ,YAAAW,OAAA,KAAAC,KAAA,uBAAAA,KAAA,YAAAV,GACA,UAAAW,KAAAZ,EAAA,CACA,MAAAa,EAAmBpH,OAAA5L,EAAA,EAAA4L,CAAsBgH,EAAA,EAAAG,GACzCV,EAAAW,IAAAX,MAAAU,EAAAvS,OAAA4R,EACAM,EAAAM,IAAAN,OAAAN,EACAO,EAAAN,MAAA3B,KAAA+B,IAAAE,EAAAN,SACAM,EAAAD,OAAAhC,KAAA+B,IAAAE,EAAAD,UAGA,OADAE,EAAAK,SACAN,GAGA,MAAAO,EAAA,GACAC,EAAA,GACA,MAAAC,EACAnB,YAAAoB,EAAArQ,EAAAsQ,EAAAC,GACA3K,KAAAyK,aACAzK,KAAA5F,QACA4F,KAAA0K,0BACA1K,KAAA2K,kBACA3K,KAAA4K,aAAA,CACAC,EAAA,EACAC,EAAA,EACArB,MAAA,EACAK,OAAA,GAEA9J,KAAA+K,aAAA,OACA/K,KAAAgL,WAAA,EACAhL,KAAAiL,WAAA,EACAjL,KAAAkL,UAAA,EACAlL,KAAAmL,cAAA,EACAnL,KAAAoL,aAAA,EACApL,KAAAqL,gBAAA,EACArL,KAAAsL,gBAAA,EACAtL,KAAAmF,MAAA,OACAnF,KAAA4K,aAAA,CACAC,EAAA,EACAC,EAAA,EACArB,MAAA,EACAK,OAAA,GAEA9J,KAAA+K,aAAA,OAEA1B,SAAAlE,GACAnF,KAAAmF,QACA,SAAAnF,KAAA+K,cAAA,UAAA/K,KAAA+K,aACA/K,KAAA4K,aAAAd,OAAA3E,EAAA,GAAAA,EAAA,GAEAnF,KAAA4K,aAAAnB,MAAAtE,EAAA,GAAAA,EAAA,GAEAnF,KAAAuL,mBAEAlC,WACA,OAAArJ,KAAAmF,MAAA,GAAAnF,KAAAoL,aAAApL,KAAAmF,MAAA,GAAAnF,KAAAoL,cAEA/B,gBAAA0B,GACA/K,KAAA+K,eACA/K,KAAAwL,SAAAxL,KAAAmF,OAEAkE,kBACA,MAAAlE,EAAAnF,KAAAyL,WACA,OAAA3D,KAAAC,IAAA5C,EAAA,GAAAA,EAAA,IAAAnF,KAAA0L,gBAAA9T,OAEAyR,sBACA,OAAArJ,KAAAoL,aAEA/B,oBACA,OAAArJ,KAAA0K,wBAAAiB,gBAAA3L,KAAA0L,gBAAAE,IAAAC,KAAAC,YAAA9L,KAAAyK,WAAAsB,eAEA1C,mCACAiB,EAAAtK,KAAAgM,kBAAA,EAAAhM,KAAAoL,eACApL,KAAAoL,aAAAtD,KAAAmE,MAAA3B,EAAAtK,KAAAgM,kBAAA,IAEAhM,KAAAuL,mBAEAlC,kCAAA6C,GACA,IAAAC,EAAAD,EAAApC,OAKA,GAJA9J,KAAAyK,WAAAU,cAAAgB,EAAAnM,KAAAyK,WAAA2B,gBACAD,GAAAnM,KAAAyK,WAAA2B,cACApM,KAAAmL,cAAA,GAEAnL,KAAAyK,WAAAQ,UAAA,CACA,MAAAoB,EAAArM,KAAAsM,oBACAC,EAAAhC,EAAA2B,EAAAzC,MACAzJ,KAAAoL,aAAAtD,KAAA0E,IAAAH,EAAA5C,MAAA,EAAA8C,GACA,MAAAE,EAAAJ,EAAAvC,OAAA,EAAA9J,KAAAyK,WAAAiC,aACA1M,KAAAsL,gBAAAe,EAAAvC,OACA2C,GAAAN,IACAA,GAAAM,EACAzM,KAAAiL,WAAA,GAOA,GAJAjL,KAAAyK,WAAAS,UAAAiB,GAAAnM,KAAAyK,WAAAkC,aACA3M,KAAAkL,UAAA,EACAiB,GAAAnM,KAAAyK,WAAAkC,YAEA3M,KAAAyK,WAAAO,WAAAhL,KAAA5F,MAAA,CACA,MAAAiS,EAAArM,KAAA0K,wBAAAiB,gBAAA,CAAA3L,KAAA5F,OAAA4F,KAAAyK,WAAAmC,eACAH,EAAAJ,EAAAvC,OAAA,EAAA9J,KAAAyK,WAAAoC,aACA7M,KAAAqL,gBAAAgB,EAAAvC,OACA2C,GAAAN,IACAA,GAAAM,EACAzM,KAAAgL,WAAA,GAGAhL,KAAA4K,aAAAnB,MAAAyC,EAAAzC,MACAzJ,KAAA4K,aAAAd,OAAAoC,EAAApC,OAAAqC,EAEA9C,8BAAA6C,GACA,IAAAY,EAAAZ,EAAAzC,MAKA,GAJAzJ,KAAAyK,WAAAU,cAAA2B,EAAA9M,KAAAyK,WAAA2B,gBACAU,GAAA9M,KAAAyK,WAAA2B,cACApM,KAAAmL,cAAA,GAEAnL,KAAAyK,WAAAQ,UAAA,CACA,MAAAoB,EAAArM,KAAAsM,oBACAC,EAAAhC,EAAA2B,EAAApC,OACA9J,KAAAoL,aAAAtD,KAAA0E,IAAAH,EAAAvC,OAAA,EAAAyC,GACA,MAAAQ,EAAAV,EAAA5C,MAAA,EAAAzJ,KAAAyK,WAAAiC,aACAK,GAAAD,IACAA,GAAAC,EACA/M,KAAAiL,WAAA,GAOA,GAJAjL,KAAAyK,WAAAS,UAAA4B,GAAA9M,KAAAyK,WAAAkC,aACA3M,KAAAkL,UAAA,EACA4B,GAAA9M,KAAAyK,WAAAkC,YAEA3M,KAAAyK,WAAAO,WAAAhL,KAAA5F,MAAA,CACA,MAAAiS,EAAArM,KAAA0K,wBAAAiB,gBAAA,CAAA3L,KAAA5F,OAAA4F,KAAAyK,WAAAmC,eACAG,EAAAV,EAAAvC,OAAA,EAAA9J,KAAAyK,WAAAoC,aACA7M,KAAAqL,gBAAAgB,EAAAvC,OACAiD,GAAAD,IACAA,GAAAC,EACA/M,KAAAgL,WAAA,GAGAhL,KAAA4K,aAAAnB,MAAAyC,EAAAzC,MAAAqD,EACA9M,KAAA4K,aAAAd,OAAAoC,EAAApC,OAEAT,eAAA6C,GAOA,MANA,SAAAlM,KAAA+K,cAAA,UAAA/K,KAAA+K,aACA/K,KAAAgN,8BAAAd,GAEAlM,KAAAiN,kCAAAf,GAEAlM,KAAAuL,mBACA,CACA9B,MAAAzJ,KAAA4K,aAAAnB,MACAK,OAAA9J,KAAA4K,aAAAd,QAGAT,iBAAA6D,GACAlN,KAAA4K,aAAAC,EAAAqC,EAAArC,EACA7K,KAAA4K,aAAAE,EAAAoC,EAAApC,EAEAzB,iCACA,MAAA8D,EAAA,GACA,GAAAnN,KAAAmL,aAAA,CACA,MAAAN,EAAA7K,KAAA4K,aAAAC,EAAA7K,KAAA4K,aAAAnB,MAAAzJ,KAAAyK,WAAA2B,cAAA,EACAe,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,2BACA5E,KAAA,EACA6E,KAAA,KAAAhI,OAAAwF,EAAA,KAAAxF,OAAArF,KAAA4K,aAAAE,EAAA,OAAAzF,OAAAwF,EAAA,KAAAxF,OAAArF,KAAA4K,aAAAE,EAAA9K,KAAA4K,aAAAd,OAAA,KACAwD,WAAAtN,KAAA2K,gBAAA4C,cACAC,YAAAxN,KAAAyK,WAAA2B,kBAoBA,GAhBApM,KAAAiL,WACAkC,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,sBACA5E,KAAAxI,KAAA0L,gBAAAE,IAAAC,IAAA,CACAxR,KAAAwR,EAAAC,WACAjB,EAAA7K,KAAA4K,aAAAC,EAAA7K,KAAA4K,aAAAnB,OAAAzJ,KAAAiL,UAAAjL,KAAAyK,WAAAiC,aAAA,IAAA1M,KAAAkL,SAAAlL,KAAAyK,WAAAkC,WAAA,IAAA3M,KAAAmL,aAAAnL,KAAAyK,WAAA2B,cAAA,GACAtB,EAAA9K,KAAAyN,cAAA5B,GACA6B,KAAA1N,KAAA2K,gBAAAgD,WACAnE,SAAAxJ,KAAAyK,WAAAsB,cACA6B,SAAA,EACAC,YAAA,SACAC,cAAA,aAIA9N,KAAAkL,SAAA,CACA,MAAAL,EAAA7K,KAAA4K,aAAAC,EAAA7K,KAAA4K,aAAAnB,OAAAzJ,KAAAmL,aAAAnL,KAAAyK,WAAA2B,cAAA,GACAe,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,sBACA5E,KAAAxI,KAAA0L,gBAAAE,IAAAC,IAAA,CACAwB,KAAA,KAAAhI,OAAAwF,EAAA,KAAAxF,OAAArF,KAAAyN,cAAA5B,GAAA,OAAAxG,OAAAwF,EAAA7K,KAAAyK,WAAAkC,WAAA,KAAAtH,OAAArF,KAAAyN,cAAA5B,IACAyB,WAAAtN,KAAA2K,gBAAAoD,UACAP,YAAAxN,KAAAyK,WAAAuD,eAoBA,OAhBAhO,KAAAgL,WACAmC,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,sBACA5E,KAAA,EACAnO,KAAA2F,KAAA5F,MACAyQ,EAAA7K,KAAA4K,aAAAC,EAAA7K,KAAAyK,WAAAoC,aACA/B,EAAA9K,KAAA4K,aAAAE,EAAA9K,KAAA4K,aAAAd,OAAA,EACA4D,KAAA1N,KAAA2K,gBAAAsD,WACAzE,SAAAxJ,KAAAyK,WAAAmC,cACAgB,SAAA,IACAC,YAAA,MACAC,cAAA,aAIAX,EAEA9D,mCACA,MAAA8D,EAAA,GACA,GAAAnN,KAAAmL,aAAA,CACA,MAAAL,EAAA9K,KAAA4K,aAAAE,EAAA9K,KAAAyK,WAAA2B,cAAA,EACAe,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,4BACA5E,KAAA,EACA6E,KAAA,KAAAhI,OAAArF,KAAA4K,aAAAC,EAAA,KAAAxF,OAAAyF,EAAA,OAAAzF,OAAArF,KAAA4K,aAAAC,EAAA7K,KAAA4K,aAAAnB,MAAA,KAAApE,OAAAyF,GACAwC,WAAAtN,KAAA2K,gBAAA4C,cACAC,YAAAxN,KAAAyK,WAAA2B,kBAoBA,GAhBApM,KAAAiL,WACAkC,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,wBACA5E,KAAAxI,KAAA0L,gBAAAE,IAAAC,IAAA,CACAxR,KAAAwR,EAAAC,WACAjB,EAAA7K,KAAAyN,cAAA5B,GACAf,EAAA9K,KAAA4K,aAAAE,EAAA9K,KAAAyK,WAAAiC,cAAA1M,KAAAkL,SAAAlL,KAAAyK,WAAAkC,WAAA,IAAA3M,KAAAmL,aAAAnL,KAAAyK,WAAA2B,cAAA,GACAsB,KAAA1N,KAAA2K,gBAAAgD,WACAnE,SAAAxJ,KAAAyK,WAAAsB,cACA6B,SAAA,EACAC,YAAA,MACAC,cAAA,cAIA9N,KAAAkL,SAAA,CACA,MAAAJ,EAAA9K,KAAA4K,aAAAE,GAAA9K,KAAAmL,aAAAnL,KAAAyK,WAAA2B,cAAA,GACAe,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,wBACA5E,KAAAxI,KAAA0L,gBAAAE,IAAAC,IAAA,CACAwB,KAAA,KAAAhI,OAAArF,KAAAyN,cAAA5B,GAAA,KAAAxG,OAAAyF,EAAA,OAAAzF,OAAArF,KAAAyN,cAAA5B,GAAA,KAAAxG,OAAAyF,EAAA9K,KAAAyK,WAAAkC,YACAW,WAAAtN,KAAA2K,gBAAAoD,UACAP,YAAAxN,KAAAyK,WAAAuD,eAoBA,OAhBAhO,KAAAgL,WACAmC,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,wBACA5E,KAAA,EACAnO,KAAA2F,KAAA5F,MACAyQ,EAAA7K,KAAAmF,MAAA,IAAAnF,KAAAmF,MAAA,GAAAnF,KAAAmF,MAAA,MACA2F,EAAA9K,KAAA4K,aAAAE,EAAA9K,KAAA4K,aAAAd,OAAA9J,KAAAyK,WAAAoC,aAAA7M,KAAAqL,gBACAqC,KAAA1N,KAAA2K,gBAAAsD,WACAzE,SAAAxJ,KAAAyK,WAAAmC,cACAgB,SAAA,EACAC,YAAA,MACAC,cAAA,aAIAX,EAEA9D,gCACA,MAAA8D,EAAA,GACA,GAAAnN,KAAAmL,aAAA,CACA,MAAAL,EAAA9K,KAAA4K,aAAAE,EAAA9K,KAAA4K,aAAAd,OAAA9J,KAAAyK,WAAA2B,cAAA,EACAe,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,yBACA5E,KAAA,EACA6E,KAAA,KAAAhI,OAAArF,KAAA4K,aAAAC,EAAA,KAAAxF,OAAAyF,EAAA,OAAAzF,OAAArF,KAAA4K,aAAAC,EAAA7K,KAAA4K,aAAAnB,MAAA,KAAApE,OAAAyF,GACAwC,WAAAtN,KAAA2K,gBAAA4C,cACAC,YAAAxN,KAAAyK,WAAA2B,kBAoBA,GAhBApM,KAAAiL,WACAkC,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,qBACA5E,KAAAxI,KAAA0L,gBAAAE,IAAAC,IAAA,CACAxR,KAAAwR,EAAAC,WACAjB,EAAA7K,KAAAyN,cAAA5B,GACAf,EAAA9K,KAAA4K,aAAAE,GAAA9K,KAAAgL,UAAAhL,KAAAqL,gBAAA,EAAArL,KAAAyK,WAAAoC,aAAA,GAAA7M,KAAAyK,WAAAiC,aACAgB,KAAA1N,KAAA2K,gBAAAgD,WACAnE,SAAAxJ,KAAAyK,WAAAsB,cACA6B,SAAA,EACAC,YAAA,MACAC,cAAA,cAIA9N,KAAAkL,SAAA,CACA,MAAAJ,EAAA9K,KAAA4K,aAAAE,EACAqC,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,qBACA5E,KAAAxI,KAAA0L,gBAAAE,IAAAC,IAAA,CACAwB,KAAA,KAAAhI,OAAArF,KAAAyN,cAAA5B,GAAA,KAAAxG,OAAAyF,EAAA9K,KAAA4K,aAAAd,QAAA9J,KAAAmL,aAAAnL,KAAAyK,WAAA2B,cAAA,UAAA/G,OAAArF,KAAAyN,cAAA5B,GAAA,KAAAxG,OAAAyF,EAAA9K,KAAA4K,aAAAd,OAAA9J,KAAAyK,WAAAkC,YAAA3M,KAAAmL,aAAAnL,KAAAyK,WAAA2B,cAAA,IACAkB,WAAAtN,KAAA2K,gBAAAoD,UACAP,YAAAxN,KAAAyK,WAAAuD,eAoBA,OAhBAhO,KAAAgL,WACAmC,EAAA1J,KAAA,CACA3D,KAAA,OACAsN,WAAA,qBACA5E,KAAA,EACAnO,KAAA2F,KAAA5F,MACAyQ,EAAA7K,KAAA4K,aAAAC,EAAA7K,KAAA4K,aAAAnB,MAAA,EACAqB,EAAA9K,KAAA4K,aAAAE,EAAA9K,KAAAyK,WAAAoC,aACAa,KAAA1N,KAAA2K,gBAAAsD,WACAzE,SAAAxJ,KAAAyK,WAAAmC,cACAgB,SAAA,EACAC,YAAA,MACAC,cAAA,aAIAX,EAEA9D,sBACA,YAAArJ,KAAA+K,aACA,OAAA/K,KAAAkO,iCAEA,aAAAlO,KAAA+K,aACA,MAAA5I,MAAA,4CAEA,iBAAAnC,KAAA+K,aACA/K,KAAAmO,mCAEA,QAAAnO,KAAA+K,aACA/K,KAAAoO,gCAEA,IAGA,MAAAC,UAAA7D,EACAnB,YAAAoB,EAAAE,EAAA2D,EAAAlU,EAAAsQ,GACA6D,MAAA9D,EAAArQ,EAAAsQ,EAAAC,GACA3K,KAAAsO,aACAtO,KAAAwO,MAAiBxL,OAAA3L,EAAA,EAAA2L,GAASyL,OAAAzO,KAAAsO,YAAAnJ,MAAAnF,KAAAyL,YAE1BpC,SAAAlE,GACAoJ,MAAA/C,SAAArG,GAEAkE,mBACArJ,KAAAwO,MAAiBxL,OAAA3L,EAAA,EAAA2L,GAASyL,OAAAzO,KAAAsO,YAAAnJ,MAAAnF,KAAAyL,YAAAiD,aAAA,GAAAC,aAAA,GAAAC,MAAA,IACtBzX,EAAA,EAAGsC,MAAA,0CAAAuG,KAAAsO,WAAAtO,KAAAyL,YAEPpC,gBACA,OAAArJ,KAAAsO,WAEAjF,cAAAwF,GACA,OAAA7O,KAAAwO,MAAAK,IAAA7O,KAAAyL,WAAA,IAGA,MAAAqD,UAAAtE,EACAnB,YAAAoB,EAAAE,EAAA8D,EAAArU,EAAAsQ,GACA6D,MAAA9D,EAAArQ,EAAAsQ,EAAAC,GACA3K,KAAAyO,SACAzO,KAAAwO,MAAiBxL,OAAA3L,EAAA,EAAA2L,GAAWyL,OAAAzO,KAAAyO,QAAAtJ,MAAAnF,KAAAyL,YAE5BpC,gBACA,OAAArJ,KAAAwO,MAAAO,QAEA1F,mBACA,MAAAoF,EAAA,IAAAzO,KAAAyO,QACA,SAAAzO,KAAA+K,cACA0D,EAAAO,UAEAhP,KAAAwO,MAAiBxL,OAAA3L,EAAA,EAAA2L,GAAWyL,UAAAtJ,MAAAnF,KAAAyL,YAE5BpC,cAAAwF,GACA,OAAA7O,KAAAwO,MAAAK,IAGA,SAAAI,EAAAzG,EAAAiC,EAAAE,EAAAuE,GACA,MAAAC,EAAA,IAAA/F,EAAA8F,GACA,OAAAhG,EAAAV,GACA,IAAA6F,EAAA5D,EAAAE,EAAAnC,EAAA8F,WAAA9F,EAAApO,MAAA+U,GAEA,IAAAL,EAAArE,EAAAE,EAAA,CAAAnC,EAAAgE,IAAAhE,EAAAqB,KAAArB,EAAApO,MAAA+U,GAEA,MAAAC,EACA/F,YAAAqB,EAAA1Q,EAAAqV,EAAAC,GACAtP,KAAA0K,0BACA1K,KAAAhG,cACAgG,KAAAqP,YACArP,KAAAsP,mBACAtP,KAAA4K,aAAA,CACAC,EAAA,EACAC,EAAA,EACArB,MAAA,EACAK,OAAA,GAEA9J,KAAAuP,gBAAA,EAEAlG,iBAAA6D,GACAlN,KAAA4K,aAAAC,EAAAqC,EAAArC,EACA7K,KAAA4K,aAAAE,EAAAoC,EAAApC,EAEAzB,eAAA6C,GACA,MAAAsD,EAAAxP,KAAA0K,wBAAAiB,gBAAA,CAAA3L,KAAAqP,UAAAjV,OAAA4F,KAAAhG,YAAA4S,eACAG,EAAAjF,KAAA+B,IAAA2F,EAAA/F,MAAAyC,EAAAzC,OACAgD,EAAA+C,EAAA1F,OAAA,EAAA9J,KAAAhG,YAAA6S,aAMA,OALA2C,EAAA/F,OAAAsD,GAAAyC,EAAA1F,QAAA2C,GAAAzM,KAAAhG,YAAAgR,WAAAhL,KAAAqP,UAAAjV,QACA4F,KAAA4K,aAAAnB,MAAAsD,EACA/M,KAAA4K,aAAAd,OAAA2C,EACAzM,KAAAuP,gBAAA,GAEA,CACA9F,MAAAzJ,KAAA4K,aAAAnB,MACAK,OAAA9J,KAAA4K,aAAAd,QAGAT,sBACA,MAAAoG,EAAA,GAiBA,OAhBAzP,KAAAuP,gBACAE,EAAAhM,KAAA,CACA2J,WAAA,gBACAtN,KAAA,OACA0I,KAAA,EACAgB,SAAAxJ,KAAAhG,YAAA4S,cACAvS,KAAA2F,KAAAqP,UAAAjV,MACAyT,YAAA,SACAC,cAAA,SACAjD,EAAA7K,KAAA4K,aAAAC,EAAA7K,KAAA4K,aAAAnB,MAAA,EACAqB,EAAA9K,KAAA4K,aAAAE,EAAA9K,KAAA4K,aAAAd,OAAA,EACA4D,KAAA1N,KAAAsP,iBAAArB,WACAL,SAAA,MAIA6B,GAGA,SAAAC,EAAA1V,EAAAqV,EAAAC,EAAAJ,GACA,MAAAxE,EAAA,IAAAtB,EAAA8F,GACA,WAAAE,EAAA1E,EAAA1Q,EAAAqV,EAAAC,GAEA,MAAAK,EACAtG,YAAA1O,EAAAiV,EAAAC,EAAAC,EAAAC,GACA/P,KAAArF,WACAqF,KAAA4P,QACA5P,KAAA6P,QACA7P,KAAA8P,cACA9P,KAAAgQ,UAAAD,EAEA1G,qBACA,MAAA4G,EAAAjQ,KAAArF,SAAA6N,KAAAoD,IAAA3U,GAAA,CAAA+I,KAAA4P,MAAAnC,cAAAxW,EAAA,IAAA+I,KAAA6P,MAAApC,cAAAxW,EAAA,MACA,IAAAoW,EAMA,OAJAA,EADA,eAAArN,KAAA8P,YACa9M,OAAA3L,EAAA,EAAA2L,GAAI8H,EAAA7T,KAAA,IAAA4T,EAAA5T,KAAA,GAAJ+L,CAAIiN,GAEJjN,OAAA3L,EAAA,EAAA2L,GAAI6H,EAAA5T,KAAA,IAAA6T,EAAA7T,KAAA,GAAJ+L,CAAIiN,IAKjB,EACA7C,WAAA,qBAAA/H,OAAArF,KAAAgQ,YACAlQ,KAAA,OACA0I,KAAA,EACA6E,OACAC,WAAAtN,KAAArF,SAAA2S,WACAE,YAAAxN,KAAArF,SAAA6S,gBARA,IAaA,MAAA0C,EACA7G,YAAA8G,EAAAvF,EAAAgF,EAAAC,EAAAC,EAAAC,GACA/P,KAAAmQ,UACAnQ,KAAA4K,eACA5K,KAAA4P,QACA5P,KAAA6P,QACA7P,KAAA8P,cACA9P,KAAAgQ,UAAAD,EAEA1G,qBACA,MAAA4G,EAAAjQ,KAAAmQ,QAAA3H,KAAAoD,IAAA3U,GAAA,CAAA+I,KAAA4P,MAAAnC,cAAAxW,EAAA,IAAA+I,KAAA6P,MAAApC,cAAAxW,EAAA,MAEAmZ,EAAA,IAAAtI,KAAA0E,IAAA,EAAAxM,KAAA4P,MAAAS,sBAAArQ,KAAA4P,MAAA5D,mBACAsE,EAAAF,EAAA,EACA,qBAAApQ,KAAA8P,YACA,EACA1C,WAAA,oBAAA/H,OAAArF,KAAAgQ,YACAlQ,KAAA,OACA0I,KAAAyH,EAAArE,IAAApD,IAAA,CACAqC,EAAA7K,KAAA4K,aAAAC,EACAC,EAAAtC,EAAA,GAAA8H,EACAxG,OAAAsG,EACA3G,MAAAjB,EAAA,GAAAxI,KAAA4K,aAAAC,EACA6C,KAAA1N,KAAAmQ,QAAAzC,KACAF,YAAA,EACAF,WAAAtN,KAAAmQ,QAAAzC,UAIA,EACAN,WAAA,oBAAA/H,OAAArF,KAAAgQ,YACAlQ,KAAA,OACA0I,KAAAyH,EAAArE,IAAApD,IAAA,CACAqC,EAAArC,EAAA,GAAA8H,EACAxF,EAAAtC,EAAA,GACAiB,MAAA2G,EACAtG,OAAA9J,KAAA4K,aAAAE,EAAA9K,KAAA4K,aAAAd,OAAAtB,EAAA,GACAkF,KAAA1N,KAAAmQ,QAAAzC,KACAF,YAAA,EACAF,WAAAtN,KAAAmQ,QAAAzC,WAKA,MAAA6C,EACAlH,YAAArP,EAAAqV,EAAAC,GACAtP,KAAAhG,cACAgG,KAAAqP,YACArP,KAAAsP,mBACAtP,KAAA4K,aAAA,CACAC,EAAA,EACAC,EAAA,EACArB,MAAA,EACAK,OAAA,GAGAT,QAAAuG,EAAAC,GACA7P,KAAA4P,QACA5P,KAAA6P,QAEAxG,iBAAA6D,GACAlN,KAAA4K,aAAAC,EAAAqC,EAAArC,EACA7K,KAAA4K,aAAAE,EAAAoC,EAAApC,EAEAzB,eAAA6C,GAGA,OAFAlM,KAAA4K,aAAAnB,MAAAyC,EAAAzC,MACAzJ,KAAA4K,aAAAd,OAAAoC,EAAApC,OACA,CACAL,MAAAzJ,KAAA4K,aAAAnB,MACAK,OAAA9J,KAAA4K,aAAAd,QAGAT,sBACA,IAAArJ,KAAA4P,QAAA5P,KAAA6P,MACA,MAAA1N,MAAA,uCAEA,MAAAsN,EAAA,GACA,UAAAlI,EAAAiJ,KAAAxQ,KAAAqP,UAAAoB,MAAAC,UACA,OAAAF,EAAA1Q,MACA,WACA,CACA,MAAA6Q,EAAA,IAAAhB,EAAAa,EAAAxQ,KAAA4P,MAAA5P,KAAA6P,MAAA7P,KAAAhG,YAAA4W,iBAAArJ,GACAkI,EAAAhM,QAAAkN,EAAAE,sBAEA,MACA,UACA,CACA,MAAAC,EAAA,IAAAZ,EAAAM,EAAAxQ,KAAA4K,aAAA5K,KAAA4P,MAAA5P,KAAA6P,MAAA7P,KAAAhG,YAAA4W,iBAAArJ,GACAkI,EAAAhM,QAAAqN,EAAAD,uBAKA,OAAApB,GAGA,SAAAsB,EAAA/W,EAAAqV,EAAAC,GACA,WAAAiB,EAAAvW,EAAAqV,EAAAC,GAEA,MAAA0B,EACA3H,YAAArP,EAAAqV,EAAAC,EAAAJ,GACAlP,KAAAhG,cACAgG,KAAAqP,YACArP,KAAAiR,eAAA,CACA7W,MAAAsV,EAAA1V,EAAAqV,EAAAC,EAAAJ,GACAsB,KAAAO,EAAA/W,EAAAqV,EAAAC,GACAM,MAAAX,EAAAI,EAAAO,MAAA5V,EAAA4V,MAAA,CACA3B,WAAAqB,EAAA4B,gBACAvD,WAAA2B,EAAA6B,gBACApD,UAAAuB,EAAA8B,eACA7D,cAAA+B,EAAA+B,gBACOnC,GACPW,MAAAZ,EAAAI,EAAAQ,MAAA7V,EAAA6V,MAAA,CACA5B,WAAAqB,EAAAgC,gBACA3D,WAAA2B,EAAAiC,gBACAxD,UAAAuB,EAAAkC,eACAjE,cAAA+B,EAAAmC,gBACOvC,IAGP7F,yBACA,IAAAyD,EAAA9M,KAAAhG,YAAAyP,MACA0C,EAAAnM,KAAAhG,YAAA8P,OACA4H,EAAA,EACAC,EAAA,EACAC,EAAA9J,KAAAmE,MAAAa,EAAA9M,KAAAhG,YAAA6X,yBAAA,KACAC,EAAAhK,KAAAmE,MAAAE,EAAAnM,KAAAhG,YAAA6X,yBAAA,KACAE,EAAA/R,KAAAiR,eAAAT,KAAAwB,eAAA,CACAvI,MAAAmI,EACA9H,OAAAgI,IAEAhF,GAAAiF,EAAAtI,MACA0C,GAAA4F,EAAAjI,OAKA6H,GAJAI,EAAA/R,KAAAiR,eAAA7W,MAAA4X,eAAA,CACAvI,MAAAzJ,KAAAhG,YAAAyP,MACAK,OAAAqC,KAEArC,OACAqC,GAAA4F,EAAAjI,OACA9J,KAAAiR,eAAArB,MAAAqC,gBAAA,UAKA9F,IAJA4F,EAAA/R,KAAAiR,eAAArB,MAAAoC,eAAA,CACAvI,MAAAqD,EACAhD,OAAAqC,KAEArC,OACA9J,KAAAiR,eAAApB,MAAAoC,gBAAA,QAKAP,GAJAK,EAAA/R,KAAAiR,eAAApB,MAAAmC,eAAA,CACAvI,MAAAqD,EACAhD,OAAAqC,KAEA1C,OACAqD,GAAAiF,EAAAtI,OACA,IACAmI,GAAA9E,EACAA,EAAA,GAEAX,EAAA,IACA2F,GAAA3F,EACAA,EAAA,GAEAnM,KAAAiR,eAAAT,KAAAwB,eAAA,CACAvI,MAAAmI,EACA9H,OAAAgI,IAEA9R,KAAAiR,eAAAT,KAAA0B,iBAAA,CACArH,EAAA6G,EACA5G,EAAA6G,IAEA3R,KAAAiR,eAAArB,MAAApE,SAAA,CAAAkG,IAAAE,IACA5R,KAAAiR,eAAArB,MAAAsC,iBAAA,CACArH,EAAA6G,EACA5G,EAAA6G,EAAAG,IAEA9R,KAAAiR,eAAApB,MAAArE,SAAA,CAAAmG,IAAAG,IACA9R,KAAAiR,eAAApB,MAAAqC,iBAAA,CACArH,EAAA,EACAC,EAAA6G,IAEA3R,KAAAqP,UAAAoB,MAAA0B,KAAA/N,GAAA6E,EAAA7E,KACApE,KAAAiR,eAAArB,MAAAwC,mCAGA/I,4BACA,IAAAyD,EAAA9M,KAAAhG,YAAAyP,MACA0C,EAAAnM,KAAAhG,YAAA8P,OACAuI,EAAA,EACAX,EAAA,EACAC,EAAA,EACAC,EAAA9J,KAAAmE,MAAAa,EAAA9M,KAAAhG,YAAA6X,yBAAA,KACAC,EAAAhK,KAAAmE,MAAAE,EAAAnM,KAAAhG,YAAA6X,yBAAA,KACAE,EAAA/R,KAAAiR,eAAAT,KAAAwB,eAAA,CACAvI,MAAAmI,EACA9H,OAAAgI,IAEAhF,GAAAiF,EAAAtI,MACA0C,GAAA4F,EAAAjI,OAKAuI,GAJAN,EAAA/R,KAAAiR,eAAA7W,MAAA4X,eAAA,CACAvI,MAAAzJ,KAAAhG,YAAAyP,MACAK,OAAAqC,KAEArC,OACAqC,GAAA4F,EAAAjI,OACA9J,KAAAiR,eAAArB,MAAAqC,gBAAA,QAKAnF,IAJAiF,EAAA/R,KAAAiR,eAAArB,MAAAoC,eAAA,CACAvI,MAAAqD,EACAhD,OAAAqC,KAEA1C,MACAiI,EAAAK,EAAAtI,MACAzJ,KAAAiR,eAAApB,MAAAoC,gBAAA,OAKA9F,IAJA4F,EAAA/R,KAAAiR,eAAApB,MAAAmC,eAAA,CACAvI,MAAAqD,EACAhD,OAAAqC,KAEArC,OACA6H,EAAAU,EAAAN,EAAAjI,OACAgD,EAAA,IACA8E,GAAA9E,EACAA,EAAA,GAEAX,EAAA,IACA2F,GAAA3F,EACAA,EAAA,GAEAnM,KAAAiR,eAAAT,KAAAwB,eAAA,CACAvI,MAAAmI,EACA9H,OAAAgI,IAEA9R,KAAAiR,eAAAT,KAAA0B,iBAAA,CACArH,EAAA6G,EACA5G,EAAA6G,IAEA3R,KAAAiR,eAAApB,MAAArE,SAAA,CAAAkG,IAAAE,IACA5R,KAAAiR,eAAApB,MAAAqC,iBAAA,CACArH,EAAA6G,EACA5G,EAAAuH,IAEArS,KAAAiR,eAAArB,MAAApE,SAAA,CAAAmG,IAAAG,IACA9R,KAAAiR,eAAArB,MAAAsC,iBAAA,CACArH,EAAA,EACAC,EAAA6G,IAEA3R,KAAAqP,UAAAoB,MAAA0B,KAAA/N,GAAA6E,EAAA7E,KACApE,KAAAiR,eAAArB,MAAAwC,mCAGA/I,iBACA,eAAArJ,KAAAhG,YAAA4W,iBACA5Q,KAAAsS,4BAEAtS,KAAAuS,yBAGAlJ,qBACArJ,KAAAgS,iBACA,MAAAvC,EAAA,GACAzP,KAAAiR,eAAAT,KAAAgC,QAAAxS,KAAAiR,eAAArB,MAAA5P,KAAAiR,eAAApB,OACA,UAAA4C,KAAAzP,OAAA0P,OAAA1S,KAAAiR,gBACAxB,EAAAhM,QAAAgP,EAAAE,uBAEA,OAAAlD,GAGA,MAAAmD,EACAvJ,aAAAwJ,EAAAxD,EAAAC,EAAAJ,GAEA,OADA,IAAA8B,EAAA6B,EAAAxD,EAAAC,EAAAJ,GACA2B,sBAGA,IACAiC,EADA9C,EAAA,EAEA+C,EAAAC,IACAC,EAAAC,IACAC,EAAAC,IACAC,EAAAJ,EAAAI,iBAAArN,MAAA,KAAA4F,IAAA0H,KAAA1T,QACA2T,GAAA,EACAC,GAAA,EACA,SAAAN,IACA,MAAAO,EAAgCzQ,OAAA7L,EAAA,EAAA6L,GAChC6P,EAAiB7P,OAAA7L,EAAA,EAAA6L,GACjB,OAASA,OAAA7L,EAAA,EAAA6L,CAAayQ,EAAAC,QAAAb,EAAAc,eAAAD,SAEtB,SAAAV,IACA,MAAAH,EAAiB7P,OAAA7L,EAAA,EAAA6L,GACjB,OAASA,OAAA7L,EAAA,EAAA6L,CAAc7L,EAAA,EAAauc,QAAAb,EAAAa,SAEpC,SAAAN,IACA,OACAvD,MAAA,CACA/P,KAAA,SACA1F,MAAA,GACAoS,IAAAoH,IACA/J,KAAA+J,KAEAhE,MAAA,CACA9P,KAAA,OACA1F,MAAA,GACAkU,WAAA,IAEAlU,MAAA,GACAqW,MAAA,IAGA,SAAAoD,EAAAxZ,GACA,MAAAwY,EAAiB7P,OAAA7L,EAAA,EAAA6L,GACjB,OAASA,OAAA7L,EAAA,EAAA6L,CAAY3I,EAAAuF,OAAAiT,GAerB,SAAAtS,EAAAiM,EAAA3C,GACAsJ,EAAAvD,MAAA,CACA9P,KAAA,SACA1F,MAAA+Y,EAAAvD,MAAAxV,MACAoS,MACA3C,OAEA0J,GAAA,EAkCA,SAAAO,EAAAtL,GACA,IAAAuL,EAAA,GACA,OAAAvL,EAAA5Q,OACA,OAAAmc,EAEA,IAAAR,EAAA,CACA,MAAAS,EAAA7K,EAAAgK,EAAAvD,OAAAuD,EAAAvD,MAAApD,IAAAoH,IACAK,EAAA9K,EAAAgK,EAAAvD,OAAAuD,EAAAvD,MAAA/F,KAAA+J,IACArT,EAAAuH,KAAA0E,IAAAwH,EAAA,GAAAlM,KAAA+B,IAAAoK,EAAAzL,EAAA5Q,SAQA,GANA4b,GAtBA,SAAAhL,GACA,MAAA0L,EAAApM,KAAA0E,OAAAhE,GACA2L,EAAArM,KAAA+B,OAAArB,GACAwL,EAAA7K,EAAAgK,EAAAtD,OAAAsD,EAAAtD,MAAArD,IAAAoH,IACAK,EAAA9K,EAAAgK,EAAAtD,OAAAsD,EAAAtD,MAAAhG,KAAA,IACAsJ,EAAAtD,MAAA,CACA/P,KAAA,SACA1F,MAAA+Y,EAAAtD,MAAAzV,MACAoS,IAAA1E,KAAA0E,IAAAwH,EAAAE,GACArK,IAAA/B,KAAA+B,IAAAoK,EAAAE,IAcAC,CAAA5L,GAEAU,EAAAiK,EAAAvD,SACAmE,EAAAZ,EAAAvD,MAAAtB,WAAA1C,IAAA,CAAA9E,EAAAS,IAAA,CAAAT,EAAA0B,EAAAjB,MAEA4B,EAAAgK,EAAAvD,OAAA,CACA,MAAApD,EAAA2G,EAAAvD,MAAApD,IACA3C,EAAAsJ,EAAAvD,MAAA/F,IACAwK,GAAAxK,EAAA2C,EAAA,GAAAhE,EAAA5Q,OACA0W,EAAA,GACA,QAAA/G,EAAAiF,EAAqBjF,GAAAsC,EAAUtC,GAAA8M,EAC/B/F,EAAA7K,KAAA,GAAA4B,OAAAkC,IAEAwM,EAAAzF,EAAA1C,IAAA,CAAA9E,EAAAS,IAAA,CAAAT,EAAA0B,EAAAjB,KAEA,OAAAwM,EAEA,SAAAO,EAAAvE,GACA,OAAAsD,EAAA,IAAAtD,EAAA,EAAAA,EAAAsD,EAAAzb,QAkCA,MA2FAV,EAAA,CACAI,OAAA0R,EACAuL,GAnFA,CACAC,gBAxBA,WACA,OAAArB,EAAA1C,MAAA7Y,OACA,MAAAuK,MAAA,2DAGA,OADAgR,EAAA/Y,MAAsB4I,OAAA7L,EAAA,EAAA6L,GACtB4P,EAAA6B,MAAA1B,EAAAI,EAAAF,EAAAH,IAoBA4B,MAZA,WACE1R,OAAA7L,EAAA,EAAA6L,GACFgN,EAAA,EACA+C,EAAAC,IACAG,EA7IA,CACAtD,MAAA,CACA/P,KAAA,SACA1F,MAAA,GACAoS,IAAAoH,IACA/J,KAAA,KAEA+F,MAAA,CACA9P,KAAA,OACA1F,MAAA,GACAkU,WAAA,IAEAlU,MAAA,GACAqW,MAAA,IAiIAwC,EAAAC,IACAG,EAAAJ,EAAAI,iBAAArN,MAAA,KAAA4F,IAAA0H,KAAA1T,QACA2T,GAAA,EACAC,GAAA,GAKEtT,YAAA/I,EAAA,EACAwd,YAAAxd,EAAA,EACAwI,gBAAAxI,EAAA,EACAyd,gBAAAzd,EAAA,EACA0d,kBAAA1d,EAAA,EACAgJ,kBAAAhJ,EAAA,EACFuI,eArIA,SAAAoQ,GAEAiD,EAAAnC,iBADA,eAAAd,EACA,aAEA,YAkIAzP,cA/HA,SAAAjG,GACA+Y,EAAAvD,MAAAxV,MAAAyZ,EAAAzZ,EAAAC,OA+HAkG,oBACAD,aArHA,SAAAgO,GACA6E,EAAAvD,MAAA,CACA9P,KAAA,OACA1F,MAAA+Y,EAAAvD,MAAAxV,MACAkU,aAAA1C,IAAA9E,GAAA+M,EAAA/M,EAAAzM,QAEAkZ,GAAA,GAgHA/S,cA9GA,SAAApG,GACA+Y,EAAAtD,MAAAzV,MAAAyZ,EAAAzZ,EAAAC,OA8GAoG,kBA5GA,SAAA+L,EAAA3C,GACAsJ,EAAAtD,MAAA,CACA/P,KAAA,SACA1F,MAAA+Y,EAAAtD,MAAAzV,MACAoS,MACA3C,OAEA2J,GAAA,GAsGA3T,YAzDA,SAAAzF,EAAAoO,GACA,MAAA7N,EAAAmZ,EAAAtL,GACA2K,EAAA1C,MAAAhN,KAAA,CACA3D,KAAA,OACAwN,WAAAgH,EAAAtE,GACAxC,YAAA,EACAhF,KAAA7N,IAEAqV,KAkDAjQ,WAhDA,SAAA3F,EAAAoO,GACA,MAAA7N,EAAAmZ,EAAAtL,GACA2K,EAAA1C,MAAAhN,KAAA,CACA3D,KAAA,MACA4N,KAAA4G,EAAAtE,GACAxH,KAAA7N,IAEAqV,KA0CA8E,WAhJA,SAAAC,GACAjC,EAAAiC,GAgJAC,oBAlCA,WACA,OAAA/B,GAkCAgC,eAhCA,WACA,OAAAlC,IAgGAmC,SANA,CACAC,KA1DA,CAAAC,EAAAC,EAAAC,EAAAC,KACA,MAAAC,EAAAD,EAAAhB,GACAkB,EAAAD,EAAAR,sBACAhb,EAAAwb,EAAAP,iBACA,SAAAS,EAAA5H,GACA,cAAAA,EAAA,4BAEA,SAAA6H,EAAA9H,GACA,eAAAA,EAAA,kBAAAA,EAAA,eAEA,SAAA+H,EAAApN,GACA,mBAAAnD,OAAAmD,EAAAqC,EAAA,MAAAxF,OAAAmD,EAAAsC,EAAA,aAAAzF,OAAAmD,EAAAoF,UAAA,OAEEzW,EAAA,EAAG0e,MAAA,4BAAAT,GACL,MAAAU,EAAc9S,OAAA7L,EAAA,EAAA6L,CAAgBqS,GAC9BU,EAAAD,EAAA7L,OAAA,KAAAC,KAAA,gBACA8L,EAAAD,EAAA9L,OAAA,QAAAC,KAAA,QAAAlQ,EAAAyP,OAAAS,KAAA,SAAAlQ,EAAA8P,QAAAI,KAAA,sBACElH,OAAA7L,EAAA,EAAA6L,CAAgB8S,EAAA9b,EAAA8P,OAAA9P,EAAAyP,OAAA,GAClBqM,EAAA5L,KAAA,iBAAA7E,OAAArL,EAAAyP,MAAA,KAAApE,OAAArL,EAAA8P,SACAkM,EAAA9L,KAAA,OAAAuL,EAAAQ,iBACAT,EAAAV,WAAAgB,EAAA7L,OAAA,KAAAC,KAAA,8BACA,MAAAgM,EAAAV,EAAAhB,kBACA2B,EAAA,GACA,SAAAC,EAAAC,GACA,IAAArM,EAAA+L,EACAO,EAAA,GACA,UAAA/O,KAAA8O,EAAA3F,UAAA,CACA,IAAA6F,EAAAR,EACAxO,EAAA,GAAA4O,EAAAG,KACAC,EAAAJ,EAAAG,IAEAA,GAAAD,EAAA9O,IACAyC,EAAAmM,EAAAG,MAEAtM,EAAAmM,EAAAG,GAAAC,EAAAtM,OAAA,KAAAC,KAAA,QAAAmM,EAAA9O,KAGA,OAAAyC,EAEA,UAAAwM,KAAAN,EAAA,CACA,OAAAM,EAAAhO,KAAA5Q,OACA,SAEA,MAAA6e,EAAAL,EAAAI,EAAApJ,YACA,OAAAoJ,EAAA1W,MACA,WACA2W,EAAAC,UAAA,QAAAlO,KAAAgO,EAAAhO,MAAAmO,QAAA1M,OAAA,QAAAC,KAAA,IAAA1B,KAAAqC,GAAAX,KAAA,IAAA1B,KAAAsC,GAAAZ,KAAA,QAAA1B,KAAAiB,OAAAS,KAAA,SAAA1B,KAAAsB,QAAAI,KAAA,OAAA1B,KAAAkF,MAAAxD,KAAA,SAAA1B,KAAA8E,YAAApD,KAAA,eAAA1B,KAAAgF,aACA,MACA,WACAiJ,EAAAC,UAAA,QAAAlO,KAAAgO,EAAAhO,MAAAmO,QAAA1M,OAAA,QAAAC,KAAA,OAAAA,KAAA,OAAAA,KAAA,OAAA1B,KAAAkF,MAAAxD,KAAA,YAAA1B,KAAAgB,UAAAU,KAAA,oBAAA1B,GAAAkN,EAAAlN,EAAAqF,cAAA3D,KAAA,cAAA1B,GAAAmN,EAAAnN,EAAAsF,gBAAA5D,KAAA,YAAA1B,GAAAoN,EAAApN,IAAAnO,KAAAmO,KAAAnO,MACA,MACA,WACAoc,EAAAC,UAAA,QAAAlO,KAAAgO,EAAAhO,MAAAmO,QAAA1M,OAAA,QAAAC,KAAA,IAAA1B,KAAA6E,MAAAnD,KAAA,OAAA1B,KAAAkF,KAAAlF,EAAAkF,KAAA,QAAAxD,KAAA,SAAA1B,KAAA8E,YAAApD,KAAA,eAAA1B,KAAAgF","file":"static/js/29.4dbb03b5.chunk.js","sourcesContent":["import { l as log, s as setAccTitle, g as getAccTitle, q as setDiagramTitle, r as getDiagramTitle, a as getAccDescription, b as setAccDescription, D as getThemeVariables, E as getConfig, B as cleanAndMerge, A as defaultConfig, t as clear$1, d as sanitizeText, z as selectSvgElement, i as configureSvgSize } from \"./mermaid-8af3addd.js\";\nimport { c as computeDimensionOfText } from \"./createText-62fc7601.js\";\nimport { scaleBand, scaleLinear, line } from \"d3\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"mdast-util-from-markdown\";\nvar parser = function () {\n  var o = function (k, v, o2, l) {\n      for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n      return o2;\n    },\n    $V0 = [1, 10, 12, 14, 16, 18, 19, 21, 23],\n    $V1 = [2, 6],\n    $V2 = [1, 3],\n    $V3 = [1, 5],\n    $V4 = [1, 6],\n    $V5 = [1, 7],\n    $V6 = [1, 5, 10, 12, 14, 16, 18, 19, 21, 23, 34, 35, 36],\n    $V7 = [1, 25],\n    $V8 = [1, 26],\n    $V9 = [1, 28],\n    $Va = [1, 29],\n    $Vb = [1, 30],\n    $Vc = [1, 31],\n    $Vd = [1, 32],\n    $Ve = [1, 33],\n    $Vf = [1, 34],\n    $Vg = [1, 35],\n    $Vh = [1, 36],\n    $Vi = [1, 37],\n    $Vj = [1, 43],\n    $Vk = [1, 42],\n    $Vl = [1, 47],\n    $Vm = [1, 50],\n    $Vn = [1, 10, 12, 14, 16, 18, 19, 21, 23, 34, 35, 36],\n    $Vo = [1, 10, 12, 14, 16, 18, 19, 21, 23, 24, 26, 27, 28, 34, 35, 36],\n    $Vp = [1, 10, 12, 14, 16, 18, 19, 21, 23, 24, 26, 27, 28, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\n    $Vq = [1, 64];\n  var parser2 = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"start\": 3,\n      \"eol\": 4,\n      \"XYCHART\": 5,\n      \"chartConfig\": 6,\n      \"document\": 7,\n      \"CHART_ORIENTATION\": 8,\n      \"statement\": 9,\n      \"title\": 10,\n      \"text\": 11,\n      \"X_AXIS\": 12,\n      \"parseXAxis\": 13,\n      \"Y_AXIS\": 14,\n      \"parseYAxis\": 15,\n      \"LINE\": 16,\n      \"plotData\": 17,\n      \"BAR\": 18,\n      \"acc_title\": 19,\n      \"acc_title_value\": 20,\n      \"acc_descr\": 21,\n      \"acc_descr_value\": 22,\n      \"acc_descr_multiline_value\": 23,\n      \"SQUARE_BRACES_START\": 24,\n      \"commaSeparatedNumbers\": 25,\n      \"SQUARE_BRACES_END\": 26,\n      \"NUMBER_WITH_DECIMAL\": 27,\n      \"COMMA\": 28,\n      \"xAxisData\": 29,\n      \"bandData\": 30,\n      \"ARROW_DELIMITER\": 31,\n      \"commaSeparatedTexts\": 32,\n      \"yAxisData\": 33,\n      \"NEWLINE\": 34,\n      \"SEMI\": 35,\n      \"EOF\": 36,\n      \"alphaNum\": 37,\n      \"STR\": 38,\n      \"MD_STR\": 39,\n      \"alphaNumToken\": 40,\n      \"AMP\": 41,\n      \"NUM\": 42,\n      \"ALPHA\": 43,\n      \"PLUS\": 44,\n      \"EQUALS\": 45,\n      \"MULT\": 46,\n      \"DOT\": 47,\n      \"BRKT\": 48,\n      \"MINUS\": 49,\n      \"UNDERSCORE\": 50,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      5: \"XYCHART\",\n      8: \"CHART_ORIENTATION\",\n      10: \"title\",\n      12: \"X_AXIS\",\n      14: \"Y_AXIS\",\n      16: \"LINE\",\n      18: \"BAR\",\n      19: \"acc_title\",\n      20: \"acc_title_value\",\n      21: \"acc_descr\",\n      22: \"acc_descr_value\",\n      23: \"acc_descr_multiline_value\",\n      24: \"SQUARE_BRACES_START\",\n      26: \"SQUARE_BRACES_END\",\n      27: \"NUMBER_WITH_DECIMAL\",\n      28: \"COMMA\",\n      31: \"ARROW_DELIMITER\",\n      34: \"NEWLINE\",\n      35: \"SEMI\",\n      36: \"EOF\",\n      38: \"STR\",\n      39: \"MD_STR\",\n      41: \"AMP\",\n      42: \"NUM\",\n      43: \"ALPHA\",\n      44: \"PLUS\",\n      45: \"EQUALS\",\n      46: \"MULT\",\n      47: \"DOT\",\n      48: \"BRKT\",\n      49: \"MINUS\",\n      50: \"UNDERSCORE\"\n    },\n    productions_: [0, [3, 2], [3, 3], [3, 2], [3, 1], [6, 1], [7, 0], [7, 2], [9, 2], [9, 2], [9, 2], [9, 2], [9, 2], [9, 3], [9, 2], [9, 3], [9, 2], [9, 2], [9, 1], [17, 3], [25, 3], [25, 1], [13, 1], [13, 2], [13, 1], [29, 1], [29, 3], [30, 3], [32, 3], [32, 1], [15, 1], [15, 2], [15, 1], [33, 3], [4, 1], [4, 1], [4, 1], [11, 1], [11, 1], [11, 1], [37, 1], [37, 2], [40, 1], [40, 1], [40, 1], [40, 1], [40, 1], [40, 1], [40, 1], [40, 1], [40, 1], [40, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 5:\n          yy.setOrientation($$[$0]);\n          break;\n        case 9:\n          yy.setDiagramTitle($$[$0].text.trim());\n          break;\n        case 12:\n          yy.setLineData({\n            text: \"\",\n            type: \"text\"\n          }, $$[$0]);\n          break;\n        case 13:\n          yy.setLineData($$[$0 - 1], $$[$0]);\n          break;\n        case 14:\n          yy.setBarData({\n            text: \"\",\n            type: \"text\"\n          }, $$[$0]);\n          break;\n        case 15:\n          yy.setBarData($$[$0 - 1], $$[$0]);\n          break;\n        case 16:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 17:\n        case 18:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 19:\n          this.$ = $$[$0 - 1];\n          break;\n        case 20:\n          this.$ = [Number($$[$0 - 2]), ...$$[$0]];\n          break;\n        case 21:\n          this.$ = [Number($$[$0])];\n          break;\n        case 22:\n          yy.setXAxisTitle($$[$0]);\n          break;\n        case 23:\n          yy.setXAxisTitle($$[$0 - 1]);\n          break;\n        case 24:\n          yy.setXAxisTitle({\n            type: \"text\",\n            text: \"\"\n          });\n          break;\n        case 25:\n          yy.setXAxisBand($$[$0]);\n          break;\n        case 26:\n          yy.setXAxisRangeData(Number($$[$0 - 2]), Number($$[$0]));\n          break;\n        case 27:\n          this.$ = $$[$0 - 1];\n          break;\n        case 28:\n          this.$ = [$$[$0 - 2], ...$$[$0]];\n          break;\n        case 29:\n          this.$ = [$$[$0]];\n          break;\n        case 30:\n          yy.setYAxisTitle($$[$0]);\n          break;\n        case 31:\n          yy.setYAxisTitle($$[$0 - 1]);\n          break;\n        case 32:\n          yy.setYAxisTitle({\n            type: \"text\",\n            text: \"\"\n          });\n          break;\n        case 33:\n          yy.setYAxisRangeData(Number($$[$0 - 2]), Number($$[$0]));\n          break;\n        case 37:\n          this.$ = {\n            text: $$[$0],\n            type: \"text\"\n          };\n          break;\n        case 38:\n          this.$ = {\n            text: $$[$0],\n            type: \"text\"\n          };\n          break;\n        case 39:\n          this.$ = {\n            text: $$[$0],\n            type: \"markdown\"\n          };\n          break;\n        case 40:\n          this.$ = $$[$0];\n          break;\n        case 41:\n          this.$ = $$[$0 - 1] + \"\" + $$[$0];\n          break;\n      }\n    },\n    table: [o($V0, $V1, {\n      3: 1,\n      4: 2,\n      7: 4,\n      5: $V2,\n      34: $V3,\n      35: $V4,\n      36: $V5\n    }), {\n      1: [3]\n    }, o($V0, $V1, {\n      4: 2,\n      7: 4,\n      3: 8,\n      5: $V2,\n      34: $V3,\n      35: $V4,\n      36: $V5\n    }), o($V0, $V1, {\n      4: 2,\n      7: 4,\n      6: 9,\n      3: 10,\n      5: $V2,\n      8: [1, 11],\n      34: $V3,\n      35: $V4,\n      36: $V5\n    }), {\n      1: [2, 4],\n      9: 12,\n      10: [1, 13],\n      12: [1, 14],\n      14: [1, 15],\n      16: [1, 16],\n      18: [1, 17],\n      19: [1, 18],\n      21: [1, 19],\n      23: [1, 20]\n    }, o($V6, [2, 34]), o($V6, [2, 35]), o($V6, [2, 36]), {\n      1: [2, 1]\n    }, o($V0, $V1, {\n      4: 2,\n      7: 4,\n      3: 21,\n      5: $V2,\n      34: $V3,\n      35: $V4,\n      36: $V5\n    }), {\n      1: [2, 3]\n    }, o($V6, [2, 5]), o($V0, [2, 7], {\n      4: 22,\n      34: $V3,\n      35: $V4,\n      36: $V5\n    }), {\n      11: 23,\n      37: 24,\n      38: $V7,\n      39: $V8,\n      40: 27,\n      41: $V9,\n      42: $Va,\n      43: $Vb,\n      44: $Vc,\n      45: $Vd,\n      46: $Ve,\n      47: $Vf,\n      48: $Vg,\n      49: $Vh,\n      50: $Vi\n    }, {\n      11: 39,\n      13: 38,\n      24: $Vj,\n      27: $Vk,\n      29: 40,\n      30: 41,\n      37: 24,\n      38: $V7,\n      39: $V8,\n      40: 27,\n      41: $V9,\n      42: $Va,\n      43: $Vb,\n      44: $Vc,\n      45: $Vd,\n      46: $Ve,\n      47: $Vf,\n      48: $Vg,\n      49: $Vh,\n      50: $Vi\n    }, {\n      11: 45,\n      15: 44,\n      27: $Vl,\n      33: 46,\n      37: 24,\n      38: $V7,\n      39: $V8,\n      40: 27,\n      41: $V9,\n      42: $Va,\n      43: $Vb,\n      44: $Vc,\n      45: $Vd,\n      46: $Ve,\n      47: $Vf,\n      48: $Vg,\n      49: $Vh,\n      50: $Vi\n    }, {\n      11: 49,\n      17: 48,\n      24: $Vm,\n      37: 24,\n      38: $V7,\n      39: $V8,\n      40: 27,\n      41: $V9,\n      42: $Va,\n      43: $Vb,\n      44: $Vc,\n      45: $Vd,\n      46: $Ve,\n      47: $Vf,\n      48: $Vg,\n      49: $Vh,\n      50: $Vi\n    }, {\n      11: 52,\n      17: 51,\n      24: $Vm,\n      37: 24,\n      38: $V7,\n      39: $V8,\n      40: 27,\n      41: $V9,\n      42: $Va,\n      43: $Vb,\n      44: $Vc,\n      45: $Vd,\n      46: $Ve,\n      47: $Vf,\n      48: $Vg,\n      49: $Vh,\n      50: $Vi\n    }, {\n      20: [1, 53]\n    }, {\n      22: [1, 54]\n    }, o($Vn, [2, 18]), {\n      1: [2, 2]\n    }, o($Vn, [2, 8]), o($Vn, [2, 9]), o($Vo, [2, 37], {\n      40: 55,\n      41: $V9,\n      42: $Va,\n      43: $Vb,\n      44: $Vc,\n      45: $Vd,\n      46: $Ve,\n      47: $Vf,\n      48: $Vg,\n      49: $Vh,\n      50: $Vi\n    }), o($Vo, [2, 38]), o($Vo, [2, 39]), o($Vp, [2, 40]), o($Vp, [2, 42]), o($Vp, [2, 43]), o($Vp, [2, 44]), o($Vp, [2, 45]), o($Vp, [2, 46]), o($Vp, [2, 47]), o($Vp, [2, 48]), o($Vp, [2, 49]), o($Vp, [2, 50]), o($Vp, [2, 51]), o($Vn, [2, 10]), o($Vn, [2, 22], {\n      30: 41,\n      29: 56,\n      24: $Vj,\n      27: $Vk\n    }), o($Vn, [2, 24]), o($Vn, [2, 25]), {\n      31: [1, 57]\n    }, {\n      11: 59,\n      32: 58,\n      37: 24,\n      38: $V7,\n      39: $V8,\n      40: 27,\n      41: $V9,\n      42: $Va,\n      43: $Vb,\n      44: $Vc,\n      45: $Vd,\n      46: $Ve,\n      47: $Vf,\n      48: $Vg,\n      49: $Vh,\n      50: $Vi\n    }, o($Vn, [2, 11]), o($Vn, [2, 30], {\n      33: 60,\n      27: $Vl\n    }), o($Vn, [2, 32]), {\n      31: [1, 61]\n    }, o($Vn, [2, 12]), {\n      17: 62,\n      24: $Vm\n    }, {\n      25: 63,\n      27: $Vq\n    }, o($Vn, [2, 14]), {\n      17: 65,\n      24: $Vm\n    }, o($Vn, [2, 16]), o($Vn, [2, 17]), o($Vp, [2, 41]), o($Vn, [2, 23]), {\n      27: [1, 66]\n    }, {\n      26: [1, 67]\n    }, {\n      26: [2, 29],\n      28: [1, 68]\n    }, o($Vn, [2, 31]), {\n      27: [1, 69]\n    }, o($Vn, [2, 13]), {\n      26: [1, 70]\n    }, {\n      26: [2, 21],\n      28: [1, 71]\n    }, o($Vn, [2, 15]), o($Vn, [2, 26]), o($Vn, [2, 27]), {\n      11: 59,\n      32: 72,\n      37: 24,\n      38: $V7,\n      39: $V8,\n      40: 27,\n      41: $V9,\n      42: $Va,\n      43: $Vb,\n      44: $Vc,\n      45: $Vd,\n      46: $Ve,\n      47: $Vf,\n      48: $Vg,\n      49: $Vh,\n      50: $Vi\n    }, o($Vn, [2, 33]), o($Vn, [2, 19]), {\n      25: 73,\n      27: $Vq\n    }, {\n      26: [2, 28]\n    }, {\n      26: [2, 20]\n    }],\n    defaultActions: {\n      8: [2, 1],\n      10: [2, 3],\n      21: [2, 2],\n      72: [2, 28],\n      73: [2, 20]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = \"\",\n        yylineno = 0,\n        yyleng = 0,\n        TERROR = 2,\n        EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol,\n        state,\n        action,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function () {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {\n        \"case-insensitive\": true\n      },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            this.popState();\n            return 34;\n          case 3:\n            this.popState();\n            return 34;\n          case 4:\n            return 34;\n          case 5:\n            break;\n          case 6:\n            return 10;\n          case 7:\n            this.pushState(\"acc_title\");\n            return 19;\n          case 8:\n            this.popState();\n            return \"acc_title_value\";\n          case 9:\n            this.pushState(\"acc_descr\");\n            return 21;\n          case 10:\n            this.popState();\n            return \"acc_descr_value\";\n          case 11:\n            this.pushState(\"acc_descr_multiline\");\n            break;\n          case 12:\n            this.popState();\n            break;\n          case 13:\n            return \"acc_descr_multiline_value\";\n          case 14:\n            return 5;\n          case 15:\n            return 8;\n          case 16:\n            this.pushState(\"axis_data\");\n            return \"X_AXIS\";\n          case 17:\n            this.pushState(\"axis_data\");\n            return \"Y_AXIS\";\n          case 18:\n            this.pushState(\"axis_band_data\");\n            return 24;\n          case 19:\n            return 31;\n          case 20:\n            this.pushState(\"data\");\n            return 16;\n          case 21:\n            this.pushState(\"data\");\n            return 18;\n          case 22:\n            this.pushState(\"data_inner\");\n            return 24;\n          case 23:\n            return 27;\n          case 24:\n            this.popState();\n            return 26;\n          case 25:\n            this.popState();\n            break;\n          case 26:\n            this.pushState(\"string\");\n            break;\n          case 27:\n            this.popState();\n            break;\n          case 28:\n            return \"STR\";\n          case 29:\n            return 24;\n          case 30:\n            return 26;\n          case 31:\n            return 43;\n          case 32:\n            return \"COLON\";\n          case 33:\n            return 44;\n          case 34:\n            return 28;\n          case 35:\n            return 45;\n          case 36:\n            return 46;\n          case 37:\n            return 48;\n          case 38:\n            return 50;\n          case 39:\n            return 47;\n          case 40:\n            return 41;\n          case 41:\n            return 49;\n          case 42:\n            return 42;\n          case 43:\n            break;\n          case 44:\n            return 35;\n          case 45:\n            return 36;\n        }\n      },\n      rules: [/^(?:%%(?!\\{)[^\\n]*)/i, /^(?:[^\\}]%%[^\\n]*)/i, /^(?:(\\r?\\n))/i, /^(?:(\\r?\\n))/i, /^(?:[\\n\\r]+)/i, /^(?:%%[^\\n]*)/i, /^(?:title\\b)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:\\{)/i, /^(?:[^\\}]*)/i, /^(?:xychart-beta\\b)/i, /^(?:(?:vertical|horizontal))/i, /^(?:x-axis\\b)/i, /^(?:y-axis\\b)/i, /^(?:\\[)/i, /^(?:-->)/i, /^(?:line\\b)/i, /^(?:bar\\b)/i, /^(?:\\[)/i, /^(?:[+-]?(?:\\d+(?:\\.\\d+)?|\\.\\d+))/i, /^(?:\\])/i, /^(?:(?:`\\)                                    \\{ this\\.pushState\\(md_string\\); \\}\\n<md_string>\\(\\?:\\(\\?!`\"\\)\\.\\)\\+                  \\{ return MD_STR; \\}\\n<md_string>\\(\\?:`))/i, /^(?:[\"])/i, /^(?:[\"])/i, /^(?:[^\"]*)/i, /^(?:\\[)/i, /^(?:\\])/i, /^(?:[A-Za-z]+)/i, /^(?::)/i, /^(?:\\+)/i, /^(?:,)/i, /^(?:=)/i, /^(?:\\*)/i, /^(?:#)/i, /^(?:[\\_])/i, /^(?:\\.)/i, /^(?:&)/i, /^(?:-)/i, /^(?:[0-9]+)/i, /^(?:\\s+)/i, /^(?:;)/i, /^(?:$)/i],\n      conditions: {\n        \"data_inner\": {\n          \"rules\": [0, 1, 4, 5, 6, 7, 9, 11, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45],\n          \"inclusive\": true\n        },\n        \"data\": {\n          \"rules\": [0, 1, 3, 4, 5, 6, 7, 9, 11, 14, 15, 16, 17, 20, 21, 22, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45],\n          \"inclusive\": true\n        },\n        \"axis_band_data\": {\n          \"rules\": [0, 1, 4, 5, 6, 7, 9, 11, 14, 15, 16, 17, 20, 21, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45],\n          \"inclusive\": true\n        },\n        \"axis_data\": {\n          \"rules\": [0, 1, 2, 4, 5, 6, 7, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45],\n          \"inclusive\": true\n        },\n        \"acc_descr_multiline\": {\n          \"rules\": [12, 13],\n          \"inclusive\": false\n        },\n        \"acc_descr\": {\n          \"rules\": [10],\n          \"inclusive\": false\n        },\n        \"acc_title\": {\n          \"rules\": [8],\n          \"inclusive\": false\n        },\n        \"title\": {\n          \"rules\": [],\n          \"inclusive\": false\n        },\n        \"md_string\": {\n          \"rules\": [],\n          \"inclusive\": false\n        },\n        \"string\": {\n          \"rules\": [27, 28],\n          \"inclusive\": false\n        },\n        \"INITIAL\": {\n          \"rules\": [0, 1, 4, 5, 6, 7, 9, 11, 14, 15, 16, 17, 20, 21, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nfunction isBarPlot(data) {\n  return data.type === \"bar\";\n}\nfunction isBandAxisData(data) {\n  return data.type === \"band\";\n}\nfunction isLinearAxisData(data) {\n  return data.type === \"linear\";\n}\nclass TextDimensionCalculatorWithFont {\n  constructor(parentGroup) {\n    this.parentGroup = parentGroup;\n  }\n  getMaxDimension(texts, fontSize) {\n    if (!this.parentGroup) {\n      return {\n        width: texts.reduce((acc, cur) => Math.max(cur.length, acc), 0) * fontSize,\n        height: fontSize\n      };\n    }\n    const dimension = {\n      width: 0,\n      height: 0\n    };\n    const elem = this.parentGroup.append(\"g\").attr(\"visibility\", \"hidden\").attr(\"font-size\", fontSize);\n    for (const t of texts) {\n      const bbox = computeDimensionOfText(elem, 1, t);\n      const width = bbox ? bbox.width : t.length * fontSize;\n      const height = bbox ? bbox.height : fontSize;\n      dimension.width = Math.max(dimension.width, width);\n      dimension.height = Math.max(dimension.height, height);\n    }\n    elem.remove();\n    return dimension;\n  }\n}\nconst BAR_WIDTH_TO_TICK_WIDTH_RATIO = 0.7;\nconst MAX_OUTER_PADDING_PERCENT_FOR_WRT_LABEL = 0.2;\nclass BaseAxis {\n  constructor(axisConfig, title, textDimensionCalculator, axisThemeConfig) {\n    this.axisConfig = axisConfig;\n    this.title = title;\n    this.textDimensionCalculator = textDimensionCalculator;\n    this.axisThemeConfig = axisThemeConfig;\n    this.boundingRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    this.axisPosition = \"left\";\n    this.showTitle = false;\n    this.showLabel = false;\n    this.showTick = false;\n    this.showAxisLine = false;\n    this.outerPadding = 0;\n    this.titleTextHeight = 0;\n    this.labelTextHeight = 0;\n    this.range = [0, 10];\n    this.boundingRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    this.axisPosition = \"left\";\n  }\n  setRange(range) {\n    this.range = range;\n    if (this.axisPosition === \"left\" || this.axisPosition === \"right\") {\n      this.boundingRect.height = range[1] - range[0];\n    } else {\n      this.boundingRect.width = range[1] - range[0];\n    }\n    this.recalculateScale();\n  }\n  getRange() {\n    return [this.range[0] + this.outerPadding, this.range[1] - this.outerPadding];\n  }\n  setAxisPosition(axisPosition) {\n    this.axisPosition = axisPosition;\n    this.setRange(this.range);\n  }\n  getTickDistance() {\n    const range = this.getRange();\n    return Math.abs(range[0] - range[1]) / this.getTickValues().length;\n  }\n  getAxisOuterPadding() {\n    return this.outerPadding;\n  }\n  getLabelDimension() {\n    return this.textDimensionCalculator.getMaxDimension(this.getTickValues().map(tick => tick.toString()), this.axisConfig.labelFontSize);\n  }\n  recalculateOuterPaddingToDrawBar() {\n    if (BAR_WIDTH_TO_TICK_WIDTH_RATIO * this.getTickDistance() > this.outerPadding * 2) {\n      this.outerPadding = Math.floor(BAR_WIDTH_TO_TICK_WIDTH_RATIO * this.getTickDistance() / 2);\n    }\n    this.recalculateScale();\n  }\n  calculateSpaceIfDrawnHorizontally(availableSpace) {\n    let availableHeight = availableSpace.height;\n    if (this.axisConfig.showAxisLine && availableHeight > this.axisConfig.axisLineWidth) {\n      availableHeight -= this.axisConfig.axisLineWidth;\n      this.showAxisLine = true;\n    }\n    if (this.axisConfig.showLabel) {\n      const spaceRequired = this.getLabelDimension();\n      const maxPadding = MAX_OUTER_PADDING_PERCENT_FOR_WRT_LABEL * availableSpace.width;\n      this.outerPadding = Math.min(spaceRequired.width / 2, maxPadding);\n      const heightRequired = spaceRequired.height + this.axisConfig.labelPadding * 2;\n      this.labelTextHeight = spaceRequired.height;\n      if (heightRequired <= availableHeight) {\n        availableHeight -= heightRequired;\n        this.showLabel = true;\n      }\n    }\n    if (this.axisConfig.showTick && availableHeight >= this.axisConfig.tickLength) {\n      this.showTick = true;\n      availableHeight -= this.axisConfig.tickLength;\n    }\n    if (this.axisConfig.showTitle && this.title) {\n      const spaceRequired = this.textDimensionCalculator.getMaxDimension([this.title], this.axisConfig.titleFontSize);\n      const heightRequired = spaceRequired.height + this.axisConfig.titlePadding * 2;\n      this.titleTextHeight = spaceRequired.height;\n      if (heightRequired <= availableHeight) {\n        availableHeight -= heightRequired;\n        this.showTitle = true;\n      }\n    }\n    this.boundingRect.width = availableSpace.width;\n    this.boundingRect.height = availableSpace.height - availableHeight;\n  }\n  calculateSpaceIfDrawnVertical(availableSpace) {\n    let availableWidth = availableSpace.width;\n    if (this.axisConfig.showAxisLine && availableWidth > this.axisConfig.axisLineWidth) {\n      availableWidth -= this.axisConfig.axisLineWidth;\n      this.showAxisLine = true;\n    }\n    if (this.axisConfig.showLabel) {\n      const spaceRequired = this.getLabelDimension();\n      const maxPadding = MAX_OUTER_PADDING_PERCENT_FOR_WRT_LABEL * availableSpace.height;\n      this.outerPadding = Math.min(spaceRequired.height / 2, maxPadding);\n      const widthRequired = spaceRequired.width + this.axisConfig.labelPadding * 2;\n      if (widthRequired <= availableWidth) {\n        availableWidth -= widthRequired;\n        this.showLabel = true;\n      }\n    }\n    if (this.axisConfig.showTick && availableWidth >= this.axisConfig.tickLength) {\n      this.showTick = true;\n      availableWidth -= this.axisConfig.tickLength;\n    }\n    if (this.axisConfig.showTitle && this.title) {\n      const spaceRequired = this.textDimensionCalculator.getMaxDimension([this.title], this.axisConfig.titleFontSize);\n      const widthRequired = spaceRequired.height + this.axisConfig.titlePadding * 2;\n      this.titleTextHeight = spaceRequired.height;\n      if (widthRequired <= availableWidth) {\n        availableWidth -= widthRequired;\n        this.showTitle = true;\n      }\n    }\n    this.boundingRect.width = availableSpace.width - availableWidth;\n    this.boundingRect.height = availableSpace.height;\n  }\n  calculateSpace(availableSpace) {\n    if (this.axisPosition === \"left\" || this.axisPosition === \"right\") {\n      this.calculateSpaceIfDrawnVertical(availableSpace);\n    } else {\n      this.calculateSpaceIfDrawnHorizontally(availableSpace);\n    }\n    this.recalculateScale();\n    return {\n      width: this.boundingRect.width,\n      height: this.boundingRect.height\n    };\n  }\n  setBoundingBoxXY(point) {\n    this.boundingRect.x = point.x;\n    this.boundingRect.y = point.y;\n  }\n  getDrawableElementsForLeftAxis() {\n    const drawableElement = [];\n    if (this.showAxisLine) {\n      const x = this.boundingRect.x + this.boundingRect.width - this.axisConfig.axisLineWidth / 2;\n      drawableElement.push({\n        type: \"path\",\n        groupTexts: [\"left-axis\", \"axisl-line\"],\n        data: [{\n          path: \"M \".concat(x, \",\").concat(this.boundingRect.y, \" L \").concat(x, \",\").concat(this.boundingRect.y + this.boundingRect.height, \" \"),\n          strokeFill: this.axisThemeConfig.axisLineColor,\n          strokeWidth: this.axisConfig.axisLineWidth\n        }]\n      });\n    }\n    if (this.showLabel) {\n      drawableElement.push({\n        type: \"text\",\n        groupTexts: [\"left-axis\", \"label\"],\n        data: this.getTickValues().map(tick => ({\n          text: tick.toString(),\n          x: this.boundingRect.x + this.boundingRect.width - (this.showLabel ? this.axisConfig.labelPadding : 0) - (this.showTick ? this.axisConfig.tickLength : 0) - (this.showAxisLine ? this.axisConfig.axisLineWidth : 0),\n          y: this.getScaleValue(tick),\n          fill: this.axisThemeConfig.labelColor,\n          fontSize: this.axisConfig.labelFontSize,\n          rotation: 0,\n          verticalPos: \"middle\",\n          horizontalPos: \"right\"\n        }))\n      });\n    }\n    if (this.showTick) {\n      const x = this.boundingRect.x + this.boundingRect.width - (this.showAxisLine ? this.axisConfig.axisLineWidth : 0);\n      drawableElement.push({\n        type: \"path\",\n        groupTexts: [\"left-axis\", \"ticks\"],\n        data: this.getTickValues().map(tick => ({\n          path: \"M \".concat(x, \",\").concat(this.getScaleValue(tick), \" L \").concat(x - this.axisConfig.tickLength, \",\").concat(this.getScaleValue(tick)),\n          strokeFill: this.axisThemeConfig.tickColor,\n          strokeWidth: this.axisConfig.tickWidth\n        }))\n      });\n    }\n    if (this.showTitle) {\n      drawableElement.push({\n        type: \"text\",\n        groupTexts: [\"left-axis\", \"title\"],\n        data: [{\n          text: this.title,\n          x: this.boundingRect.x + this.axisConfig.titlePadding,\n          y: this.boundingRect.y + this.boundingRect.height / 2,\n          fill: this.axisThemeConfig.titleColor,\n          fontSize: this.axisConfig.titleFontSize,\n          rotation: 270,\n          verticalPos: \"top\",\n          horizontalPos: \"center\"\n        }]\n      });\n    }\n    return drawableElement;\n  }\n  getDrawableElementsForBottomAxis() {\n    const drawableElement = [];\n    if (this.showAxisLine) {\n      const y = this.boundingRect.y + this.axisConfig.axisLineWidth / 2;\n      drawableElement.push({\n        type: \"path\",\n        groupTexts: [\"bottom-axis\", \"axis-line\"],\n        data: [{\n          path: \"M \".concat(this.boundingRect.x, \",\").concat(y, \" L \").concat(this.boundingRect.x + this.boundingRect.width, \",\").concat(y),\n          strokeFill: this.axisThemeConfig.axisLineColor,\n          strokeWidth: this.axisConfig.axisLineWidth\n        }]\n      });\n    }\n    if (this.showLabel) {\n      drawableElement.push({\n        type: \"text\",\n        groupTexts: [\"bottom-axis\", \"label\"],\n        data: this.getTickValues().map(tick => ({\n          text: tick.toString(),\n          x: this.getScaleValue(tick),\n          y: this.boundingRect.y + this.axisConfig.labelPadding + (this.showTick ? this.axisConfig.tickLength : 0) + (this.showAxisLine ? this.axisConfig.axisLineWidth : 0),\n          fill: this.axisThemeConfig.labelColor,\n          fontSize: this.axisConfig.labelFontSize,\n          rotation: 0,\n          verticalPos: \"top\",\n          horizontalPos: \"center\"\n        }))\n      });\n    }\n    if (this.showTick) {\n      const y = this.boundingRect.y + (this.showAxisLine ? this.axisConfig.axisLineWidth : 0);\n      drawableElement.push({\n        type: \"path\",\n        groupTexts: [\"bottom-axis\", \"ticks\"],\n        data: this.getTickValues().map(tick => ({\n          path: \"M \".concat(this.getScaleValue(tick), \",\").concat(y, \" L \").concat(this.getScaleValue(tick), \",\").concat(y + this.axisConfig.tickLength),\n          strokeFill: this.axisThemeConfig.tickColor,\n          strokeWidth: this.axisConfig.tickWidth\n        }))\n      });\n    }\n    if (this.showTitle) {\n      drawableElement.push({\n        type: \"text\",\n        groupTexts: [\"bottom-axis\", \"title\"],\n        data: [{\n          text: this.title,\n          x: this.range[0] + (this.range[1] - this.range[0]) / 2,\n          y: this.boundingRect.y + this.boundingRect.height - this.axisConfig.titlePadding - this.titleTextHeight,\n          fill: this.axisThemeConfig.titleColor,\n          fontSize: this.axisConfig.titleFontSize,\n          rotation: 0,\n          verticalPos: \"top\",\n          horizontalPos: \"center\"\n        }]\n      });\n    }\n    return drawableElement;\n  }\n  getDrawableElementsForTopAxis() {\n    const drawableElement = [];\n    if (this.showAxisLine) {\n      const y = this.boundingRect.y + this.boundingRect.height - this.axisConfig.axisLineWidth / 2;\n      drawableElement.push({\n        type: \"path\",\n        groupTexts: [\"top-axis\", \"axis-line\"],\n        data: [{\n          path: \"M \".concat(this.boundingRect.x, \",\").concat(y, \" L \").concat(this.boundingRect.x + this.boundingRect.width, \",\").concat(y),\n          strokeFill: this.axisThemeConfig.axisLineColor,\n          strokeWidth: this.axisConfig.axisLineWidth\n        }]\n      });\n    }\n    if (this.showLabel) {\n      drawableElement.push({\n        type: \"text\",\n        groupTexts: [\"top-axis\", \"label\"],\n        data: this.getTickValues().map(tick => ({\n          text: tick.toString(),\n          x: this.getScaleValue(tick),\n          y: this.boundingRect.y + (this.showTitle ? this.titleTextHeight + this.axisConfig.titlePadding * 2 : 0) + this.axisConfig.labelPadding,\n          fill: this.axisThemeConfig.labelColor,\n          fontSize: this.axisConfig.labelFontSize,\n          rotation: 0,\n          verticalPos: \"top\",\n          horizontalPos: \"center\"\n        }))\n      });\n    }\n    if (this.showTick) {\n      const y = this.boundingRect.y;\n      drawableElement.push({\n        type: \"path\",\n        groupTexts: [\"top-axis\", \"ticks\"],\n        data: this.getTickValues().map(tick => ({\n          path: \"M \".concat(this.getScaleValue(tick), \",\").concat(y + this.boundingRect.height - (this.showAxisLine ? this.axisConfig.axisLineWidth : 0), \" L \").concat(this.getScaleValue(tick), \",\").concat(y + this.boundingRect.height - this.axisConfig.tickLength - (this.showAxisLine ? this.axisConfig.axisLineWidth : 0)),\n          strokeFill: this.axisThemeConfig.tickColor,\n          strokeWidth: this.axisConfig.tickWidth\n        }))\n      });\n    }\n    if (this.showTitle) {\n      drawableElement.push({\n        type: \"text\",\n        groupTexts: [\"top-axis\", \"title\"],\n        data: [{\n          text: this.title,\n          x: this.boundingRect.x + this.boundingRect.width / 2,\n          y: this.boundingRect.y + this.axisConfig.titlePadding,\n          fill: this.axisThemeConfig.titleColor,\n          fontSize: this.axisConfig.titleFontSize,\n          rotation: 0,\n          verticalPos: \"top\",\n          horizontalPos: \"center\"\n        }]\n      });\n    }\n    return drawableElement;\n  }\n  getDrawableElements() {\n    if (this.axisPosition === \"left\") {\n      return this.getDrawableElementsForLeftAxis();\n    }\n    if (this.axisPosition === \"right\") {\n      throw Error(\"Drawing of right axis is not implemented\");\n    }\n    if (this.axisPosition === \"bottom\") {\n      return this.getDrawableElementsForBottomAxis();\n    }\n    if (this.axisPosition === \"top\") {\n      return this.getDrawableElementsForTopAxis();\n    }\n    return [];\n  }\n}\nclass BandAxis extends BaseAxis {\n  constructor(axisConfig, axisThemeConfig, categories, title, textDimensionCalculator) {\n    super(axisConfig, title, textDimensionCalculator, axisThemeConfig);\n    this.categories = categories;\n    this.scale = scaleBand().domain(this.categories).range(this.getRange());\n  }\n  setRange(range) {\n    super.setRange(range);\n  }\n  recalculateScale() {\n    this.scale = scaleBand().domain(this.categories).range(this.getRange()).paddingInner(1).paddingOuter(0).align(0.5);\n    log.trace(\"BandAxis axis final categories, range: \", this.categories, this.getRange());\n  }\n  getTickValues() {\n    return this.categories;\n  }\n  getScaleValue(value) {\n    return this.scale(value) || this.getRange()[0];\n  }\n}\nclass LinearAxis extends BaseAxis {\n  constructor(axisConfig, axisThemeConfig, domain, title, textDimensionCalculator) {\n    super(axisConfig, title, textDimensionCalculator, axisThemeConfig);\n    this.domain = domain;\n    this.scale = scaleLinear().domain(this.domain).range(this.getRange());\n  }\n  getTickValues() {\n    return this.scale.ticks();\n  }\n  recalculateScale() {\n    const domain = [...this.domain];\n    if (this.axisPosition === \"left\") {\n      domain.reverse();\n    }\n    this.scale = scaleLinear().domain(domain).range(this.getRange());\n  }\n  getScaleValue(value) {\n    return this.scale(value);\n  }\n}\nfunction getAxis(data, axisConfig, axisThemeConfig, tmpSVGGroup2) {\n  const textDimansionCalculator = new TextDimensionCalculatorWithFont(tmpSVGGroup2);\n  if (isBandAxisData(data)) {\n    return new BandAxis(axisConfig, axisThemeConfig, data.categories, data.title, textDimansionCalculator);\n  }\n  return new LinearAxis(axisConfig, axisThemeConfig, [data.min, data.max], data.title, textDimansionCalculator);\n}\nclass ChartTitle {\n  constructor(textDimensionCalculator, chartConfig, chartData, chartThemeConfig) {\n    this.textDimensionCalculator = textDimensionCalculator;\n    this.chartConfig = chartConfig;\n    this.chartData = chartData;\n    this.chartThemeConfig = chartThemeConfig;\n    this.boundingRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    this.showChartTitle = false;\n  }\n  setBoundingBoxXY(point) {\n    this.boundingRect.x = point.x;\n    this.boundingRect.y = point.y;\n  }\n  calculateSpace(availableSpace) {\n    const titleDimension = this.textDimensionCalculator.getMaxDimension([this.chartData.title], this.chartConfig.titleFontSize);\n    const widthRequired = Math.max(titleDimension.width, availableSpace.width);\n    const heightRequired = titleDimension.height + 2 * this.chartConfig.titlePadding;\n    if (titleDimension.width <= widthRequired && titleDimension.height <= heightRequired && this.chartConfig.showTitle && this.chartData.title) {\n      this.boundingRect.width = widthRequired;\n      this.boundingRect.height = heightRequired;\n      this.showChartTitle = true;\n    }\n    return {\n      width: this.boundingRect.width,\n      height: this.boundingRect.height\n    };\n  }\n  getDrawableElements() {\n    const drawableElem = [];\n    if (this.showChartTitle) {\n      drawableElem.push({\n        groupTexts: [\"chart-title\"],\n        type: \"text\",\n        data: [{\n          fontSize: this.chartConfig.titleFontSize,\n          text: this.chartData.title,\n          verticalPos: \"middle\",\n          horizontalPos: \"center\",\n          x: this.boundingRect.x + this.boundingRect.width / 2,\n          y: this.boundingRect.y + this.boundingRect.height / 2,\n          fill: this.chartThemeConfig.titleColor,\n          rotation: 0\n        }]\n      });\n    }\n    return drawableElem;\n  }\n}\nfunction getChartTitleComponent(chartConfig, chartData, chartThemeConfig, tmpSVGGroup2) {\n  const textDimensionCalculator = new TextDimensionCalculatorWithFont(tmpSVGGroup2);\n  return new ChartTitle(textDimensionCalculator, chartConfig, chartData, chartThemeConfig);\n}\nclass LinePlot {\n  constructor(plotData, xAxis, yAxis, orientation, plotIndex2) {\n    this.plotData = plotData;\n    this.xAxis = xAxis;\n    this.yAxis = yAxis;\n    this.orientation = orientation;\n    this.plotIndex = plotIndex2;\n  }\n  getDrawableElement() {\n    const finalData = this.plotData.data.map(d => [this.xAxis.getScaleValue(d[0]), this.yAxis.getScaleValue(d[1])]);\n    let path;\n    if (this.orientation === \"horizontal\") {\n      path = line().y(d => d[0]).x(d => d[1])(finalData);\n    } else {\n      path = line().x(d => d[0]).y(d => d[1])(finalData);\n    }\n    if (!path) {\n      return [];\n    }\n    return [{\n      groupTexts: [\"plot\", \"line-plot-\".concat(this.plotIndex)],\n      type: \"path\",\n      data: [{\n        path,\n        strokeFill: this.plotData.strokeFill,\n        strokeWidth: this.plotData.strokeWidth\n      }]\n    }];\n  }\n}\nclass BarPlot {\n  constructor(barData, boundingRect, xAxis, yAxis, orientation, plotIndex2) {\n    this.barData = barData;\n    this.boundingRect = boundingRect;\n    this.xAxis = xAxis;\n    this.yAxis = yAxis;\n    this.orientation = orientation;\n    this.plotIndex = plotIndex2;\n  }\n  getDrawableElement() {\n    const finalData = this.barData.data.map(d => [this.xAxis.getScaleValue(d[0]), this.yAxis.getScaleValue(d[1])]);\n    const barPaddingPercent = 0.05;\n    const barWidth = Math.min(this.xAxis.getAxisOuterPadding() * 2, this.xAxis.getTickDistance()) * (1 - barPaddingPercent);\n    const barWidthHalf = barWidth / 2;\n    if (this.orientation === \"horizontal\") {\n      return [{\n        groupTexts: [\"plot\", \"bar-plot-\".concat(this.plotIndex)],\n        type: \"rect\",\n        data: finalData.map(data => ({\n          x: this.boundingRect.x,\n          y: data[0] - barWidthHalf,\n          height: barWidth,\n          width: data[1] - this.boundingRect.x,\n          fill: this.barData.fill,\n          strokeWidth: 0,\n          strokeFill: this.barData.fill\n        }))\n      }];\n    }\n    return [{\n      groupTexts: [\"plot\", \"bar-plot-\".concat(this.plotIndex)],\n      type: \"rect\",\n      data: finalData.map(data => ({\n        x: data[0] - barWidthHalf,\n        y: data[1],\n        width: barWidth,\n        height: this.boundingRect.y + this.boundingRect.height - data[1],\n        fill: this.barData.fill,\n        strokeWidth: 0,\n        strokeFill: this.barData.fill\n      }))\n    }];\n  }\n}\nclass BasePlot {\n  constructor(chartConfig, chartData, chartThemeConfig) {\n    this.chartConfig = chartConfig;\n    this.chartData = chartData;\n    this.chartThemeConfig = chartThemeConfig;\n    this.boundingRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  setAxes(xAxis, yAxis) {\n    this.xAxis = xAxis;\n    this.yAxis = yAxis;\n  }\n  setBoundingBoxXY(point) {\n    this.boundingRect.x = point.x;\n    this.boundingRect.y = point.y;\n  }\n  calculateSpace(availableSpace) {\n    this.boundingRect.width = availableSpace.width;\n    this.boundingRect.height = availableSpace.height;\n    return {\n      width: this.boundingRect.width,\n      height: this.boundingRect.height\n    };\n  }\n  getDrawableElements() {\n    if (!(this.xAxis && this.yAxis)) {\n      throw Error(\"Axes must be passed to render Plots\");\n    }\n    const drawableElem = [];\n    for (const [i, plot] of this.chartData.plots.entries()) {\n      switch (plot.type) {\n        case \"line\":\n          {\n            const linePlot = new LinePlot(plot, this.xAxis, this.yAxis, this.chartConfig.chartOrientation, i);\n            drawableElem.push(...linePlot.getDrawableElement());\n          }\n          break;\n        case \"bar\":\n          {\n            const barPlot = new BarPlot(plot, this.boundingRect, this.xAxis, this.yAxis, this.chartConfig.chartOrientation, i);\n            drawableElem.push(...barPlot.getDrawableElement());\n          }\n          break;\n      }\n    }\n    return drawableElem;\n  }\n}\nfunction getPlotComponent(chartConfig, chartData, chartThemeConfig) {\n  return new BasePlot(chartConfig, chartData, chartThemeConfig);\n}\nclass Orchestrator {\n  constructor(chartConfig, chartData, chartThemeConfig, tmpSVGGroup2) {\n    this.chartConfig = chartConfig;\n    this.chartData = chartData;\n    this.componentStore = {\n      title: getChartTitleComponent(chartConfig, chartData, chartThemeConfig, tmpSVGGroup2),\n      plot: getPlotComponent(chartConfig, chartData, chartThemeConfig),\n      xAxis: getAxis(chartData.xAxis, chartConfig.xAxis, {\n        titleColor: chartThemeConfig.xAxisTitleColor,\n        labelColor: chartThemeConfig.xAxisLabelColor,\n        tickColor: chartThemeConfig.xAxisTickColor,\n        axisLineColor: chartThemeConfig.xAxisLineColor\n      }, tmpSVGGroup2),\n      yAxis: getAxis(chartData.yAxis, chartConfig.yAxis, {\n        titleColor: chartThemeConfig.yAxisTitleColor,\n        labelColor: chartThemeConfig.yAxisLabelColor,\n        tickColor: chartThemeConfig.yAxisTickColor,\n        axisLineColor: chartThemeConfig.yAxisLineColor\n      }, tmpSVGGroup2)\n    };\n  }\n  calculateVerticalSpace() {\n    let availableWidth = this.chartConfig.width;\n    let availableHeight = this.chartConfig.height;\n    let plotX = 0;\n    let plotY = 0;\n    let chartWidth = Math.floor(availableWidth * this.chartConfig.plotReservedSpacePercent / 100);\n    let chartHeight = Math.floor(availableHeight * this.chartConfig.plotReservedSpacePercent / 100);\n    let spaceUsed = this.componentStore.plot.calculateSpace({\n      width: chartWidth,\n      height: chartHeight\n    });\n    availableWidth -= spaceUsed.width;\n    availableHeight -= spaceUsed.height;\n    spaceUsed = this.componentStore.title.calculateSpace({\n      width: this.chartConfig.width,\n      height: availableHeight\n    });\n    plotY = spaceUsed.height;\n    availableHeight -= spaceUsed.height;\n    this.componentStore.xAxis.setAxisPosition(\"bottom\");\n    spaceUsed = this.componentStore.xAxis.calculateSpace({\n      width: availableWidth,\n      height: availableHeight\n    });\n    availableHeight -= spaceUsed.height;\n    this.componentStore.yAxis.setAxisPosition(\"left\");\n    spaceUsed = this.componentStore.yAxis.calculateSpace({\n      width: availableWidth,\n      height: availableHeight\n    });\n    plotX = spaceUsed.width;\n    availableWidth -= spaceUsed.width;\n    if (availableWidth > 0) {\n      chartWidth += availableWidth;\n      availableWidth = 0;\n    }\n    if (availableHeight > 0) {\n      chartHeight += availableHeight;\n      availableHeight = 0;\n    }\n    this.componentStore.plot.calculateSpace({\n      width: chartWidth,\n      height: chartHeight\n    });\n    this.componentStore.plot.setBoundingBoxXY({\n      x: plotX,\n      y: plotY\n    });\n    this.componentStore.xAxis.setRange([plotX, plotX + chartWidth]);\n    this.componentStore.xAxis.setBoundingBoxXY({\n      x: plotX,\n      y: plotY + chartHeight\n    });\n    this.componentStore.yAxis.setRange([plotY, plotY + chartHeight]);\n    this.componentStore.yAxis.setBoundingBoxXY({\n      x: 0,\n      y: plotY\n    });\n    if (this.chartData.plots.some(p => isBarPlot(p))) {\n      this.componentStore.xAxis.recalculateOuterPaddingToDrawBar();\n    }\n  }\n  calculateHorizonatalSpace() {\n    let availableWidth = this.chartConfig.width;\n    let availableHeight = this.chartConfig.height;\n    let titleYEnd = 0;\n    let plotX = 0;\n    let plotY = 0;\n    let chartWidth = Math.floor(availableWidth * this.chartConfig.plotReservedSpacePercent / 100);\n    let chartHeight = Math.floor(availableHeight * this.chartConfig.plotReservedSpacePercent / 100);\n    let spaceUsed = this.componentStore.plot.calculateSpace({\n      width: chartWidth,\n      height: chartHeight\n    });\n    availableWidth -= spaceUsed.width;\n    availableHeight -= spaceUsed.height;\n    spaceUsed = this.componentStore.title.calculateSpace({\n      width: this.chartConfig.width,\n      height: availableHeight\n    });\n    titleYEnd = spaceUsed.height;\n    availableHeight -= spaceUsed.height;\n    this.componentStore.xAxis.setAxisPosition(\"left\");\n    spaceUsed = this.componentStore.xAxis.calculateSpace({\n      width: availableWidth,\n      height: availableHeight\n    });\n    availableWidth -= spaceUsed.width;\n    plotX = spaceUsed.width;\n    this.componentStore.yAxis.setAxisPosition(\"top\");\n    spaceUsed = this.componentStore.yAxis.calculateSpace({\n      width: availableWidth,\n      height: availableHeight\n    });\n    availableHeight -= spaceUsed.height;\n    plotY = titleYEnd + spaceUsed.height;\n    if (availableWidth > 0) {\n      chartWidth += availableWidth;\n      availableWidth = 0;\n    }\n    if (availableHeight > 0) {\n      chartHeight += availableHeight;\n      availableHeight = 0;\n    }\n    this.componentStore.plot.calculateSpace({\n      width: chartWidth,\n      height: chartHeight\n    });\n    this.componentStore.plot.setBoundingBoxXY({\n      x: plotX,\n      y: plotY\n    });\n    this.componentStore.yAxis.setRange([plotX, plotX + chartWidth]);\n    this.componentStore.yAxis.setBoundingBoxXY({\n      x: plotX,\n      y: titleYEnd\n    });\n    this.componentStore.xAxis.setRange([plotY, plotY + chartHeight]);\n    this.componentStore.xAxis.setBoundingBoxXY({\n      x: 0,\n      y: plotY\n    });\n    if (this.chartData.plots.some(p => isBarPlot(p))) {\n      this.componentStore.xAxis.recalculateOuterPaddingToDrawBar();\n    }\n  }\n  calculateSpace() {\n    if (this.chartConfig.chartOrientation === \"horizontal\") {\n      this.calculateHorizonatalSpace();\n    } else {\n      this.calculateVerticalSpace();\n    }\n  }\n  getDrawableElement() {\n    this.calculateSpace();\n    const drawableElem = [];\n    this.componentStore.plot.setAxes(this.componentStore.xAxis, this.componentStore.yAxis);\n    for (const component of Object.values(this.componentStore)) {\n      drawableElem.push(...component.getDrawableElements());\n    }\n    return drawableElem;\n  }\n}\nclass XYChartBuilder {\n  static build(config, chartData, chartThemeConfig, tmpSVGGroup2) {\n    const orchestrator = new Orchestrator(config, chartData, chartThemeConfig, tmpSVGGroup2);\n    return orchestrator.getDrawableElement();\n  }\n}\nlet plotIndex = 0;\nlet tmpSVGGroup;\nlet xyChartConfig = getChartDefaultConfig();\nlet xyChartThemeConfig = getChartDefaultThemeConfig();\nlet xyChartData = getChartDefaultData();\nlet plotColorPalette = xyChartThemeConfig.plotColorPalette.split(\",\").map(color => color.trim());\nlet hasSetXAxis = false;\nlet hasSetYAxis = false;\nfunction getChartDefaultThemeConfig() {\n  const defaultThemeVariables = getThemeVariables();\n  const config = getConfig();\n  return cleanAndMerge(defaultThemeVariables.xyChart, config.themeVariables.xyChart);\n}\nfunction getChartDefaultConfig() {\n  const config = getConfig();\n  return cleanAndMerge(defaultConfig.xyChart, config.xyChart);\n}\nfunction getChartDefaultData() {\n  return {\n    yAxis: {\n      type: \"linear\",\n      title: \"\",\n      min: Infinity,\n      max: -Infinity\n    },\n    xAxis: {\n      type: \"band\",\n      title: \"\",\n      categories: []\n    },\n    title: \"\",\n    plots: []\n  };\n}\nfunction textSanitizer(text) {\n  const config = getConfig();\n  return sanitizeText(text.trim(), config);\n}\nfunction setTmpSVGG(SVGG) {\n  tmpSVGGroup = SVGG;\n}\nfunction setOrientation(orientation) {\n  if (orientation === \"horizontal\") {\n    xyChartConfig.chartOrientation = \"horizontal\";\n  } else {\n    xyChartConfig.chartOrientation = \"vertical\";\n  }\n}\nfunction setXAxisTitle(title) {\n  xyChartData.xAxis.title = textSanitizer(title.text);\n}\nfunction setXAxisRangeData(min, max) {\n  xyChartData.xAxis = {\n    type: \"linear\",\n    title: xyChartData.xAxis.title,\n    min,\n    max\n  };\n  hasSetXAxis = true;\n}\nfunction setXAxisBand(categories) {\n  xyChartData.xAxis = {\n    type: \"band\",\n    title: xyChartData.xAxis.title,\n    categories: categories.map(c => textSanitizer(c.text))\n  };\n  hasSetXAxis = true;\n}\nfunction setYAxisTitle(title) {\n  xyChartData.yAxis.title = textSanitizer(title.text);\n}\nfunction setYAxisRangeData(min, max) {\n  xyChartData.yAxis = {\n    type: \"linear\",\n    title: xyChartData.yAxis.title,\n    min,\n    max\n  };\n  hasSetYAxis = true;\n}\nfunction setYAxisRangeFromPlotData(data) {\n  const minValue = Math.min(...data);\n  const maxValue = Math.max(...data);\n  const prevMinValue = isLinearAxisData(xyChartData.yAxis) ? xyChartData.yAxis.min : Infinity;\n  const prevMaxValue = isLinearAxisData(xyChartData.yAxis) ? xyChartData.yAxis.max : -Infinity;\n  xyChartData.yAxis = {\n    type: \"linear\",\n    title: xyChartData.yAxis.title,\n    min: Math.min(prevMinValue, minValue),\n    max: Math.max(prevMaxValue, maxValue)\n  };\n}\nfunction transformDataWithoutCategory(data) {\n  let retData = [];\n  if (data.length === 0) {\n    return retData;\n  }\n  if (!hasSetXAxis) {\n    const prevMinValue = isLinearAxisData(xyChartData.xAxis) ? xyChartData.xAxis.min : Infinity;\n    const prevMaxValue = isLinearAxisData(xyChartData.xAxis) ? xyChartData.xAxis.max : -Infinity;\n    setXAxisRangeData(Math.min(prevMinValue, 1), Math.max(prevMaxValue, data.length));\n  }\n  if (!hasSetYAxis) {\n    setYAxisRangeFromPlotData(data);\n  }\n  if (isBandAxisData(xyChartData.xAxis)) {\n    retData = xyChartData.xAxis.categories.map((c, i) => [c, data[i]]);\n  }\n  if (isLinearAxisData(xyChartData.xAxis)) {\n    const min = xyChartData.xAxis.min;\n    const max = xyChartData.xAxis.max;\n    const step = (max - min + 1) / data.length;\n    const categories = [];\n    for (let i = min; i <= max; i += step) {\n      categories.push(\"\".concat(i));\n    }\n    retData = categories.map((c, i) => [c, data[i]]);\n  }\n  return retData;\n}\nfunction getPlotColorFromPalette(plotIndex2) {\n  return plotColorPalette[plotIndex2 === 0 ? 0 : plotIndex2 % plotColorPalette.length];\n}\nfunction setLineData(title, data) {\n  const plotData = transformDataWithoutCategory(data);\n  xyChartData.plots.push({\n    type: \"line\",\n    strokeFill: getPlotColorFromPalette(plotIndex),\n    strokeWidth: 2,\n    data: plotData\n  });\n  plotIndex++;\n}\nfunction setBarData(title, data) {\n  const plotData = transformDataWithoutCategory(data);\n  xyChartData.plots.push({\n    type: \"bar\",\n    fill: getPlotColorFromPalette(plotIndex),\n    data: plotData\n  });\n  plotIndex++;\n}\nfunction getDrawableElem() {\n  if (xyChartData.plots.length === 0) {\n    throw Error(\"No Plot to render, please provide a plot with some data\");\n  }\n  xyChartData.title = getDiagramTitle();\n  return XYChartBuilder.build(xyChartConfig, xyChartData, xyChartThemeConfig, tmpSVGGroup);\n}\nfunction getChartThemeConfig() {\n  return xyChartThemeConfig;\n}\nfunction getChartConfig() {\n  return xyChartConfig;\n}\nconst clear = function () {\n  clear$1();\n  plotIndex = 0;\n  xyChartConfig = getChartDefaultConfig();\n  xyChartData = getChartDefaultData();\n  xyChartThemeConfig = getChartDefaultThemeConfig();\n  plotColorPalette = xyChartThemeConfig.plotColorPalette.split(\",\").map(color => color.trim());\n  hasSetXAxis = false;\n  hasSetYAxis = false;\n};\nconst db = {\n  getDrawableElem,\n  clear,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n  setOrientation,\n  setXAxisTitle,\n  setXAxisRangeData,\n  setXAxisBand,\n  setYAxisTitle,\n  setYAxisRangeData,\n  setLineData,\n  setBarData,\n  setTmpSVGG,\n  getChartThemeConfig,\n  getChartConfig\n};\nconst draw = (txt, id, _version, diagObj) => {\n  const db2 = diagObj.db;\n  const themeConfig = db2.getChartThemeConfig();\n  const chartConfig = db2.getChartConfig();\n  function getDominantBaseLine(horizontalPos) {\n    return horizontalPos === \"top\" ? \"text-before-edge\" : \"middle\";\n  }\n  function getTextAnchor(verticalPos) {\n    return verticalPos === \"left\" ? \"start\" : verticalPos === \"right\" ? \"end\" : \"middle\";\n  }\n  function getTextTransformation(data) {\n    return \"translate(\".concat(data.x, \", \").concat(data.y, \") rotate(\").concat(data.rotation || 0, \")\");\n  }\n  log.debug(\"Rendering xychart chart\\n\" + txt);\n  const svg = selectSvgElement(id);\n  const group = svg.append(\"g\").attr(\"class\", \"main\");\n  const background = group.append(\"rect\").attr(\"width\", chartConfig.width).attr(\"height\", chartConfig.height).attr(\"class\", \"background\");\n  configureSvgSize(svg, chartConfig.height, chartConfig.width, true);\n  svg.attr(\"viewBox\", \"0 0 \".concat(chartConfig.width, \" \").concat(chartConfig.height));\n  background.attr(\"fill\", themeConfig.backgroundColor);\n  db2.setTmpSVGG(svg.append(\"g\").attr(\"class\", \"mermaid-tmp-group\"));\n  const shapes = db2.getDrawableElem();\n  const groups = {};\n  function getGroup(gList) {\n    let elem = group;\n    let prefix = \"\";\n    for (const [i] of gList.entries()) {\n      let parent = group;\n      if (i > 0 && groups[prefix]) {\n        parent = groups[prefix];\n      }\n      prefix += gList[i];\n      elem = groups[prefix];\n      if (!elem) {\n        elem = groups[prefix] = parent.append(\"g\").attr(\"class\", gList[i]);\n      }\n    }\n    return elem;\n  }\n  for (const shape of shapes) {\n    if (shape.data.length === 0) {\n      continue;\n    }\n    const shapeGroup = getGroup(shape.groupTexts);\n    switch (shape.type) {\n      case \"rect\":\n        shapeGroup.selectAll(\"rect\").data(shape.data).enter().append(\"rect\").attr(\"x\", data => data.x).attr(\"y\", data => data.y).attr(\"width\", data => data.width).attr(\"height\", data => data.height).attr(\"fill\", data => data.fill).attr(\"stroke\", data => data.strokeFill).attr(\"stroke-width\", data => data.strokeWidth);\n        break;\n      case \"text\":\n        shapeGroup.selectAll(\"text\").data(shape.data).enter().append(\"text\").attr(\"x\", 0).attr(\"y\", 0).attr(\"fill\", data => data.fill).attr(\"font-size\", data => data.fontSize).attr(\"dominant-baseline\", data => getDominantBaseLine(data.verticalPos)).attr(\"text-anchor\", data => getTextAnchor(data.horizontalPos)).attr(\"transform\", data => getTextTransformation(data)).text(data => data.text);\n        break;\n      case \"path\":\n        shapeGroup.selectAll(\"path\").data(shape.data).enter().append(\"path\").attr(\"d\", data => data.path).attr(\"fill\", data => data.fill ? data.fill : \"none\").attr(\"stroke\", data => data.strokeFill).attr(\"stroke-width\", data => data.strokeWidth);\n        break;\n    }\n  }\n};\nconst renderer = {\n  draw\n};\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer\n};\nexport { diagram };"],"sourceRoot":""}