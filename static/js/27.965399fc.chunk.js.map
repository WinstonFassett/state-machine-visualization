{"version":3,"sources":["../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/stateDiagram-59f0c015.js"],"names":["__webpack_require__","r","__webpack_exports__","d","diagram","_styles_9c745c82_js__WEBPACK_IMPORTED_MODULE_0__","d3__WEBPACK_IMPORTED_MODULE_1__","dagre_d3_es_src_dagre_index_js__WEBPACK_IMPORTED_MODULE_2__","dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_3__","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_4__","idCache","idCache$1","key","val","drawDescrState","g","stateDef","titleBox","append","attr","Object","state","padding","textHeight","fontSize","text","descriptions","node","getBBox","titleHeight","height","description","dividerMargin","isFirst","isSecond","forEach","descr","textEl","txt","isFirst2","tSpan","addTspan","descrLine","descrBox","width","Math","max","insert","radius","addTitleAndBox","altBkg","pad","dblPad","orgBox","orgWidth","orgX","x","title","titleShift","id","titleWidth","startX","graphBox","doc","abs","lineY","drawNote","note","rectElem","textWidth","_text","y","textElem","style","replace","lines","split","lineBreakRegex","tHeight","noteMargin","line2","trim","length","span","_drawLongText","drawState","elem","stateInfo","label","type","sizeUnit","drawStartState","miniPadding","drawEndState","forkWidth","forkHeight","parentId","tmp","drawForkJoinState","drawDivider","classBox","drawSimpleState","stateBox","edgeCount","conf","transformationLog","renderDoc","diagram2","root","domDocument","diagObj","graph","compound","multigraph","i","edgeFreeDoc","stmt","setGraph","rankdir","ranker","ranksep","edgeLengthFactor","nodeSep","isMultiGraph","setDefaultEdgeLabel","db","extract","states","getStates","relations","getRelations","keys2","keys","sub","boxBounds","compositTitleSize","noteDef","position","setNode","setParent","debug","nodeCount","cnt","relation","setEdge","id1","id2","fontSizeFactor","labelHeight","getRows","labelpos","nodes","svgElem","v","warn","JSON","stringify","select","querySelectorAll","divider","parent","parentElement","pWidth","pShift","parseInt","getAttribute","Number","isNaN","setAttribute","edges","e","edge","w","path","points","filter","p","lineData","lineFunction","curve","svgPath","url","arrowMarkerAbsolute","window","location","protocol","host","pathname","search","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","getRelationType","calcLabelPosition","rows","titleRows","maxWidth","minX","boundstmp","min","info","push","boxHeight","heightAdj","bounds","drawEdge","renderer","setConf","draw","_version","securityLevel","sandboxElement","contentDocument","body","document","concat","rootDoc","getRootDoc","svgWidth","useMaxWidth","parser","styles","init","cnf","clear"],"mappings":"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","file":"static/js/27.965399fc.chunk.js","sourcesContent":["import { d as db, p as parser, s as styles } from \"./styles-9c745c82.js\";\nimport { line, curveBasis, select } from \"d3\";\nimport { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as getConfig, u as utils, e as common, l as log, i as configureSvgSize } from \"./mermaid-8af3addd.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nconst idCache = {};\nconst set = (key, val) => {\n  idCache[key] = val;\n};\nconst get = k => idCache[k];\nconst keys = () => Object.keys(idCache);\nconst size = () => keys().length;\nconst idCache$1 = {\n  get,\n  set,\n  keys,\n  size\n};\nconst drawStartState = g => g.append(\"circle\").attr(\"class\", \"start-state\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit);\nconst drawDivider = g => g.append(\"line\").style(\"stroke\", \"grey\").style(\"stroke-dasharray\", \"3\").attr(\"x1\", getConfig().state.textHeight).attr(\"class\", \"divider\").attr(\"x2\", getConfig().state.textHeight * 2).attr(\"y1\", 0).attr(\"y2\", 0);\nconst drawSimpleState = (g, stateDef) => {\n  const state = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 2 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const classBox = state.node().getBBox();\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", classBox.width + 2 * getConfig().state.padding).attr(\"height\", classBox.height + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return state;\n};\nconst drawDescrState = (g, stateDef) => {\n  const addTspan = function (textEl, txt, isFirst2) {\n    const tSpan = textEl.append(\"tspan\").attr(\"x\", 2 * getConfig().state.padding).text(txt);\n    if (!isFirst2) {\n      tSpan.attr(\"dy\", getConfig().state.textHeight);\n    }\n  };\n  const title = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 1.3 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.descriptions[0]);\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n  const description = g.append(\"text\").attr(\"x\", getConfig().state.padding).attr(\"y\", titleHeight + getConfig().state.padding * 0.4 + getConfig().state.dividerMargin + getConfig().state.textHeight).attr(\"class\", \"state-description\");\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function (descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n  const descrLine = g.append(\"line\").attr(\"x1\", getConfig().state.padding).attr(\"y1\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"y2\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"class\", \"descr-divider\");\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n  descrLine.attr(\"x2\", width + 3 * getConfig().state.padding);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", width + 2 * getConfig().state.padding).attr(\"height\", descrBox.height + titleHeight + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n  const title = g.append(\"text\").attr(\"x\", 0).attr(\"y\", getConfig().state.titleShift).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth);\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  const graphBox = g.node().getBBox();\n  if (stateDef.doc) ;\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n  const lineY = 1 - getConfig().state.textHeight;\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", lineY).attr(\"class\", altBkg ? \"alt-composit\" : \"composit\").attr(\"width\", width).attr(\"height\", graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1).attr(\"rx\", \"0\");\n  title.attr(\"x\", startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr(\"x\", orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding).attr(\"width\", width).attr(\"height\", getConfig().state.textHeight * 3).attr(\"rx\", getConfig().state.radius);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding).attr(\"width\", width).attr(\"height\", graphBox.height + 3 + 2 * getConfig().state.textHeight).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst drawEndState = g => {\n  g.append(\"circle\").attr(\"class\", \"end-state-outer\").attr(\"r\", getConfig().state.sizeUnit + getConfig().state.miniPadding).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding);\n  return g.append(\"circle\").attr(\"class\", \"end-state-inner\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit + 2).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit + 2);\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g.append(\"rect\").style(\"stroke\", \"black\").style(\"fill\", \"black\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding);\n};\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n  const textElem = g.append(\"text\");\n  textElem.style(\"text-anchor\", \"start\");\n  textElem.attr(\"class\", \"noteText\");\n  let text = _text.replace(/\\r\\n/g, \"<br/>\");\n  text = text.replace(/\\n/g, \"<br/>\");\n  const lines = text.split(common.lineBreakRegex);\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line2 of lines) {\n    const txt = line2.trim();\n    if (txt.length > 0) {\n      const span = textElem.append(\"tspan\");\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr(\"x\", x + getConfig().state.noteMargin);\n      span.attr(\"y\", y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return {\n    textWidth: textElem.node().getBBox().width,\n    textHeight\n  };\n};\nconst drawNote = (text, g) => {\n  g.attr(\"class\", \"state-note\");\n  const note = g.append(\"rect\").attr(\"x\", 0).attr(\"y\", getConfig().state.padding);\n  const rectElem = g.append(\"g\");\n  const {\n    textWidth,\n    textHeight\n  } = _drawLongText(text, 0, 0, rectElem);\n  note.attr(\"height\", textHeight + 2 * getConfig().state.noteMargin);\n  note.attr(\"width\", textWidth + getConfig().state.noteMargin * 2);\n  return note;\n};\nconst drawState = function (elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id,\n    label: stateDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"stateGroup\");\n  if (stateDef.type === \"start\") {\n    drawStartState(g);\n  }\n  if (stateDef.type === \"end\") {\n    drawEndState(g);\n  }\n  if (stateDef.type === \"fork\" || stateDef.type === \"join\") {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === \"note\") {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === \"divider\") {\n    drawDivider(g);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n  idCache$1.set(id, stateInfo);\n  return stateInfo;\n};\nlet edgeCount = 0;\nconst drawEdge = function (elem, path, relation) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case db.relationType.EXTENSION:\n        return \"extension\";\n      case db.relationType.COMPOSITION:\n        return \"composition\";\n      case db.relationType.DEPENDENCY:\n        return \"dependency\";\n    }\n  };\n  path.points = path.points.filter(p => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function (d) {\n    return d.x;\n  }).y(function (d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"transition\");\n  let url = \"\";\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  svgPath.attr(\"marker-end\", \"url(\" + url + \"#\" + getRelationType(db.relationType.DEPENDENCY) + \"End)\");\n  if (relation.title !== void 0) {\n    const label = elem.append(\"g\").attr(\"class\", \"stateLabel\");\n    const {\n      x,\n      y\n    } = utils.calcLabelPosition(path.points);\n    const rows = common.getRows(relation.title);\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label.append(\"text\").attr(\"text-anchor\", \"middle\").text(rows[i]).attr(\"x\", x).attr(\"y\", y + titleHeight);\n      const boundstmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundstmp.width);\n      minX = Math.min(minX, boundstmp.x);\n      log.info(boundstmp.x, x, y + titleHeight);\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info(\"Title height\", titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n      titleRows.forEach((title, i) => title.attr(\"y\", y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n    const bounds = label.node().getBBox();\n    label.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", x - maxWidth / 2 - getConfig().state.padding / 2).attr(\"y\", y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5).attr(\"width\", maxWidth + getConfig().state.padding).attr(\"height\", boxHeight + getConfig().state.padding);\n    log.info(bounds);\n  }\n  edgeCount++;\n};\nlet conf;\nconst transformationLog = {};\nconst setConf = function () {};\nconst insertMarkers = function (elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 19,7 L9,13 L14,7 L9,1 Z\");\n};\nconst draw = function (text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  log.debug(\"Rendering diagram \" + text);\n  const diagram2 = root.select(\"[id='\".concat(id, \"']\"));\n  insertMarkers(diagram2);\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram2, void 0, false, root, doc, diagObj);\n  const padding = conf.padding;\n  const bounds = diagram2.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram2, height, svgWidth, conf.useMaxWidth);\n  diagram2.attr(\"viewBox\", \"\".concat(bounds.x - conf.padding, \"  \").concat(bounds.y - conf.padding, \" \") + width + \" \" + height);\n};\nconst getLabelWidth = text => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\nconst renderDoc = (doc, diagram2, parentId, altBkg, root, domDocument, diagObj) => {\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true\n  });\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === \"relation\") {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n  if (parentId) {\n    graph.setGraph({\n      rankdir: \"LR\",\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: \"tight-tree\",\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: \"TB\",\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: \"tight-tree\",\n      // ranker: 'network-simplex'\n      isMultiGraph: true\n    });\n  }\n  graph.setDefaultEdgeLabel(function () {\n    return {};\n  });\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n  const keys2 = Object.keys(states);\n  for (const key of keys2) {\n    const stateDef = states[key];\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram2.append(\"g\").attr(\"id\", stateDef.id).attr(\"class\", \"stateGroup\");\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n      {\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = {\n          y: conf.compositTitleSize\n        };\n      }\n    } else {\n      node = drawState(diagram2, stateDef);\n    }\n    if (stateDef.note) {\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + \"-note\",\n        note: stateDef.note,\n        type: \"note\"\n      };\n      const note = drawState(diagram2, noteDef);\n      if (stateDef.note.position === \"left of\") {\n        graph.setNode(node.id + \"-note\", note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + \"-note\", note);\n      }\n      graph.setParent(node.id, node.id + \"-group\");\n      graph.setParent(node.id + \"-note\", node.id + \"-group\");\n    } else {\n      graph.setNode(node.id, node);\n    }\n  }\n  log.debug(\"Count=\", graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function (relation) {\n    cnt++;\n    log.debug(\"Setting edge\", relation);\n    graph.setEdge(relation.id1, relation.id2, {\n      relation,\n      width: getLabelWidth(relation.title),\n      height: conf.labelHeight * common.getRows(relation.title).length,\n      labelpos: \"c\"\n    }, \"id\" + cnt);\n  });\n  layout(graph);\n  log.debug(\"Graph after layout\", graph.nodes());\n  const svgElem = diagram2.node();\n  graph.nodes().forEach(function (v) {\n    if (v !== void 0 && graph.node(v) !== void 0) {\n      log.warn(\"Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"transform\", \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + \" )\");\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"data-x-shift\", graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll(\"#\" + svgElem.id + \" #\" + v + \" .divider\");\n      dividers.forEach(divider => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute(\"data-x-shift\"), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute(\"x1\", 0 - pShift + 8);\n        divider.setAttribute(\"x2\", pWidth - pShift - 8);\n      });\n    } else {\n      log.debug(\"No Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n    }\n  });\n  let stateBox = svgElem.getBBox();\n  graph.edges().forEach(function (e) {\n    if (e !== void 0 && graph.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram2, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n  stateBox = svgElem.getBBox();\n  const stateInfo = {\n    id: parentId ? parentId : \"root\",\n    label: parentId ? parentId : \"root\",\n    width: 0,\n    height: 0\n  };\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n  log.debug(\"Doc rendered\", stateInfo, graph);\n  return stateInfo;\n};\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: cnf => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport { diagram };"],"sourceRoot":""}