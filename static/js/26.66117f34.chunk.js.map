{"version":3,"sources":["../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/ascending.js","../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/bisect.js","../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/bisector.js","../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/cross.js","../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/array.js","../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/ticks.js","../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/threshold/sturges.js","../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/max.js","../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/min.js","../node_modules/.pnpm/d3-array@1.2.4/node_modules/d3-array/src/sum.js","../node_modules/.pnpm/d3-sankey@0.12.3/node_modules/d3-sankey/src/align.js","../node_modules/.pnpm/d3-sankey@0.12.3/node_modules/d3-sankey/src/constant.js","../node_modules/.pnpm/d3-sankey@0.12.3/node_modules/d3-sankey/src/sankey.js","../node_modules/.pnpm/d3-path@1.0.9/node_modules/d3-path/src/path.js","../node_modules/.pnpm/d3-shape@1.3.7/node_modules/d3-shape/src/array.js","../node_modules/.pnpm/d3-shape@1.3.7/node_modules/d3-shape/src/constant.js","../node_modules/.pnpm/d3-shape@1.3.7/node_modules/d3-shape/src/point.js","../node_modules/.pnpm/d3-shape@1.3.7/node_modules/d3-shape/src/link/index.js","../node_modules/.pnpm/d3-sankey@0.12.3/node_modules/d3-sankey/src/sankeyLinkHorizontal.js","../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/sankeyDiagram-8f13d901.js"],"names":["ascending","a","b","NaN","ascendingBisect","compare","f","length","d","x","left","lo","hi","mid","right","bisector","array_array","Array","prototype","slice","map","Math","sqrt","src_max","values","valueof","value","max","n","i","src_min","min","src_sum","sum","targetDepth","target","depth","justify","node","sourceLinks","constant_constant","ascendingSourceBreadth","ascendingBreadth","source","index","ascendingTargetBreadth","y0","sankey_value","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","id","get","Error","computeLinkBreadths","_ref","y1","link","width","targetLinks","Sankey","py","sort","linkSort","x0","x1","dx","dy","align","iterations","sankey","apply","arguments","_ref2","entries","Map","push","computeNodeLinks","_ref3","undefined","fixedValue","computeNodeValues","_ref4","current","Set","next","size","add","computeNodeDepths","_ref5","height","computeNodeHeights","columns","_ref6","kx","floor","call","layer","column","computeNodeLayers","c","ky","y","reorderLinks","initializeNodeBreadths","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","computeNodeBreadths","w","v","targetTop","reorderNodeLinks","resolveCollisions","sourceTop","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","_ref7","update","nodeId","_","nodeAlign","nodeSort","nodeWidth","nodePadding","extent","pi","PI","tau","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","path","constructor","moveTo","closePath","lineTo","quadraticCurveTo","bezierCurveTo","x2","y2","arcTo","r","x21","y21","x01","y01","l01_2","abs","x20","y20","l21_2","l20_2","l21","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","cos","sin","cw","da","rect","h","toString","src_path","array_slice","src_constant","point_x","p","point_y","linkSource","linkTarget","link_link","curve","context","buffer","argv","s","t","curveHorizontal","horizontalSource","horizontalTarget","sankeyLinkHorizontal","__webpack_require__","__webpack_exports__","diagram","parser","o","k","o2","$V0","$V1","$V2","parser2","trace","yy","symbols_","error","start","SANKEY","NEWLINE","csv","opt_eof","record","csv_tail","EOF","field[source]","COMMA","field[target]","field[value]","field","escaped","non_escaped","DQUOTE","ESCAPED_TEXT","NON_ESCAPED_TEXT","$accept","$end","terminals_","2","4","5","10","11","12","13","14","18","19","20","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","findOrCreateNode","trim","replaceAll","parseFloat","addLink","$","table","3","1","6","8","15","16","17","7","9","defaultActions","parseError","str","hash","recoverable","parse","input","self","stack","tstack","vstack","lstack","args","lexer2","Object","create","lexer","sharedState","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","lex","token","pop","getPrototypeOf","symbol","state","action","len","newState","expected","yyval","errStr","showPosition","join","text","match","line","loc","first_line","last_line","first_column","last_column","range","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","pre","test_match","indexed_rule","backup","matches","tempMatch","rules","_currentRules","flex","begin","condition","popState","conditions","topState","pushState","stateStackSize","easy_keword_rules","yy_","$avoiding_name_collisions","YY_START","inclusive","escaped_text","INITIAL","Parser","parser$1","sankeyDiagram_8f13d901_links","sankeyDiagram_8f13d901_nodes","nodesMap","SankeyLink","[object Object]","SankeyNode","ID","db","getConfig","mermaid_8af3addd","getNodes","getLinks","getGraph","sanitizeText","getAccTitle","setAccTitle","getAccDescription","setAccDescription","getDiagramTitle","setDiagramTitle","clear","_Uid","_Uid2","name","count","href","Uid","alignmentsMap","center","renderer","draw","_version","diagObj","securityLevel","conf","defaultSankeyConfig","sandboxElement","src","root","contentDocument","body","svg","select","useMaxWidth","nodeAlignment","prefix","suffix","showValues","sankey$1","colorScheme","append","attr","selectAll","data","uid","_ref8","id2","round","style","linkColor","gradient","coloring","originalParse","bind","prepareTextForParsing"],"mappings":"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","file":"static/js/26.66117f34.chunk.js","sourcesContent":["export default function (a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;","import ascending from \"./ascending\";\nexport default function (compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function (a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n      return lo;\n    },\n    right: function (a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending(f(d), x);\n  };\n}","import { pair } from \"./pairs\";\nexport default function (values0, values1, reduce) {\n  var n0 = values0.length,\n    n1 = values1.length,\n    values = new Array(n0 * n1),\n    i0,\n    i1,\n    i,\n    value0;\n  if (reduce == null) reduce = pair;\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n  return values;\n}","var array = Array.prototype;\nexport var slice = array.slice;\nexport var map = array.map;","var e10 = Math.sqrt(50),\n  e5 = Math.sqrt(10),\n  e2 = Math.sqrt(2);\nexport default function (start, stop, count) {\n  var reverse,\n    i = -1,\n    n,\n    ticks,\n    step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n  if (reverse) ticks.reverse();\n  return ticks;\n}\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n    power = Math.floor(Math.log(step) / Math.LN10),\n    error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n    step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n    error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}","export default function (values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}","export default function (values, valueof) {\n  var n = values.length,\n    i = -1,\n    value,\n    max;\n  if (valueof == null) {\n    while (++i < n) {\n      // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        max = value;\n        while (++i < n) {\n          // Compare the remaining values.\n          if ((value = values[i]) != null && value > max) {\n            max = value;\n          }\n        }\n      }\n    }\n  } else {\n    while (++i < n) {\n      // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        max = value;\n        while (++i < n) {\n          // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null && value > max) {\n            max = value;\n          }\n        }\n      }\n    }\n  }\n  return max;\n}","export default function (values, valueof) {\n  var n = values.length,\n    i = -1,\n    value,\n    min;\n  if (valueof == null) {\n    while (++i < n) {\n      // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        min = value;\n        while (++i < n) {\n          // Compare the remaining values.\n          if ((value = values[i]) != null && min > value) {\n            min = value;\n          }\n        }\n      }\n    }\n  } else {\n    while (++i < n) {\n      // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        min = value;\n        while (++i < n) {\n          // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null && min > value) {\n            min = value;\n          }\n        }\n      }\n    }\n  }\n  return min;\n}","export default function (values, valueof) {\n  var n = values.length,\n    i = -1,\n    value,\n    sum = 0;\n  if (valueof == null) {\n    while (++i < n) {\n      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.\n    }\n  } else {\n    while (++i < n) {\n      if (value = +valueof(values[i], i, values)) sum += value;\n    }\n  }\n  return sum;\n}","import { min } from \"d3-array\";\nfunction targetDepth(d) {\n  return d.target.depth;\n}\nexport function left(node) {\n  return node.depth;\n}\nexport function right(node, n) {\n  return n - 1 - node.height;\n}\nexport function justify(node, n) {\n  return node.sourceLinks.length ? node.depth : n - 1;\n}\nexport function center(node) {\n  return node.targetLinks.length ? node.depth : node.sourceLinks.length ? min(node.sourceLinks, targetDepth) - 1 : 0;\n}","export default function constant(x) {\n  return function () {\n    return x;\n  };\n}","import { max, min, sum } from \"d3-array\";\nimport { justify } from \"./align.js\";\nimport constant from \"./constant.js\";\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\nfunction value(d) {\n  return d.value;\n}\nfunction defaultId(d) {\n  return d.index;\n}\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\nfunction defaultLinks(graph) {\n  return graph.links;\n}\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\nfunction computeLinkBreadths(_ref) {\n  let {\n    nodes\n  } = _ref;\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\nexport default function Sankey() {\n  let x0 = 0,\n    y0 = 0,\n    x1 = 1,\n    y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8,\n    py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n  function sankey() {\n    const graph = {\n      nodes: nodes.apply(null, arguments),\n      links: links.apply(null, arguments)\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n  sankey.nodeId = function (_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n  sankey.nodeSort = function (_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n  sankey.nodePadding = function (_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n  sankey.nodes = function (_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n  sankey.links = function (_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n  sankey.linkSort = function (_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n  sankey.size = function (_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n  sankey.extent = function (_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n  sankey.iterations = function (_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n  function computeNodeLinks(_ref2) {\n    let {\n      nodes,\n      links\n    } = _ref2;\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {\n        source,\n        target\n      } = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {\n        sourceLinks,\n        targetLinks\n      } of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n  function computeNodeValues(_ref3) {\n    let {\n      nodes\n    } = _ref3;\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value)) : node.fixedValue;\n    }\n  }\n  function computeNodeDepths(_ref4) {\n    let {\n      nodes\n    } = _ref4;\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {\n          target\n        } of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set();\n    }\n  }\n  function computeNodeHeights(_ref5) {\n    let {\n      nodes\n    } = _ref5;\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {\n          source\n        } of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set();\n    }\n  }\n  function computeNodeLayers(_ref6) {\n    let {\n      nodes\n    } = _ref6;\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {\n          source,\n          value\n        } of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {\n          target,\n          value\n        } of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n  function reorderNodeLinks(_ref7) {\n    let {\n      sourceLinks,\n      targetLinks\n    } = _ref7;\n    if (linkSort === undefined) {\n      for (const {\n        source: {\n          sourceLinks\n        }\n      } of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {\n        target: {\n          targetLinks\n        }\n      } of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {\n        sourceLinks,\n        targetLinks\n      } of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    let y = source.y0 - (source.sourceLinks.length - 1) * py / 2;\n    for (const {\n      target: node,\n      width\n    } of source.sourceLinks) {\n      if (node === target) break;\n      y += width + py;\n    }\n    for (const {\n      source: node,\n      width\n    } of target.targetLinks) {\n      if (node === source) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    let y = target.y0 - (target.targetLinks.length - 1) * py / 2;\n    for (const {\n      source: node,\n      width\n    } of target.targetLinks) {\n      if (node === source) break;\n      y += width + py;\n    }\n    for (const {\n      target: node,\n      width\n    } of source.sourceLinks) {\n      if (node === target) break;\n      y -= width;\n    }\n    return y;\n  }\n  return sankey;\n}","var pi = Math.PI,\n  tau = 2 * pi,\n  epsilon = 1e-6,\n  tauEpsilon = tau - epsilon;\nfunction Path() {\n  this._x0 = this._y0 =\n  // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\nfunction path() {\n  return new Path();\n}\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function (x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function () {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function (x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function (x1, y1, x, y) {\n    this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function (x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function (x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n      y0 = this._y1,\n      x21 = x2 - x1,\n      y21 = y2 - y1,\n      x01 = x0 - x1,\n      y01 = y0 - y1,\n      l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) ;\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n        y20 = y2 - y0,\n        l21_2 = x21 * x21 + y21 * y21,\n        l20_2 = x20 * x20 + y20 * y20,\n        l21 = Math.sqrt(l21_2),\n        l01 = Math.sqrt(l01_2),\n        l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n        t01 = l / l01,\n        t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function (x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n      dy = r * Math.sin(a0),\n      x0 = x + dx,\n      y0 = y + dy,\n      cw = 1 ^ ccw,\n      da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function (x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n  },\n  toString: function () {\n    return this._;\n  }\n};\nexport default path;","export var slice = Array.prototype.slice;","export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","export function x(p) {\n  return p[0];\n}\nexport function y(p) {\n  return p[1];\n}","import { path } from \"d3-path\";\nimport { slice } from \"../array.js\";\nimport constant from \"../constant.js\";\nimport { x as pointX, y as pointY } from \"../point.js\";\nimport pointRadial from \"../pointRadial.js\";\nfunction linkSource(d) {\n  return d.source;\n}\nfunction linkTarget(d) {\n  return d.target;\n}\nfunction link(curve) {\n  var source = linkSource,\n    target = linkTarget,\n    x = pointX,\n    y = pointY,\n    context = null;\n  function link() {\n    var buffer,\n      argv = slice.call(arguments),\n      s = source.apply(this, argv),\n      t = target.apply(this, argv);\n    if (!context) context = buffer = path();\n    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n  link.source = function (_) {\n    return arguments.length ? (source = _, link) : source;\n  };\n  link.target = function (_) {\n    return arguments.length ? (target = _, link) : target;\n  };\n  link.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), link) : x;\n  };\n  link.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), link) : y;\n  };\n  link.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, link) : context;\n  };\n  return link;\n}\nfunction curveHorizontal(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);\n}\nfunction curveVertical(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);\n}\nfunction curveRadial(context, x0, y0, x1, y1) {\n  var p0 = pointRadial(x0, y0),\n    p1 = pointRadial(x0, y0 = (y0 + y1) / 2),\n    p2 = pointRadial(x1, y0),\n    p3 = pointRadial(x1, y1);\n  context.moveTo(p0[0], p0[1]);\n  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n}\nexport function linkHorizontal() {\n  return link(curveHorizontal);\n}\nexport function linkVertical() {\n  return link(curveVertical);\n}\nexport function linkRadial() {\n  var l = link(curveRadial);\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n  return l;\n}","import { linkHorizontal } from \"d3-shape\";\nfunction horizontalSource(d) {\n  return [d.source.x1, d.y0];\n}\nfunction horizontalTarget(d) {\n  return [d.target.x0, d.y1];\n}\nexport default function () {\n  return linkHorizontal().source(horizontalSource).target(horizontalTarget);\n}","import { c as getConfig, g as getAccTitle, s as setAccTitle, a as getAccDescription, b as setAccDescription, r as getDiagramTitle, q as setDiagramTitle, t as clear$1, e as common, I as defaultConfig, i as configureSvgSize } from \"./mermaid-8af3addd.js\";\nimport { select, scaleOrdinal, schemeTableau10 } from \"d3\";\nimport { sankey, sankeyLinkHorizontal, sankeyLeft, sankeyRight, sankeyCenter, sankeyJustify } from \"d3-sankey\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function () {\n  var o = function (k, v, o2, l) {\n      for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n      return o2;\n    },\n    $V0 = [1, 9],\n    $V1 = [1, 10],\n    $V2 = [1, 5, 10, 12];\n  var parser2 = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"start\": 3,\n      \"SANKEY\": 4,\n      \"NEWLINE\": 5,\n      \"csv\": 6,\n      \"opt_eof\": 7,\n      \"record\": 8,\n      \"csv_tail\": 9,\n      \"EOF\": 10,\n      \"field[source]\": 11,\n      \"COMMA\": 12,\n      \"field[target]\": 13,\n      \"field[value]\": 14,\n      \"field\": 15,\n      \"escaped\": 16,\n      \"non_escaped\": 17,\n      \"DQUOTE\": 18,\n      \"ESCAPED_TEXT\": 19,\n      \"NON_ESCAPED_TEXT\": 20,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      4: \"SANKEY\",\n      5: \"NEWLINE\",\n      10: \"EOF\",\n      11: \"field[source]\",\n      12: \"COMMA\",\n      13: \"field[target]\",\n      14: \"field[value]\",\n      18: \"DQUOTE\",\n      19: \"ESCAPED_TEXT\",\n      20: \"NON_ESCAPED_TEXT\"\n    },\n    productions_: [0, [3, 4], [6, 2], [9, 2], [9, 0], [7, 1], [7, 0], [8, 5], [15, 1], [15, 1], [16, 3], [17, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 7:\n          const source = yy.findOrCreateNode($$[$0 - 4].trim().replaceAll('\"\"', '\"'));\n          const target = yy.findOrCreateNode($$[$0 - 2].trim().replaceAll('\"\"', '\"'));\n          const value = parseFloat($$[$0].trim());\n          yy.addLink(source, target, value);\n          break;\n        case 8:\n        case 9:\n        case 11:\n          this.$ = $$[$0];\n          break;\n        case 10:\n          this.$ = $$[$0 - 1];\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: [1, 2]\n    }, {\n      1: [3]\n    }, {\n      5: [1, 3]\n    }, {\n      6: 4,\n      8: 5,\n      15: 6,\n      16: 7,\n      17: 8,\n      18: $V0,\n      20: $V1\n    }, {\n      1: [2, 6],\n      7: 11,\n      10: [1, 12]\n    }, o($V1, [2, 4], {\n      9: 13,\n      5: [1, 14]\n    }), {\n      12: [1, 15]\n    }, o($V2, [2, 8]), o($V2, [2, 9]), {\n      19: [1, 16]\n    }, o($V2, [2, 11]), {\n      1: [2, 1]\n    }, {\n      1: [2, 5]\n    }, o($V1, [2, 2]), {\n      6: 17,\n      8: 5,\n      15: 6,\n      16: 7,\n      17: 8,\n      18: $V0,\n      20: $V1\n    }, {\n      15: 18,\n      16: 7,\n      17: 8,\n      18: $V0,\n      20: $V1\n    }, {\n      18: [1, 19]\n    }, o($V1, [2, 3]), {\n      12: [1, 20]\n    }, o($V2, [2, 10]), {\n      15: 21,\n      16: 7,\n      17: 8,\n      18: $V0,\n      20: $V1\n    }, o([1, 5, 10], [2, 7])],\n    defaultActions: {\n      11: [2, 1],\n      12: [2, 5]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = \"\",\n        yylineno = 0,\n        yyleng = 0,\n        TERROR = 2,\n        EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol,\n        state,\n        action,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function () {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {\n        \"easy_keword_rules\": true\n      },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            this.pushState(\"csv\");\n            return 4;\n          case 1:\n            return 10;\n          case 2:\n            return 5;\n          case 3:\n            return 12;\n          case 4:\n            this.pushState(\"escaped_text\");\n            return 18;\n          case 5:\n            return 20;\n          case 6:\n            this.popState(\"escaped_text\");\n            return 18;\n          case 7:\n            return 19;\n        }\n      },\n      rules: [/^(?:sankey-beta\\b)/, /^(?:$)/, /^(?:((\\u000D\\u000A)|(\\u000A)))/, /^(?:(\\u002C))/, /^(?:(\\u0022))/, /^(?:([\\u0020-\\u0021\\u0023-\\u002B\\u002D-\\u007E])*)/, /^(?:(\\u0022)(?!(\\u0022)))/, /^(?:(([\\u0020-\\u0021\\u0023-\\u002B\\u002D-\\u007E])|(\\u002C)|(\\u000D)|(\\u000A)|(\\u0022)(\\u0022))*)/],\n      conditions: {\n        \"csv\": {\n          \"rules\": [1, 2, 3, 4, 5, 6, 7],\n          \"inclusive\": false\n        },\n        \"escaped_text\": {\n          \"rules\": [6, 7],\n          \"inclusive\": false\n        },\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet links = [];\nlet nodes = [];\nlet nodesMap = {};\nconst clear = () => {\n  links = [];\n  nodes = [];\n  nodesMap = {};\n  clear$1();\n};\nclass SankeyLink {\n  constructor(source, target) {\n    let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.source = source;\n    this.target = target;\n    this.value = value;\n  }\n}\nconst addLink = (source, target, value) => {\n  links.push(new SankeyLink(source, target, value));\n};\nclass SankeyNode {\n  constructor(ID) {\n    this.ID = ID;\n  }\n}\nconst findOrCreateNode = ID => {\n  ID = common.sanitizeText(ID, getConfig());\n  if (!nodesMap[ID]) {\n    nodesMap[ID] = new SankeyNode(ID);\n    nodes.push(nodesMap[ID]);\n  }\n  return nodesMap[ID];\n};\nconst getNodes = () => nodes;\nconst getLinks = () => links;\nconst getGraph = () => ({\n  nodes: nodes.map(node => ({\n    id: node.ID\n  })),\n  links: links.map(link => ({\n    source: link.source.ID,\n    target: link.target.ID,\n    value: link.value\n  }))\n});\nconst db = {\n  nodesMap,\n  getConfig: () => getConfig().sankey,\n  getNodes,\n  getLinks,\n  getGraph,\n  addLink,\n  findOrCreateNode,\n  getAccTitle,\n  setAccTitle,\n  getAccDescription,\n  setAccDescription,\n  getDiagramTitle,\n  setDiagramTitle,\n  clear\n};\nconst _Uid = class _Uid2 {\n  static next(name) {\n    return new _Uid2(name + ++_Uid2.count);\n  }\n  constructor(id) {\n    this.id = id;\n    this.href = \"#\".concat(id);\n  }\n  toString() {\n    return \"url(\" + this.href + \")\";\n  }\n};\n_Uid.count = 0;\nlet Uid = _Uid;\nconst alignmentsMap = {\n  left: sankeyLeft,\n  right: sankeyRight,\n  center: sankeyCenter,\n  justify: sankeyJustify\n};\nconst draw = function (text, id, _version, diagObj) {\n  var _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;\n  const {\n    securityLevel,\n    sankey: conf\n  } = getConfig();\n  const defaultSankeyConfig = defaultConfig.sankey;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = securityLevel === \"sandbox\" ? root.select(\"[id=\\\"\".concat(id, \"\\\"]\")) : select(\"[id=\\\"\".concat(id, \"\\\"]\"));\n  const width = (_ref = conf == null ? void 0 : conf.width) !== null && _ref !== void 0 ? _ref : defaultSankeyConfig.width;\n  const height = (_ref2 = conf == null ? void 0 : conf.height) !== null && _ref2 !== void 0 ? _ref2 : defaultSankeyConfig.width;\n  const useMaxWidth = (_ref3 = conf == null ? void 0 : conf.useMaxWidth) !== null && _ref3 !== void 0 ? _ref3 : defaultSankeyConfig.useMaxWidth;\n  const nodeAlignment = (_ref4 = conf == null ? void 0 : conf.nodeAlignment) !== null && _ref4 !== void 0 ? _ref4 : defaultSankeyConfig.nodeAlignment;\n  const prefix = (_ref5 = conf == null ? void 0 : conf.prefix) !== null && _ref5 !== void 0 ? _ref5 : defaultSankeyConfig.prefix;\n  const suffix = (_ref6 = conf == null ? void 0 : conf.suffix) !== null && _ref6 !== void 0 ? _ref6 : defaultSankeyConfig.suffix;\n  const showValues = (_ref7 = conf == null ? void 0 : conf.showValues) !== null && _ref7 !== void 0 ? _ref7 : defaultSankeyConfig.showValues;\n  configureSvgSize(svg, height, width, useMaxWidth);\n  const graph = diagObj.db.getGraph();\n  const nodeAlign = alignmentsMap[nodeAlignment];\n  const nodeWidth = 10;\n  const sankey$1 = sankey().nodeId(d => d.id).nodeWidth(nodeWidth).nodePadding(10 + (showValues ? 15 : 0)).nodeAlign(nodeAlign).extent([[0, 0], [width, height]]);\n  sankey$1(graph);\n  const colorScheme = scaleOrdinal(schemeTableau10);\n  svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\".node\").data(graph.nodes).join(\"g\").attr(\"class\", \"node\").attr(\"id\", d => (d.uid = Uid.next(\"node-\")).id).attr(\"transform\", function (d) {\n    return \"translate(\" + d.x0 + \",\" + d.y0 + \")\";\n  }).attr(\"x\", d => d.x0).attr(\"y\", d => d.y0).append(\"rect\").attr(\"height\", d => {\n    return d.y1 - d.y0;\n  }).attr(\"width\", d => d.x1 - d.x0).attr(\"fill\", d => colorScheme(d.id));\n  const getText = _ref8 => {\n    let {\n      id: id2,\n      value\n    } = _ref8;\n    if (!showValues) {\n      return id2;\n    }\n    return \"\".concat(id2, \"\\n\").concat(prefix).concat(Math.round(value * 100) / 100).concat(suffix);\n  };\n  svg.append(\"g\").attr(\"class\", \"node-labels\").attr(\"font-family\", \"sans-serif\").attr(\"font-size\", 14).selectAll(\"text\").data(graph.nodes).join(\"text\").attr(\"x\", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6).attr(\"y\", d => (d.y1 + d.y0) / 2).attr(\"dy\", \"\".concat(showValues ? \"0\" : \"0.35\", \"em\")).attr(\"text-anchor\", d => d.x0 < width / 2 ? \"start\" : \"end\").text(getText);\n  const link = svg.append(\"g\").attr(\"class\", \"links\").attr(\"fill\", \"none\").attr(\"stroke-opacity\", 0.5).selectAll(\".link\").data(graph.links).join(\"g\").attr(\"class\", \"link\").style(\"mix-blend-mode\", \"multiply\");\n  const linkColor = (conf == null ? void 0 : conf.linkColor) || \"gradient\";\n  if (linkColor === \"gradient\") {\n    const gradient = link.append(\"linearGradient\").attr(\"id\", d => (d.uid = Uid.next(\"linearGradient-\")).id).attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", d => d.source.x1).attr(\"x2\", d => d.target.x0);\n    gradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", d => colorScheme(d.source.id));\n    gradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", d => colorScheme(d.target.id));\n  }\n  let coloring;\n  switch (linkColor) {\n    case \"gradient\":\n      coloring = d => d.uid;\n      break;\n    case \"source\":\n      coloring = d => colorScheme(d.source.id);\n      break;\n    case \"target\":\n      coloring = d => colorScheme(d.target.id);\n      break;\n    default:\n      coloring = linkColor;\n  }\n  link.append(\"path\").attr(\"d\", sankeyLinkHorizontal()).attr(\"stroke\", coloring).attr(\"stroke-width\", d => Math.max(1, d.width));\n};\nconst renderer = {\n  draw\n};\nconst prepareTextForParsing = text => {\n  const textToParse = text.replaceAll(/^[^\\S\\n\\r]+|[^\\S\\n\\r]+$/g, \"\").replaceAll(/([\\n\\r])+/g, \"\\n\").trim();\n  return textToParse;\n};\nconst originalParse = parser$1.parse.bind(parser$1);\nparser$1.parse = text => originalParse(prepareTextForParsing(text));\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer\n};\nexport { diagram };"],"sourceRoot":""}