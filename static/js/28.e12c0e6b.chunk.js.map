{"version":3,"sources":["../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/timeline-definition-5b62e21b.js"],"names":["__webpack_require__","r","__webpack_exports__","d","diagram","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_0__","d3__WEBPACK_IMPORTED_MODULE_1__","khroma__WEBPACK_IMPORTED_MODULE_2__","khroma__WEBPACK_IMPORTED_MODULE_3__","khroma__WEBPACK_IMPORTED_MODULE_4__","parser","o","k","v","o2","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","parser2","trace","yy","symbols_","error","start","timeline","document","EOF","line","SPACE","statement","NEWLINE","title","acc_title","acc_title_value","acc_descr","acc_descr_value","acc_descr_multiline_value","section","period_statement","event_statement","period","event","$accept","$end","terminals_","2","4","6","8","10","11","12","13","14","15","16","17","20","21","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","this","$","push","getCommonDb","setDiagramTitle","substr","trim","setAccTitle","setAccDescription","addSection","addTask","addEvent","table","3","1","5","7","9","18","19","defaultActions","parseError","str","hash","recoverable","Error","parse","input","self","stack","tstack","vstack","lstack","args","slice","call","arguments","lexer2","Object","create","lexer","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","lex","token","pop","Array","getPrototypeOf","symbol","state","action","p","len","newState","expected","yyval","errStr","showPosition","join","text","match","loc","first_line","last_line","first_column","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","conditions","topState","Math","abs","pushState","stateStackSize","case-insensitive","yy_","$avoiding_name_collisions","YY_START","acc_descr_multiline","inclusive","INITIAL","Parser","parser$1","currentSection","currentTaskId","sections","tasks","rawTasks","clear","txt","getSections","getTasks","allItemsProcessed","compileTasks","iterationCount","rawTask","id","type","task","score","events","find","addTaskOrg","descr","newTask","description","classes","allProcessed","entries","processed","timelineDb","db","freeze","defineProperty","__proto__","default","Symbol","toStringTag","value","byText","content","g","x","y","width","height","textAttrs","colour","_setTextAttrs","append","attr","style","byTspan","conf","taskFontSize","taskFontFamily","dy","byFo","body","toText","fromTextAttrsDict","key","wrap","each","word","text2","words","reverse","parseFloat","tspan","j","node","getComputedTextLength","lineHeight","defaultBkg","elem","svgDraw","graphics","fullSection","nodeElem","class","bkgElem","textElem","bbox","getBBox","fontSize","padding","max","maxHeight","remove","drawTasks","diagram2","tasks2","sectionColor","masterX","masterY","maxTaskHeight","maxEventCount","maxEventLineLength","maxSectionHeight","isWithoutSections","_a","taskNode","number","debug","taskWrapper","taskHeight","lineWrapper","lineLength","drawEvents","disableMulticolor","maxEventHeight","eventBeginY","eventNode","eventWrapper","eventHeight","renderer","setConf","draw","version","diagObj","_conf$leftMargin","_ref","_ref2","_b","LEFT_MARGIN","leftMargin","securityLevel","sandboxElement","svg","nodes","contentDocument","select","getDiagramTitle","sections2","depthY","sectionBeginY","sectionNumber","hasSections","forEach","sectionHeight","maxEventLineLengthTemp","tasksForSection","filter","sectionNode","sectionNodeWrapper","box","useMaxWidth","styles","THEME_COLOR_LIMIT","sw","genSections","git0","gitBranchLabel0"],"mappings":"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","file":"static/js/28.e12c0e6b.chunk.js","sourcesContent":["import { K as commonDb, t as clear$1, c as getConfig, l as log, o as setupGraphViewbox } from \"./mermaid-8af3addd.js\";\nimport { select, arc } from \"d3\";\nimport { isDark, lighten, darken } from \"khroma\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function () {\n  var o = function (k, v, o2, l) {\n      for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n      return o2;\n    },\n    $V0 = [6, 8, 10, 11, 12, 14, 16, 17, 20, 21],\n    $V1 = [1, 9],\n    $V2 = [1, 10],\n    $V3 = [1, 11],\n    $V4 = [1, 12],\n    $V5 = [1, 13],\n    $V6 = [1, 16],\n    $V7 = [1, 17];\n  var parser2 = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"start\": 3,\n      \"timeline\": 4,\n      \"document\": 5,\n      \"EOF\": 6,\n      \"line\": 7,\n      \"SPACE\": 8,\n      \"statement\": 9,\n      \"NEWLINE\": 10,\n      \"title\": 11,\n      \"acc_title\": 12,\n      \"acc_title_value\": 13,\n      \"acc_descr\": 14,\n      \"acc_descr_value\": 15,\n      \"acc_descr_multiline_value\": 16,\n      \"section\": 17,\n      \"period_statement\": 18,\n      \"event_statement\": 19,\n      \"period\": 20,\n      \"event\": 21,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      4: \"timeline\",\n      6: \"EOF\",\n      8: \"SPACE\",\n      10: \"NEWLINE\",\n      11: \"title\",\n      12: \"acc_title\",\n      13: \"acc_title_value\",\n      14: \"acc_descr\",\n      15: \"acc_descr_value\",\n      16: \"acc_descr_multiline_value\",\n      17: \"section\",\n      20: \"period\",\n      21: \"event\"\n    },\n    productions_: [0, [3, 3], [5, 0], [5, 2], [7, 2], [7, 1], [7, 1], [7, 1], [9, 1], [9, 2], [9, 2], [9, 1], [9, 1], [9, 1], [9, 1], [18, 1], [19, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 1:\n          return $$[$0 - 1];\n        case 2:\n          this.$ = [];\n          break;\n        case 3:\n          $$[$0 - 1].push($$[$0]);\n          this.$ = $$[$0 - 1];\n          break;\n        case 4:\n        case 5:\n          this.$ = $$[$0];\n          break;\n        case 6:\n        case 7:\n          this.$ = [];\n          break;\n        case 8:\n          yy.getCommonDb().setDiagramTitle($$[$0].substr(6));\n          this.$ = $$[$0].substr(6);\n          break;\n        case 9:\n          this.$ = $$[$0].trim();\n          yy.getCommonDb().setAccTitle(this.$);\n          break;\n        case 10:\n        case 11:\n          this.$ = $$[$0].trim();\n          yy.getCommonDb().setAccDescription(this.$);\n          break;\n        case 12:\n          yy.addSection($$[$0].substr(8));\n          this.$ = $$[$0].substr(8);\n          break;\n        case 15:\n          yy.addTask($$[$0], 0, \"\");\n          this.$ = $$[$0];\n          break;\n        case 16:\n          yy.addEvent($$[$0].substr(2));\n          this.$ = $$[$0];\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: [1, 2]\n    }, {\n      1: [3]\n    }, o($V0, [2, 2], {\n      5: 3\n    }), {\n      6: [1, 4],\n      7: 5,\n      8: [1, 6],\n      9: 7,\n      10: [1, 8],\n      11: $V1,\n      12: $V2,\n      14: $V3,\n      16: $V4,\n      17: $V5,\n      18: 14,\n      19: 15,\n      20: $V6,\n      21: $V7\n    }, o($V0, [2, 7], {\n      1: [2, 1]\n    }), o($V0, [2, 3]), {\n      9: 18,\n      11: $V1,\n      12: $V2,\n      14: $V3,\n      16: $V4,\n      17: $V5,\n      18: 14,\n      19: 15,\n      20: $V6,\n      21: $V7\n    }, o($V0, [2, 5]), o($V0, [2, 6]), o($V0, [2, 8]), {\n      13: [1, 19]\n    }, {\n      15: [1, 20]\n    }, o($V0, [2, 11]), o($V0, [2, 12]), o($V0, [2, 13]), o($V0, [2, 14]), o($V0, [2, 15]), o($V0, [2, 16]), o($V0, [2, 4]), o($V0, [2, 9]), o($V0, [2, 10])],\n    defaultActions: {},\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = \"\",\n        yylineno = 0,\n        yyleng = 0,\n        TERROR = 2,\n        EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol,\n        state,\n        action,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function () {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {\n        \"case-insensitive\": true\n      },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            return 10;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            return 4;\n          case 6:\n            return 11;\n          case 7:\n            this.begin(\"acc_title\");\n            return 12;\n          case 8:\n            this.popState();\n            return \"acc_title_value\";\n          case 9:\n            this.begin(\"acc_descr\");\n            return 14;\n          case 10:\n            this.popState();\n            return \"acc_descr_value\";\n          case 11:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 12:\n            this.popState();\n            break;\n          case 13:\n            return \"acc_descr_multiline_value\";\n          case 14:\n            return 17;\n          case 15:\n            return 21;\n          case 16:\n            return 20;\n          case 17:\n            return 6;\n          case 18:\n            return \"INVALID\";\n        }\n      },\n      rules: [/^(?:%(?!\\{)[^\\n]*)/i, /^(?:[^\\}]%%[^\\n]*)/i, /^(?:[\\n]+)/i, /^(?:\\s+)/i, /^(?:#[^\\n]*)/i, /^(?:timeline\\b)/i, /^(?:title\\s[^#\\n;]+)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:section\\s[^#:\\n;]+)/i, /^(?::\\s[^#:\\n;]+)/i, /^(?:[^#:\\n;]+)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: {\n        \"acc_descr_multiline\": {\n          \"rules\": [12, 13],\n          \"inclusive\": false\n        },\n        \"acc_descr\": {\n          \"rules\": [10],\n          \"inclusive\": false\n        },\n        \"acc_title\": {\n          \"rules\": [8],\n          \"inclusive\": false\n        },\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 14, 15, 16, 17, 18],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet currentSection = \"\";\nlet currentTaskId = 0;\nconst sections = [];\nconst tasks = [];\nconst rawTasks = [];\nconst getCommonDb = () => commonDb;\nconst clear = function () {\n  sections.length = 0;\n  tasks.length = 0;\n  currentSection = \"\";\n  rawTasks.length = 0;\n  clear$1();\n};\nconst addSection = function (txt) {\n  currentSection = txt;\n  sections.push(txt);\n};\nconst getSections = function () {\n  return sections;\n};\nconst getTasks = function () {\n  let allItemsProcessed = compileTasks();\n  const maxDepth = 100;\n  let iterationCount = 0;\n  while (!allItemsProcessed && iterationCount < maxDepth) {\n    allItemsProcessed = compileTasks();\n    iterationCount++;\n  }\n  tasks.push(...rawTasks);\n  return tasks;\n};\nconst addTask = function (period, length, event) {\n  const rawTask = {\n    id: currentTaskId++,\n    section: currentSection,\n    type: currentSection,\n    task: period,\n    score: length ? length : 0,\n    //if event is defined, then add it the events array\n    events: event ? [event] : []\n  };\n  rawTasks.push(rawTask);\n};\nconst addEvent = function (event) {\n  const currentTask = rawTasks.find(task => task.id === currentTaskId - 1);\n  currentTask.events.push(event);\n};\nconst addTaskOrg = function (descr) {\n  const newTask = {\n    section: currentSection,\n    type: currentSection,\n    description: descr,\n    task: descr,\n    classes: []\n  };\n  tasks.push(newTask);\n};\nconst compileTasks = function () {\n  const compileTask = function (pos) {\n    return rawTasks[pos].processed;\n  };\n  let allProcessed = true;\n  for (const [i, rawTask] of rawTasks.entries()) {\n    compileTask(i);\n    allProcessed = allProcessed && rawTask.processed;\n  }\n  return allProcessed;\n};\nconst timelineDb = {\n  clear,\n  getCommonDb,\n  addSection,\n  getSections,\n  getTasks,\n  addTask,\n  addTaskOrg,\n  addEvent\n};\nconst db = /* @__PURE__ */Object.freeze( /* @__PURE__ */Object.defineProperty({\n  __proto__: null,\n  addEvent,\n  addSection,\n  addTask,\n  addTaskOrg,\n  clear,\n  default: timelineDb,\n  getCommonDb,\n  getSections,\n  getTasks\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nconst MAX_SECTIONS = 12;\nconst drawRect = function (elem, rectData) {\n  const rectElem = elem.append(\"rect\");\n  rectElem.attr(\"x\", rectData.x);\n  rectElem.attr(\"y\", rectData.y);\n  rectElem.attr(\"fill\", rectData.fill);\n  rectElem.attr(\"stroke\", rectData.stroke);\n  rectElem.attr(\"width\", rectData.width);\n  rectElem.attr(\"height\", rectData.height);\n  rectElem.attr(\"rx\", rectData.rx);\n  rectElem.attr(\"ry\", rectData.ry);\n  if (rectData.class !== void 0) {\n    rectElem.attr(\"class\", rectData.class);\n  }\n  return rectElem;\n};\nconst drawFace = function (element, faceData) {\n  const radius = 15;\n  const circleElement = element.append(\"circle\").attr(\"cx\", faceData.cx).attr(\"cy\", faceData.cy).attr(\"class\", \"face\").attr(\"r\", radius).attr(\"stroke-width\", 2).attr(\"overflow\", \"visible\");\n  const face = element.append(\"g\");\n  face.append(\"circle\").attr(\"cx\", faceData.cx - radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n  face.append(\"circle\").attr(\"cx\", faceData.cx + radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n  function smile(face2) {\n    const arc$1 = arc().startAngle(Math.PI / 2).endAngle(3 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n    face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 2) + \")\");\n  }\n  function sad(face2) {\n    const arc$1 = arc().startAngle(3 * Math.PI / 2).endAngle(5 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n    face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 7) + \")\");\n  }\n  function ambivalent(face2) {\n    face2.append(\"line\").attr(\"class\", \"mouth\").attr(\"stroke\", 2).attr(\"x1\", faceData.cx - 5).attr(\"y1\", faceData.cy + 7).attr(\"x2\", faceData.cx + 5).attr(\"y2\", faceData.cy + 7).attr(\"class\", \"mouth\").attr(\"stroke-width\", \"1px\").attr(\"stroke\", \"#666\");\n  }\n  if (faceData.score > 3) {\n    smile(face);\n  } else if (faceData.score < 3) {\n    sad(face);\n  } else {\n    ambivalent(face);\n  }\n  return circleElement;\n};\nconst drawCircle = function (element, circleData) {\n  const circleElement = element.append(\"circle\");\n  circleElement.attr(\"cx\", circleData.cx);\n  circleElement.attr(\"cy\", circleData.cy);\n  circleElement.attr(\"class\", \"actor-\" + circleData.pos);\n  circleElement.attr(\"fill\", circleData.fill);\n  circleElement.attr(\"stroke\", circleData.stroke);\n  circleElement.attr(\"r\", circleData.r);\n  if (circleElement.class !== void 0) {\n    circleElement.attr(\"class\", circleElement.class);\n  }\n  if (circleData.title !== void 0) {\n    circleElement.append(\"title\").text(circleData.title);\n  }\n  return circleElement;\n};\nconst drawText = function (elem, textData) {\n  const nText = textData.text.replace(/<br\\s*\\/?>/gi, \" \");\n  const textElem = elem.append(\"text\");\n  textElem.attr(\"x\", textData.x);\n  textElem.attr(\"y\", textData.y);\n  textElem.attr(\"class\", \"legend\");\n  textElem.style(\"text-anchor\", textData.anchor);\n  if (textData.class !== void 0) {\n    textElem.attr(\"class\", textData.class);\n  }\n  const span = textElem.append(\"tspan\");\n  span.attr(\"x\", textData.x + textData.textMargin * 2);\n  span.text(nText);\n  return textElem;\n};\nconst drawLabel = function (elem, txtObject) {\n  function genPoints(x, y, width, height, cut) {\n    return x + \",\" + y + \" \" + (x + width) + \",\" + y + \" \" + (x + width) + \",\" + (y + height - cut) + \" \" + (x + width - cut * 1.2) + \",\" + (y + height) + \" \" + x + \",\" + (y + height);\n  }\n  const polygon = elem.append(\"polygon\");\n  polygon.attr(\"points\", genPoints(txtObject.x, txtObject.y, 50, 20, 7));\n  polygon.attr(\"class\", \"labelBox\");\n  txtObject.y = txtObject.y + txtObject.labelMargin;\n  txtObject.x = txtObject.x + 0.5 * txtObject.labelMargin;\n  drawText(elem, txtObject);\n};\nconst drawSection = function (elem, section, conf) {\n  const g = elem.append(\"g\");\n  const rect = getNoteRect();\n  rect.x = section.x;\n  rect.y = section.y;\n  rect.fill = section.fill;\n  rect.width = conf.width;\n  rect.height = conf.height;\n  rect.class = \"journey-section section-type-\" + section.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n  _drawTextCandidateFunc(conf)(section.text, g, rect.x, rect.y, rect.width, rect.height, {\n    class: \"journey-section section-type-\" + section.num\n  }, conf, section.colour);\n};\nlet taskCount = -1;\nconst drawTask = function (elem, task, conf) {\n  const center = task.x + conf.width / 2;\n  const g = elem.append(\"g\");\n  taskCount++;\n  const maxHeight = 300 + 5 * 30;\n  g.append(\"line\").attr(\"id\", \"task\" + taskCount).attr(\"x1\", center).attr(\"y1\", task.y).attr(\"x2\", center).attr(\"y2\", maxHeight).attr(\"class\", \"task-line\").attr(\"stroke-width\", \"1px\").attr(\"stroke-dasharray\", \"4 2\").attr(\"stroke\", \"#666\");\n  drawFace(g, {\n    cx: center,\n    cy: 300 + (5 - task.score) * 30,\n    score: task.score\n  });\n  const rect = getNoteRect();\n  rect.x = task.x;\n  rect.y = task.y;\n  rect.fill = task.fill;\n  rect.width = conf.width;\n  rect.height = conf.height;\n  rect.class = \"task task-type-\" + task.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n  task.x + 14;\n  _drawTextCandidateFunc(conf)(task.task, g, rect.x, rect.y, rect.width, rect.height, {\n    class: \"task\"\n  }, conf, task.colour);\n};\nconst drawBackgroundRect = function (elem, bounds) {\n  const rectElem = drawRect(elem, {\n    x: bounds.startx,\n    y: bounds.starty,\n    width: bounds.stopx - bounds.startx,\n    height: bounds.stopy - bounds.starty,\n    fill: bounds.fill,\n    class: \"rect\"\n  });\n  rectElem.lower();\n};\nconst getTextObj = function () {\n  return {\n    x: 0,\n    y: 0,\n    fill: void 0,\n    \"text-anchor\": \"start\",\n    width: 100,\n    height: 100,\n    textMargin: 0,\n    rx: 0,\n    ry: 0\n  };\n};\nconst getNoteRect = function () {\n  return {\n    x: 0,\n    y: 0,\n    width: 100,\n    anchor: \"start\",\n    height: 100,\n    rx: 0,\n    ry: 0\n  };\n};\nconst _drawTextCandidateFunc = function () {\n  function byText(content, g, x, y, width, height, textAttrs, colour) {\n    const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y + height / 2 + 5).style(\"font-color\", colour).style(\"text-anchor\", \"middle\").text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n  function byTspan(content, g, x, y, width, height, textAttrs, conf, colour) {\n    const {\n      taskFontSize,\n      taskFontFamily\n    } = conf;\n    const lines = content.split(/<br\\s*\\/?>/gi);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * taskFontSize - taskFontSize * (lines.length - 1) / 2;\n      const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y).attr(\"fill\", colour).style(\"text-anchor\", \"middle\").style(\"font-size\", taskFontSize).style(\"font-family\", taskFontFamily);\n      text.append(\"tspan\").attr(\"x\", x + width / 2).attr(\"dy\", dy).text(lines[i]);\n      text.attr(\"y\", y + height / 2).attr(\"dominant-baseline\", \"central\").attr(\"alignment-baseline\", \"central\");\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n  function byFo(content, g, x, y, width, height, textAttrs, conf) {\n    const body = g.append(\"switch\");\n    const f = body.append(\"foreignObject\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height).attr(\"position\", \"fixed\");\n    const text = f.append(\"xhtml:div\").style(\"display\", \"table\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n    text.append(\"div\").attr(\"class\", \"label\").style(\"display\", \"table-cell\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").text(content);\n    byTspan(content, body, x, y, width, height, textAttrs, conf);\n    _setTextAttrs(text, textAttrs);\n  }\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (key in fromTextAttrsDict) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n  return function (conf) {\n    return conf.textPlacement === \"fo\" ? byFo : conf.textPlacement === \"old\" ? byText : byTspan;\n  };\n}();\nconst initGraphics = function (graphics) {\n  graphics.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 5).attr(\"refY\", 2).attr(\"markerWidth\", 6).attr(\"markerHeight\", 4).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 0,0 V 4 L6,2 Z\");\n};\nfunction wrap(text, width) {\n  text.each(function () {\n    var text2 = select(this),\n      words = text2.text().split(/(\\s+|<br>)/).reverse(),\n      word,\n      line = [],\n      lineHeight = 1.1,\n      y = text2.attr(\"y\"),\n      dy = parseFloat(text2.attr(\"dy\")),\n      tspan = text2.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n    for (let j = 0; j < words.length; j++) {\n      word = words[words.length - 1 - j];\n      line.push(word);\n      tspan.text(line.join(\" \").trim());\n      if (tspan.node().getComputedTextLength() > width || word === \"<br>\") {\n        line.pop();\n        tspan.text(line.join(\" \").trim());\n        if (word === \"<br>\") {\n          line = [\"\"];\n        } else {\n          line = [word];\n        }\n        tspan = text2.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", lineHeight + \"em\").text(word);\n      }\n    }\n  });\n}\nconst drawNode = function (elem, node, fullSection, conf) {\n  const section = fullSection % MAX_SECTIONS - 1;\n  const nodeElem = elem.append(\"g\");\n  node.section = section;\n  nodeElem.attr(\"class\", (node.class ? node.class + \" \" : \"\") + \"timeline-node \" + (\"section-\" + section));\n  const bkgElem = nodeElem.append(\"g\");\n  const textElem = nodeElem.append(\"g\");\n  const txt = textElem.append(\"text\").text(node.descr).attr(\"dy\", \"1em\").attr(\"alignment-baseline\", \"middle\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").call(wrap, node.width);\n  const bbox = txt.node().getBBox();\n  const fontSize = conf.fontSize && conf.fontSize.replace ? conf.fontSize.replace(\"px\", \"\") : conf.fontSize;\n  node.height = bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n  node.height = Math.max(node.height, node.maxHeight);\n  node.width = node.width + 2 * node.padding;\n  textElem.attr(\"transform\", \"translate(\" + node.width / 2 + \", \" + node.padding / 2 + \")\");\n  defaultBkg(bkgElem, node, section);\n  return node;\n};\nconst getVirtualNodeHeight = function (elem, node, conf) {\n  const textElem = elem.append(\"g\");\n  const txt = textElem.append(\"text\").text(node.descr).attr(\"dy\", \"1em\").attr(\"alignment-baseline\", \"middle\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").call(wrap, node.width);\n  const bbox = txt.node().getBBox();\n  const fontSize = conf.fontSize && conf.fontSize.replace ? conf.fontSize.replace(\"px\", \"\") : conf.fontSize;\n  textElem.remove();\n  return bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n};\nconst defaultBkg = function (elem, node, section) {\n  const rd = 5;\n  elem.append(\"path\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + node.type).attr(\"d\", \"M0 \".concat(node.height - rd, \" v\").concat(-node.height + 2 * rd, \" q0,-5 5,-5 h\").concat(node.width - 2 * rd, \" q5,0 5,5 v\").concat(node.height - rd, \" H0 Z\"));\n  elem.append(\"line\").attr(\"class\", \"node-line-\" + section).attr(\"x1\", 0).attr(\"y1\", node.height).attr(\"x2\", node.width).attr(\"y2\", node.height);\n};\nconst svgDraw = {\n  drawRect,\n  drawCircle,\n  drawSection,\n  drawText,\n  drawLabel,\n  drawTask,\n  drawBackgroundRect,\n  getTextObj,\n  getNoteRect,\n  initGraphics,\n  drawNode,\n  getVirtualNodeHeight\n};\nconst draw = function (text, id, version, diagObj) {\n  var _conf$leftMargin, _ref, _ref2;\n  var _a, _b;\n  const conf = getConfig();\n  const LEFT_MARGIN = (_conf$leftMargin = conf.leftMargin) !== null && _conf$leftMargin !== void 0 ? _conf$leftMargin : 50;\n  log.debug(\"timeline\", diagObj.db);\n  const securityLevel = conf.securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(\"#\" + id);\n  svg.append(\"g\");\n  const tasks2 = diagObj.db.getTasks();\n  const title = diagObj.db.getCommonDb().getDiagramTitle();\n  log.debug(\"task\", tasks2);\n  svgDraw.initGraphics(svg);\n  const sections2 = diagObj.db.getSections();\n  log.debug(\"sections\", sections2);\n  let maxSectionHeight = 0;\n  let maxTaskHeight = 0;\n  let depthY = 0;\n  let sectionBeginY = 0;\n  let masterX = 50 + LEFT_MARGIN;\n  let masterY = 50;\n  sectionBeginY = 50;\n  let sectionNumber = 0;\n  let hasSections = true;\n  sections2.forEach(function (section) {\n    const sectionNode = {\n      number: sectionNumber,\n      descr: section,\n      section: sectionNumber,\n      width: 150,\n      padding: 20,\n      maxHeight: maxSectionHeight\n    };\n    const sectionHeight = svgDraw.getVirtualNodeHeight(svg, sectionNode, conf);\n    log.debug(\"sectionHeight before draw\", sectionHeight);\n    maxSectionHeight = Math.max(maxSectionHeight, sectionHeight + 20);\n  });\n  let maxEventCount = 0;\n  let maxEventLineLength = 0;\n  log.debug(\"tasks.length\", tasks2.length);\n  for (const [i, task] of tasks2.entries()) {\n    const taskNode = {\n      number: i,\n      descr: task,\n      section: task.section,\n      width: 150,\n      padding: 20,\n      maxHeight: maxTaskHeight\n    };\n    const taskHeight = svgDraw.getVirtualNodeHeight(svg, taskNode, conf);\n    log.debug(\"taskHeight before draw\", taskHeight);\n    maxTaskHeight = Math.max(maxTaskHeight, taskHeight + 20);\n    maxEventCount = Math.max(maxEventCount, task.events.length);\n    let maxEventLineLengthTemp = 0;\n    for (let j = 0; j < task.events.length; j++) {\n      const event = task.events[j];\n      const eventNode = {\n        descr: event,\n        section: task.section,\n        number: task.section,\n        width: 150,\n        padding: 20,\n        maxHeight: 50\n      };\n      maxEventLineLengthTemp += svgDraw.getVirtualNodeHeight(svg, eventNode, conf);\n    }\n    maxEventLineLength = Math.max(maxEventLineLength, maxEventLineLengthTemp);\n  }\n  log.debug(\"maxSectionHeight before draw\", maxSectionHeight);\n  log.debug(\"maxTaskHeight before draw\", maxTaskHeight);\n  if (sections2 && sections2.length > 0) {\n    sections2.forEach(section => {\n      const tasksForSection = tasks2.filter(task => task.section === section);\n      const sectionNode = {\n        number: sectionNumber,\n        descr: section,\n        section: sectionNumber,\n        width: 200 * Math.max(tasksForSection.length, 1) - 50,\n        padding: 20,\n        maxHeight: maxSectionHeight\n      };\n      log.debug(\"sectionNode\", sectionNode);\n      const sectionNodeWrapper = svg.append(\"g\");\n      const node = svgDraw.drawNode(sectionNodeWrapper, sectionNode, sectionNumber, conf);\n      log.debug(\"sectionNode output\", node);\n      sectionNodeWrapper.attr(\"transform\", \"translate(\".concat(masterX, \", \").concat(sectionBeginY, \")\"));\n      masterY += maxSectionHeight + 50;\n      if (tasksForSection.length > 0) {\n        drawTasks(svg, tasksForSection, sectionNumber, masterX, masterY, maxTaskHeight, conf, maxEventCount, maxEventLineLength, maxSectionHeight, false);\n      }\n      masterX += 200 * Math.max(tasksForSection.length, 1);\n      masterY = sectionBeginY;\n      sectionNumber++;\n    });\n  } else {\n    hasSections = false;\n    drawTasks(svg, tasks2, sectionNumber, masterX, masterY, maxTaskHeight, conf, maxEventCount, maxEventLineLength, maxSectionHeight, true);\n  }\n  const box = svg.node().getBBox();\n  log.debug(\"bounds\", box);\n  if (title) {\n    svg.append(\"text\").text(title).attr(\"x\", box.width / 2 - LEFT_MARGIN).attr(\"font-size\", \"4ex\").attr(\"font-weight\", \"bold\").attr(\"y\", 20);\n  }\n  depthY = hasSections ? maxSectionHeight + maxTaskHeight + 150 : maxTaskHeight + 100;\n  const lineWrapper = svg.append(\"g\").attr(\"class\", \"lineWrapper\");\n  lineWrapper.append(\"line\").attr(\"x1\", LEFT_MARGIN).attr(\"y1\", depthY).attr(\"x2\", box.width + 3 * LEFT_MARGIN).attr(\"y2\", depthY).attr(\"stroke-width\", 4).attr(\"stroke\", \"black\").attr(\"marker-end\", \"url(#arrowhead)\");\n  setupGraphViewbox(void 0, svg, (_ref = (_a = conf.timeline) == null ? void 0 : _a.padding) !== null && _ref !== void 0 ? _ref : 50, (_ref2 = (_b = conf.timeline) == null ? void 0 : _b.useMaxWidth) !== null && _ref2 !== void 0 ? _ref2 : false);\n};\nconst drawTasks = function (diagram2, tasks2, sectionColor, masterX, masterY, maxTaskHeight, conf, maxEventCount, maxEventLineLength, maxSectionHeight, isWithoutSections) {\n  var _a;\n  for (const task of tasks2) {\n    const taskNode = {\n      descr: task.task,\n      section: sectionColor,\n      number: sectionColor,\n      width: 150,\n      padding: 20,\n      maxHeight: maxTaskHeight\n    };\n    log.debug(\"taskNode\", taskNode);\n    const taskWrapper = diagram2.append(\"g\").attr(\"class\", \"taskWrapper\");\n    const node = svgDraw.drawNode(taskWrapper, taskNode, sectionColor, conf);\n    const taskHeight = node.height;\n    log.debug(\"taskHeight after draw\", taskHeight);\n    taskWrapper.attr(\"transform\", \"translate(\".concat(masterX, \", \").concat(masterY, \")\"));\n    maxTaskHeight = Math.max(maxTaskHeight, taskHeight);\n    if (task.events) {\n      const lineWrapper = diagram2.append(\"g\").attr(\"class\", \"lineWrapper\");\n      let lineLength = maxTaskHeight;\n      masterY += 100;\n      lineLength = lineLength + drawEvents(diagram2, task.events, sectionColor, masterX, masterY, conf);\n      masterY -= 100;\n      lineWrapper.append(\"line\").attr(\"x1\", masterX + 190 / 2).attr(\"y1\", masterY + maxTaskHeight).attr(\"x2\", masterX + 190 / 2).attr(\"y2\", masterY + maxTaskHeight + (isWithoutSections ? maxTaskHeight : maxSectionHeight) + maxEventLineLength + 120).attr(\"stroke-width\", 2).attr(\"stroke\", \"black\").attr(\"marker-end\", \"url(#arrowhead)\").attr(\"stroke-dasharray\", \"5,5\");\n    }\n    masterX = masterX + 200;\n    if (isWithoutSections && !((_a = conf.timeline) == null ? void 0 : _a.disableMulticolor)) {\n      sectionColor++;\n    }\n  }\n  masterY = masterY - 10;\n};\nconst drawEvents = function (diagram2, events, sectionColor, masterX, masterY, conf) {\n  let maxEventHeight = 0;\n  const eventBeginY = masterY;\n  masterY = masterY + 100;\n  for (const event of events) {\n    const eventNode = {\n      descr: event,\n      section: sectionColor,\n      number: sectionColor,\n      width: 150,\n      padding: 20,\n      maxHeight: 50\n    };\n    log.debug(\"eventNode\", eventNode);\n    const eventWrapper = diagram2.append(\"g\").attr(\"class\", \"eventWrapper\");\n    const node = svgDraw.drawNode(eventWrapper, eventNode, sectionColor, conf);\n    const eventHeight = node.height;\n    maxEventHeight = maxEventHeight + eventHeight;\n    eventWrapper.attr(\"transform\", \"translate(\".concat(masterX, \", \").concat(masterY, \")\"));\n    masterY = masterY + 10 + eventHeight;\n  }\n  masterY = eventBeginY;\n  return maxEventHeight;\n};\nconst renderer = {\n  setConf: () => {},\n  draw\n};\nconst genSections = options => {\n  let sections2 = \"\";\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    options[\"lineColor\" + i] = options[\"lineColor\" + i] || options[\"cScaleInv\" + i];\n    if (isDark(options[\"lineColor\" + i])) {\n      options[\"lineColor\" + i] = lighten(options[\"lineColor\" + i], 20);\n    } else {\n      options[\"lineColor\" + i] = darken(options[\"lineColor\" + i], 20);\n    }\n  }\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    const sw = \"\" + (17 - 3 * i);\n    sections2 += \"\\n    .section-\".concat(i - 1, \" rect, .section-\").concat(i - 1, \" path, .section-\").concat(i - 1, \" circle, .section-\").concat(i - 1, \" path  {\\n      fill: \").concat(options[\"cScale\" + i], \";\\n    }\\n    .section-\").concat(i - 1, \" text {\\n     fill: \").concat(options[\"cScaleLabel\" + i], \";\\n    }\\n    .node-icon-\").concat(i - 1, \" {\\n      font-size: 40px;\\n      color: \").concat(options[\"cScaleLabel\" + i], \";\\n    }\\n    .section-edge-\").concat(i - 1, \"{\\n      stroke: \").concat(options[\"cScale\" + i], \";\\n    }\\n    .edge-depth-\").concat(i - 1, \"{\\n      stroke-width: \").concat(sw, \";\\n    }\\n    .section-\").concat(i - 1, \" line {\\n      stroke: \").concat(options[\"cScaleInv\" + i], \" ;\\n      stroke-width: 3;\\n    }\\n\\n    .lineWrapper line{\\n      stroke: \").concat(options[\"cScaleLabel\" + i], \" ;\\n    }\\n\\n    .disabled, .disabled circle, .disabled text {\\n      fill: lightgray;\\n    }\\n    .disabled text {\\n      fill: #efefef;\\n    }\\n    \");\n  }\n  return sections2;\n};\nconst getStyles = options => \"\\n  .edge {\\n    stroke-width: 3;\\n  }\\n  \".concat(genSections(options), \"\\n  .section-root rect, .section-root path, .section-root circle  {\\n    fill: \").concat(options.git0, \";\\n  }\\n  .section-root text {\\n    fill: \").concat(options.gitBranchLabel0, \";\\n  }\\n  .icon-container {\\n    height:100%;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n  }\\n  .edge {\\n    fill: none;\\n  }\\n  .eventWrapper  {\\n   filter: brightness(120%);\\n  }\\n\");\nconst styles = getStyles;\nconst diagram = {\n  db,\n  renderer,\n  parser: parser$1,\n  styles\n};\nexport { diagram };"],"sourceRoot":""}