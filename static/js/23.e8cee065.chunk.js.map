{"version":3,"sources":["../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/pieDiagram-dbbf0591.js"],"names":["__webpack_require__","r","__webpack_exports__","d","diagram","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_0__","d3__WEBPACK_IMPORTED_MODULE_1__","parser","o","k","v","o2","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","$Vd","$Ve","parser2","trace","yy","symbols_","error","start","eol","PIE","document","showData","line","statement","txt","value","title","title_value","acc_title","acc_title_value","acc_descr","acc_descr_value","acc_descr_multiline_value","section","NEWLINE",";","EOF","$accept","$end","terminals_","2","5","7","10","11","12","13","14","15","16","17","18","19","20","21","22","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","setShowData","this","$","addSection","cleanupValue","trim","setDiagramTitle","setAccTitle","setAccDescription","substr","table","3","4","1","6","8","9","defaultActions","parseError","str","hash","recoverable","Error","parse","input","self","stack","tstack","vstack","lstack","args","slice","call","arguments","lexer2","Object","create","lexer","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","lex","token","pop","Array","getPrototypeOf","symbol","state","action","p","len","newState","expected","yyval","errStr","showPosition","join","text","match","loc","first_line","last_line","first_column","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","conditions","topState","Math","abs","pushState","stateStackSize","case-insensitive","yy_","$avoiding_name_collisions","YY_START","acc_descr_multiline","inclusive","string","INITIAL","Parser","parser$1","DEFAULT_PIE_CONFIG","pie","DEFAULT_PIE_DB","sections","config","structuredClone","db","getConfig","clear","getDiagramTitle","getAccTitle","getAccDescription","label","debug","getSections","substring","Number","toggle","getShowData","renderer","draw","id","_version","diagObj","_ref","_outerStrokeWidth","_a","_b","db2","globalConfig","pieConfig","width","getElementById","parentElement","offsetWidth","useWidth","svg","attr","useMaxWidth","group","append","themeVariables","outerStrokeWidth","pieOuterStrokeWidth","textPosition","radius","min","arcGenerator","innerRadius","outerRadius","labelArcGenerator","sections2","arcs","pieData","entries","map","element","sort","a","b","d3Section","pie$1","createPieArcs","myGeneratedColors","pie1","pie2","pie3","pie4","pie5","pie6","pie7","pie8","pie9","pie10","pie11","pie12","color","selectAll","data","enter","datum","sum","keys","forEach","key","toFixed","centroid","style","legend","domain","_datum","LEGEND_RECT_SIZE","styles","pieStrokeColor","pieStrokeWidth","pieOpacity","pieOuterStrokeColor","pieTitleTextSize","pieTitleTextColor","fontFamily","pieSectionTextColor","pieSectionTextSize","pieLegendTextColor","pieLegendTextSize"],"mappings":"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","file":"static/js/23.e8cee065.chunk.js","sourcesContent":["import { A as defaultConfig, q as setDiagramTitle, r as getDiagramTitle, s as setAccTitle, g as getAccTitle, b as setAccDescription, a as getAccDescription, t as clear$1, d as sanitizeText, c as getConfig$1, l as log, B as cleanAndMerge, z as selectSvgElement, i as configureSvgSize, C as parseFontSize } from \"./mermaid-8af3addd.js\";\nimport { arc, scaleOrdinal, pie } from \"d3\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function () {\n  var o = function (k, v, o2, l) {\n      for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n      return o2;\n    },\n    $V0 = [1, 3],\n    $V1 = [1, 4],\n    $V2 = [1, 5],\n    $V3 = [1, 6],\n    $V4 = [1, 10, 12, 14, 16, 18, 19, 20, 21, 22],\n    $V5 = [2, 4],\n    $V6 = [1, 5, 10, 12, 14, 16, 18, 19, 20, 21, 22],\n    $V7 = [20, 21, 22],\n    $V8 = [2, 7],\n    $V9 = [1, 12],\n    $Va = [1, 13],\n    $Vb = [1, 14],\n    $Vc = [1, 15],\n    $Vd = [1, 16],\n    $Ve = [1, 17];\n  var parser2 = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"start\": 3,\n      \"eol\": 4,\n      \"PIE\": 5,\n      \"document\": 6,\n      \"showData\": 7,\n      \"line\": 8,\n      \"statement\": 9,\n      \"txt\": 10,\n      \"value\": 11,\n      \"title\": 12,\n      \"title_value\": 13,\n      \"acc_title\": 14,\n      \"acc_title_value\": 15,\n      \"acc_descr\": 16,\n      \"acc_descr_value\": 17,\n      \"acc_descr_multiline_value\": 18,\n      \"section\": 19,\n      \"NEWLINE\": 20,\n      \";\": 21,\n      \"EOF\": 22,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      5: \"PIE\",\n      7: \"showData\",\n      10: \"txt\",\n      11: \"value\",\n      12: \"title\",\n      13: \"title_value\",\n      14: \"acc_title\",\n      15: \"acc_title_value\",\n      16: \"acc_descr\",\n      17: \"acc_descr_value\",\n      18: \"acc_descr_multiline_value\",\n      19: \"section\",\n      20: \"NEWLINE\",\n      21: \";\",\n      22: \"EOF\"\n    },\n    productions_: [0, [3, 2], [3, 2], [3, 3], [6, 0], [6, 2], [8, 2], [9, 0], [9, 2], [9, 2], [9, 2], [9, 2], [9, 1], [9, 1], [4, 1], [4, 1], [4, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 3:\n          yy.setShowData(true);\n          break;\n        case 6:\n          this.$ = $$[$0 - 1];\n          break;\n        case 8:\n          yy.addSection($$[$0 - 1], yy.cleanupValue($$[$0]));\n          break;\n        case 9:\n          this.$ = $$[$0].trim();\n          yy.setDiagramTitle(this.$);\n          break;\n        case 10:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 11:\n        case 12:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 13:\n          yy.addSection($$[$0].substr(8));\n          this.$ = $$[$0].substr(8);\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: 2,\n      5: $V0,\n      20: $V1,\n      21: $V2,\n      22: $V3\n    }, {\n      1: [3]\n    }, {\n      3: 7,\n      4: 2,\n      5: $V0,\n      20: $V1,\n      21: $V2,\n      22: $V3\n    }, o($V4, $V5, {\n      6: 8,\n      7: [1, 9]\n    }), o($V6, [2, 14]), o($V6, [2, 15]), o($V6, [2, 16]), {\n      1: [2, 1]\n    }, o($V7, $V8, {\n      8: 10,\n      9: 11,\n      1: [2, 2],\n      10: $V9,\n      12: $Va,\n      14: $Vb,\n      16: $Vc,\n      18: $Vd,\n      19: $Ve\n    }), o($V4, $V5, {\n      6: 18\n    }), o($V4, [2, 5]), {\n      4: 19,\n      20: $V1,\n      21: $V2,\n      22: $V3\n    }, {\n      11: [1, 20]\n    }, {\n      13: [1, 21]\n    }, {\n      15: [1, 22]\n    }, {\n      17: [1, 23]\n    }, o($V7, [2, 12]), o($V7, [2, 13]), o($V7, $V8, {\n      8: 10,\n      9: 11,\n      1: [2, 3],\n      10: $V9,\n      12: $Va,\n      14: $Vb,\n      16: $Vc,\n      18: $Vd,\n      19: $Ve\n    }), o($V4, [2, 6]), o($V7, [2, 8]), o($V7, [2, 9]), o($V7, [2, 10]), o($V7, [2, 11])],\n    defaultActions: {\n      7: [2, 1]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = \"\",\n        yylineno = 0,\n        yyleng = 0,\n        TERROR = 2,\n        EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol,\n        state,\n        action,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function () {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {\n        \"case-insensitive\": true\n      },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            return 20;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            this.begin(\"title\");\n            return 12;\n          case 6:\n            this.popState();\n            return \"title_value\";\n          case 7:\n            this.begin(\"acc_title\");\n            return 14;\n          case 8:\n            this.popState();\n            return \"acc_title_value\";\n          case 9:\n            this.begin(\"acc_descr\");\n            return 16;\n          case 10:\n            this.popState();\n            return \"acc_descr_value\";\n          case 11:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 12:\n            this.popState();\n            break;\n          case 13:\n            return \"acc_descr_multiline_value\";\n          case 14:\n            this.begin(\"string\");\n            break;\n          case 15:\n            this.popState();\n            break;\n          case 16:\n            return \"txt\";\n          case 17:\n            return 5;\n          case 18:\n            return 7;\n          case 19:\n            return \"value\";\n          case 20:\n            return 22;\n        }\n      },\n      rules: [/^(?:%%(?!\\{)[^\\n]*)/i, /^(?:[^\\}]%%[^\\n]*)/i, /^(?:[\\n\\r]+)/i, /^(?:%%[^\\n]*)/i, /^(?:[\\s]+)/i, /^(?:title\\b)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:[\"])/i, /^(?:[\"])/i, /^(?:[^\"]*)/i, /^(?:pie\\b)/i, /^(?:showData\\b)/i, /^(?::[\\s]*[\\d]+(?:\\.[\\d]+)?)/i, /^(?:$)/i],\n      conditions: {\n        \"acc_descr_multiline\": {\n          \"rules\": [12, 13],\n          \"inclusive\": false\n        },\n        \"acc_descr\": {\n          \"rules\": [10],\n          \"inclusive\": false\n        },\n        \"acc_title\": {\n          \"rules\": [8],\n          \"inclusive\": false\n        },\n        \"title\": {\n          \"rules\": [6],\n          \"inclusive\": false\n        },\n        \"string\": {\n          \"rules\": [15, 16],\n          \"inclusive\": false\n        },\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 7, 9, 11, 14, 17, 18, 19, 20],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nconst DEFAULT_PIE_CONFIG = defaultConfig.pie;\nconst DEFAULT_PIE_DB = {\n  sections: {},\n  showData: false,\n  config: DEFAULT_PIE_CONFIG\n};\nlet sections = DEFAULT_PIE_DB.sections;\nlet showData = DEFAULT_PIE_DB.showData;\nconst config = structuredClone(DEFAULT_PIE_CONFIG);\nconst getConfig = () => structuredClone(config);\nconst clear = () => {\n  sections = structuredClone(DEFAULT_PIE_DB.sections);\n  showData = DEFAULT_PIE_DB.showData;\n  clear$1();\n};\nconst addSection = (label, value) => {\n  label = sanitizeText(label, getConfig$1());\n  if (sections[label] === void 0) {\n    sections[label] = value;\n    log.debug(\"added new section: \".concat(label, \", with value: \").concat(value));\n  }\n};\nconst getSections = () => sections;\nconst cleanupValue = value => {\n  if (value.substring(0, 1) === \":\") {\n    value = value.substring(1).trim();\n  }\n  return Number(value.trim());\n};\nconst setShowData = toggle => {\n  showData = toggle;\n};\nconst getShowData = () => showData;\nconst db = {\n  getConfig,\n  clear,\n  setDiagramTitle,\n  getDiagramTitle,\n  setAccTitle,\n  getAccTitle,\n  setAccDescription,\n  getAccDescription,\n  addSection,\n  getSections,\n  cleanupValue,\n  setShowData,\n  getShowData\n};\nconst getStyles = options => \"\\n  .pieCircle{\\n    stroke: \".concat(options.pieStrokeColor, \";\\n    stroke-width : \").concat(options.pieStrokeWidth, \";\\n    opacity : \").concat(options.pieOpacity, \";\\n  }\\n  .pieOuterCircle{\\n    stroke: \").concat(options.pieOuterStrokeColor, \";\\n    stroke-width: \").concat(options.pieOuterStrokeWidth, \";\\n    fill: none;\\n  }\\n  .pieTitleText {\\n    text-anchor: middle;\\n    font-size: \").concat(options.pieTitleTextSize, \";\\n    fill: \").concat(options.pieTitleTextColor, \";\\n    font-family: \").concat(options.fontFamily, \";\\n  }\\n  .slice {\\n    font-family: \").concat(options.fontFamily, \";\\n    fill: \").concat(options.pieSectionTextColor, \";\\n    font-size:\").concat(options.pieSectionTextSize, \";\\n    // fill: white;\\n  }\\n  .legend text {\\n    fill: \").concat(options.pieLegendTextColor, \";\\n    font-family: \").concat(options.fontFamily, \";\\n    font-size: \").concat(options.pieLegendTextSize, \";\\n  }\\n\");\nconst styles = getStyles;\nconst createPieArcs = sections2 => {\n  const pieData = Object.entries(sections2).map(element => {\n    return {\n      label: element[0],\n      value: element[1]\n    };\n  }).sort((a, b) => {\n    return b.value - a.value;\n  });\n  const pie$1 = pie().value(d3Section => d3Section.value);\n  return pie$1(pieData);\n};\nconst draw = (text, id, _version, diagObj) => {\n  var _ref, _outerStrokeWidth;\n  var _a, _b;\n  log.debug(\"rendering pie chart\\n\" + text);\n  const db2 = diagObj.db;\n  const globalConfig = getConfig$1();\n  const pieConfig = cleanAndMerge(db2.getConfig(), globalConfig.pie);\n  const height = 450;\n  const width = (_ref = (_b = (_a = document.getElementById(id)) == null ? void 0 : _a.parentElement) == null ? void 0 : _b.offsetWidth) !== null && _ref !== void 0 ? _ref : pieConfig.useWidth;\n  const svg = selectSvgElement(id);\n  svg.attr(\"viewBox\", \"0 0 \".concat(width, \" \").concat(height));\n  configureSvgSize(svg, height, width, pieConfig.useMaxWidth);\n  const MARGIN = 40;\n  const LEGEND_RECT_SIZE = 18;\n  const LEGEND_SPACING = 4;\n  const group = svg.append(\"g\");\n  group.attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n  const {\n    themeVariables\n  } = globalConfig;\n  let [outerStrokeWidth] = parseFontSize(themeVariables.pieOuterStrokeWidth);\n  (_outerStrokeWidth = outerStrokeWidth) !== null && _outerStrokeWidth !== void 0 ? _outerStrokeWidth : outerStrokeWidth = 2;\n  const textPosition = pieConfig.textPosition;\n  const radius = Math.min(width, height) / 2 - MARGIN;\n  const arcGenerator = arc().innerRadius(0).outerRadius(radius);\n  const labelArcGenerator = arc().innerRadius(radius * textPosition).outerRadius(radius * textPosition);\n  group.append(\"circle\").attr(\"cx\", 0).attr(\"cy\", 0).attr(\"r\", radius + outerStrokeWidth / 2).attr(\"class\", \"pieOuterCircle\");\n  const sections2 = db2.getSections();\n  const arcs = createPieArcs(sections2);\n  const myGeneratedColors = [themeVariables.pie1, themeVariables.pie2, themeVariables.pie3, themeVariables.pie4, themeVariables.pie5, themeVariables.pie6, themeVariables.pie7, themeVariables.pie8, themeVariables.pie9, themeVariables.pie10, themeVariables.pie11, themeVariables.pie12];\n  const color = scaleOrdinal(myGeneratedColors);\n  group.selectAll(\"mySlices\").data(arcs).enter().append(\"path\").attr(\"d\", arcGenerator).attr(\"fill\", datum => {\n    return color(datum.data.label);\n  }).attr(\"class\", \"pieCircle\");\n  let sum = 0;\n  Object.keys(sections2).forEach(key => {\n    sum += sections2[key];\n  });\n  group.selectAll(\"mySlices\").data(arcs).enter().append(\"text\").text(datum => {\n    return (datum.data.value / sum * 100).toFixed(0) + \"%\";\n  }).attr(\"transform\", datum => {\n    return \"translate(\" + labelArcGenerator.centroid(datum) + \")\";\n  }).style(\"text-anchor\", \"middle\").attr(\"class\", \"slice\");\n  group.append(\"text\").text(db2.getDiagramTitle()).attr(\"x\", 0).attr(\"y\", -(height - 50) / 2).attr(\"class\", \"pieTitleText\");\n  const legend = group.selectAll(\".legend\").data(color.domain()).enter().append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", (_datum, index) => {\n    const height2 = LEGEND_RECT_SIZE + LEGEND_SPACING;\n    const offset = height2 * color.domain().length / 2;\n    const horizontal = 12 * LEGEND_RECT_SIZE;\n    const vertical = index * height2 - offset;\n    return \"translate(\" + horizontal + \",\" + vertical + \")\";\n  });\n  legend.append(\"rect\").attr(\"width\", LEGEND_RECT_SIZE).attr(\"height\", LEGEND_RECT_SIZE).style(\"fill\", color).style(\"stroke\", color);\n  legend.data(arcs).append(\"text\").attr(\"x\", LEGEND_RECT_SIZE + LEGEND_SPACING).attr(\"y\", LEGEND_RECT_SIZE - LEGEND_SPACING).text(datum => {\n    const {\n      label,\n      value\n    } = datum.data;\n    if (db2.getShowData()) {\n      return \"\".concat(label, \" [\").concat(value, \"]\");\n    }\n    return label;\n  });\n};\nconst renderer = {\n  draw\n};\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer,\n  styles\n};\nexport { diagram };"],"sourceRoot":""}