{"version":3,"sources":["../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/svgDrawCommon-4835440b.js","../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/sequenceDiagram-b655622a.js"],"names":["__webpack_require__","d","__webpack_exports__","drawBackgroundRect","drawEmbeddedImage","drawImage","drawRect","getTextObj","drawText","getNoteRect","_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0__","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_1__","element","rectData","rectElement","append","attr","x","y","fill","stroke","width","height","rx","ry","attrs","attrKey","class","bounds","startx","starty","stopx","stopy","lower","textData","nText","text","replace","textElem","style","anchor","tspan","textMargin","elem","link","imageElement","sanitizedLink","Object","concat","text-anchor","r","diagram","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_0__","d3__WEBPACK_IMPORTED_MODULE_1__","_svgDrawCommon_4835440b_js__WEBPACK_IMPORTED_MODULE_2__","_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_3__","parser","o","k","v","o2","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","$Vd","$Ve","$Vf","$Vg","$Vh","$Vi","$Vj","$Vk","$Vl","$Vm","$Vn","$Vo","$Vp","$Vq","$Vr","$Vs","$Vt","$Vu","$Vv","$Vw","$Vx","$Vy","$Vz","$VA","$VB","$VC","$VD","$VE","parser2","trace","yy","symbols_","error","start","SPACE","NEWLINE","SD","document","line","statement","box_section","box_line","participant_statement","create","box","restOfLine","end","signal","autonumber","NUM","off","activate","actor","deactivate","note_statement","links_statement","link_statement","properties_statement","details_statement","title","legacy_title","acc_title","acc_title_value","acc_descr","acc_descr_value","acc_descr_multiline_value","loop","rect","opt","alt","else_sections","par","par_sections","par_over","critical","option_sections","break","option","and","else","participant","AS","participant_actor","destroy","note","placement","text2","over","actor_pair","links","properties","details","spaceList",",","left_of","right_of","signaltype","+","-","ACTOR","SOLID_OPEN_ARROW","DOTTED_OPEN_ARROW","SOLID_ARROW","DOTTED_ARROW","SOLID_CROSS","DOTTED_CROSS","SOLID_POINT","DOTTED_POINT","TXT","$accept","$end","terminals_","2","4","5","6","13","14","15","16","18","19","20","21","23","29","30","31","32","33","34","35","36","37","38","39","41","43","44","46","47","48","49","50","51","52","53","54","57","59","60","61","62","64","65","66","68","69","70","71","72","73","74","75","76","77","78","79","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","apply","this","$","push","type","unshift","boxData","parseBoxData","boxText","sequenceIndex","Number","sequenceIndexStep","sequenceVisible","signalType","LINETYPE","AUTONUMBER","ACTIVE_START","ACTIVE_END","setDiagramTitle","substring","trim","setAccTitle","setAccDescription","loopText","parseMessage","LOOP_START","LOOP_END","color","RECT_START","RECT_END","optText","OPT_START","OPT_END","altText","ALT_START","ALT_END","parText","PAR_START","PAR_END","PAR_OVER_START","criticalText","CRITICAL_START","CRITICAL_END","breakText","BREAK_START","BREAK_END","optionText","CRITICAL_OPTION","PAR_AND","ALT_ELSE","draw","description","slice","PLACEMENT","OVER","LEFTOF","RIGHTOF","from","to","msg","SOLID_OPEN","DOTTED_OPEN","SOLID","DOTTED","table","3","1","7","8","9","12","17","22","24","25","26","27","28","67","55","10","40","42","45","58","56","11","defaultActions","85","86","119","120","121","122","123","145","146","147","155","156","157","158","159","160","parseError","str","hash","recoverable","Error","parse","input","self","stack","tstack","vstack","lstack","EOF","args","call","arguments","lexer2","lexer","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","lex","token","pop","Array","getPrototypeOf","symbol","state","action","p","len","newState","expected","yyval","errStr","showPosition","join","match","loc","first_line","last_line","first_column","last_column","range","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","substr","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","conditions","topState","Math","abs","pushState","stateStackSize","case-insensitive","yy_","$avoiding_name_collisions","YY_START","acc_descr_multiline","inclusive","ID","ALIAS","LINE","INITIAL","Parser","parser$1","wrapEnabled","prevActor","actors","createdActors","destroyedActors","boxes","messages","sequenceNumbersEnabled","currentBox","lastCreated","lastDestroyed","addActor","id","name","assignedBox","old","wrap","autoWrap","actorCnt","nextActor","actorKeys","addSignal","idFrom","idTo","message","undefined","messageType","part","count","activationCount","getActor","sequence","NOTE","addNote","actors2","addLinks","actorId","sanitizedText","insertLinks","JSON","e","key","addProperties","insertProperties","addDetails","getElementById","innerHTML","param","isArray","forEach","item","step","visible","sep","indexOf","label","addALink","data","db","addMessage","answer","setWrap","wrapSetting","enableSequenceNumbers","disableSequenceNumbers","showSequenceNumbers","getMessages","getActors","getCreatedActors","getDestroyedActors","getActorKeys","keys","getActorProperty","getAccTitle","getBoxes","getDiagramTitle","getConfig","clear","_str","debug","window","CSS","supports","Option","ARROWTYPE","FILLED","OPEN","getAccDescription","hasAtLeastOneBox","hasAtLeastOneBoxWithTitle","some","b","styles","actorBorder","actorBkg","actorTextColor","actorLineColor","signalColor","sequenceNumberColor","signalTextColor","labelBoxBorderColor","labelBoxBkgColor","labelTextColor","loopTextColor","noteBorderColor","noteBkgColor","noteTextColor","activationBkgColor","activationBorderColor","ACTOR_TYPE_WIDTH","addPopupInteraction","actorCnt2","arr","querySelectorAll","addEventListener","popupMenuUpFunc","popupMenuDownFunc","popupId","pu","display","prevTextHeight","textHeight","lineBreakRegex","_textFontSize","_textFontSizePx","fontSize","textElems","dy","yfunc","valign","round","dominantBaseline","alignmentBaseline","entries","fontFamily","fontWeight","span","_groups","getBBox","drawLabel","txtObject","polygon","cut","fixLifeLineHeights","diagram2","conf2","select","actorKey","actorDOM","mirrorActors","bounds2","_drawTextCandidateFunc","byText","content","g","textAttrs","_setTextAttrs","byTspan","actorFontSize","actorFontFamily","actorFontWeight","_actorFontSize","_actorFontSizePx","byFo","s","toText","fromTextAttrsDict","textPlacement","_drawMenuItemTextCandidateFunc","svgDraw","drawActor","isFooter","actorY","center","centerY","actElem","circle","node","drawActorTypeActor","boxpluslineGroup","cssclass","rectElem","iconSrc","charAt","drawActorTypeParticipant","drawBox","textMaxHeight","drawPopup","minMenuWidth","forceMenus","displayValue","actorClass","menuWidth","linkY","linkElem","anchorElement","drawActivation","verticalPos","actorActivations2","anchored","drawLoop","loopModel","labelText","boxMargin","boxTextMargin","labelBoxHeight","labelBoxWidth","messageFontFamily","messageFontSize","messageFontWeight","drawLoopLine","sections","txt","sectionTitles","idx","sectionHeight","map","te","reduce","acc","curr","insertArrowHead","insertArrowFilledHead","insertSequenceNumber","insertArrowCrossHead","insertDatabaseIcon","insertComputerIcon","insertClockIcon","popupMenu","popid","popdownMenu","sanitizeUrl","conf","sequenceItems","activations","models","getHeight","max","loops","it","h","notes","addBox","boxModel","actorModel","addLoop","msgModel","noteModel","lastActor","lastLoop","lastMessage","lastNote","init","setConf","updateVal","obj","val","fun","updateBounds","_self","cnt","updateFn","min","insert","_startx","getMin","_stopx","getMax","_starty","_stopy","newActivation","actorRect","stackedSize","actorActivations","activationWidth","endActivation","lastActorActivationIdx","activation","lastIndexOf","splice","createLoop","newLoop","endLoop","isLoopOverlap","overlap","addSectionToLoop","getVerticalPos","saveVerticalPos","savedVerticalPos","resetVerticalPos","bumpVerticalPos","bump","getBounds","messageFont","cnf","noteFont","noteFontFamily","noteFontSize","noteFontWeight","actorFont","drawActors","maxHeight","drawActorsPopup","doc","maxWidth","getRequiredPopupWidth","menuDimensions","filter","activationBounds","actorObj","adjustLoopHeightForWrap","loopWidths","preMargin","postMargin","addLoopFn","heightAdjust","loopWidth","textConf","wrapLabel","wrapPadding","textDims","calculateTextDimensions","totalOffset","requiredPopupWidth","textFont","labelWidth","calculateLoopBounds","messages2","_maxWidthPerActor","diagObj","current","random","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","toAdd","enabled","a","shouldWrap","textDimensions","noteMargin","actorMargin","buildNoteModel","stk","includes","fromLeft","fromRight","toLeft","toRight","isArrowToRight","isArrowToActivation","adjustValue","value","allBounds","boundedWidth","msgDims","fromBounds","toBounds","buildMessageModel","renderer","_text","_version","securityLevel","sandboxElement","root","nodes","contentDocument","body","createdActors2","destroyedActors2","boxes2","hasBoxes","hasBoxTitles","maxMessageWidthPerActor","isNote","isMessage","wrappedMessage","messageWidth","getMaxMessageWidthPerActor","actorToMessageWidth","prop","actDims","messageWidth2","actorWidth2","margin","actorWidth","maxBoxHeight","totalWidth","total","aKey","boxMsgDimensions","minWidth","missing","calculateActorMargins","hideUnusedParticipants","newActors","Set","add","has","prevWidth","prevMargin","prevBox","addActorRenderingData","messagesToDraw","backgrounds","textObj","noteAlign","drawNote","activationData","activeEnd","lineStartY","_diagram","splitBreaks","lineHeight","textWidth","rightAngles","dx","boundMessage","receiverAdjustment","adjustment","senderAdjustment","adjustCreatedDestroyedData","messageModel","messageAlign","url","arrowMarkerAbsolute","location","protocol","host","pathname","search","drawMessage","box2","requiredBoxSize","boxHeight","diagramMarginY","bottomMarginAdj","boxWidth","diagramMarginX","useMaxWidth","extraVertForTitle","_ref"],"mappings":"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A,QACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,QACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,QACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,QACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,QACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,QACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,QACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,QACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,QACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,QACA,GACA,QAEA,OADA1L,KAAA4L,WACA,GACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QAEA,OADA5L,KAAA0L,MAAA,MACA,GACA,QAEA,OADA1L,KAAA0L,MAAA,MACA,GACA,QACA,UACA,QACA,UACA,QAEA,OADA1L,KAAA0L,MAAA,aACA,GACA,QAEA,OADA1L,KAAA4L,WACA,kBACA,QAEA,OADA5L,KAAA0L,MAAA,aACA,GACA,QAEA,OADA1L,KAAA4L,WACA,kBACA,QACA5L,KAAA0L,MAAA,uBACA,MACA,QACA1L,KAAA4L,WACA,MACA,QACA,kCACA,QACA,SACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,SACA,QAEA,OADAQ,EAAA5M,OAAA4M,EAAA5M,OAAA2B,OACA,GACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,UACA,QACA,SACA,QACA,kBAGAmK,MAAA,qFAA2F,sBAAqB,8LAA0M,2OAA2P,uNAAmO,yBAA0B,yHAA6H,aAAgB,eAAe,iFAAwF,kEAA+D,0IAAqJ,0CAC1vCO,WAAA,CACAU,oBAAA,CACAjB,MAAA,QACAkB,WAAA,GAEA3T,UAAA,CACAyS,MAAA,KACAkB,WAAA,GAEA7T,UAAA,CACA2S,MAAA,KACAkB,WAAA,GAEAC,GAAA,CACAnB,MAAA,SACAkB,WAAA,GAEAE,M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","file":"static/js/18.9264bc71.chunk.js","sourcesContent":["import { sanitizeUrl } from \"@braintree/sanitize-url\";\nimport { H as lineBreakRegex } from \"./mermaid-8af3addd.js\";\nconst drawRect = (element, rectData) => {\n  const rectElement = element.append(\"rect\");\n  rectElement.attr(\"x\", rectData.x);\n  rectElement.attr(\"y\", rectData.y);\n  rectElement.attr(\"fill\", rectData.fill);\n  rectElement.attr(\"stroke\", rectData.stroke);\n  rectElement.attr(\"width\", rectData.width);\n  rectElement.attr(\"height\", rectData.height);\n  rectData.rx !== void 0 && rectElement.attr(\"rx\", rectData.rx);\n  rectData.ry !== void 0 && rectElement.attr(\"ry\", rectData.ry);\n  if (rectData.attrs !== void 0) {\n    for (const attrKey in rectData.attrs) {\n      rectElement.attr(attrKey, rectData.attrs[attrKey]);\n    }\n  }\n  rectData.class !== void 0 && rectElement.attr(\"class\", rectData.class);\n  return rectElement;\n};\nconst drawBackgroundRect = (element, bounds) => {\n  const rectData = {\n    x: bounds.startx,\n    y: bounds.starty,\n    width: bounds.stopx - bounds.startx,\n    height: bounds.stopy - bounds.starty,\n    fill: bounds.fill,\n    stroke: bounds.stroke,\n    class: \"rect\"\n  };\n  const rectElement = drawRect(element, rectData);\n  rectElement.lower();\n};\nconst drawText = (element, textData) => {\n  const nText = textData.text.replace(lineBreakRegex, \" \");\n  const textElem = element.append(\"text\");\n  textElem.attr(\"x\", textData.x);\n  textElem.attr(\"y\", textData.y);\n  textElem.attr(\"class\", \"legend\");\n  textElem.style(\"text-anchor\", textData.anchor);\n  textData.class !== void 0 && textElem.attr(\"class\", textData.class);\n  const tspan = textElem.append(\"tspan\");\n  tspan.attr(\"x\", textData.x + textData.textMargin * 2);\n  tspan.text(nText);\n  return textElem;\n};\nconst drawImage = (elem, x, y, link) => {\n  const imageElement = elem.append(\"image\");\n  imageElement.attr(\"x\", x);\n  imageElement.attr(\"y\", y);\n  const sanitizedLink = sanitizeUrl(link);\n  imageElement.attr(\"xlink:href\", sanitizedLink);\n};\nconst drawEmbeddedImage = (element, x, y, link) => {\n  const imageElement = element.append(\"use\");\n  imageElement.attr(\"x\", x);\n  imageElement.attr(\"y\", y);\n  const sanitizedLink = sanitizeUrl(link);\n  imageElement.attr(\"xlink:href\", \"#\".concat(sanitizedLink));\n};\nconst getNoteRect = () => {\n  const noteRectData = {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n    fill: \"#EDF2AE\",\n    stroke: \"#666\",\n    anchor: \"start\",\n    rx: 0,\n    ry: 0\n  };\n  return noteRectData;\n};\nconst getTextObj = () => {\n  const testObject = {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n    \"text-anchor\": \"start\",\n    style: \"#666\",\n    textMargin: 0,\n    rx: 0,\n    ry: 0,\n    tspan: true\n  };\n  return testObject;\n};\nexport { drawBackgroundRect as a, drawEmbeddedImage as b, drawImage as c, drawRect as d, getTextObj as e, drawText as f, getNoteRect as g };","import { g as getAccTitle, r as getDiagramTitle, q as setDiagramTitle, c as getConfig, s as setAccTitle, b as setAccDescription, a as getAccDescription, t as clear$1, l as log, d as sanitizeText, e as common, C as parseFontSize, F as addFunction, Z as ZERO_WIDTH_SPACE, f as assignWithDepth, i as configureSvgSize, u as utils } from \"./mermaid-8af3addd.js\";\nimport { select } from \"d3\";\nimport { d as drawRect$1, a as drawBackgroundRect$1, b as drawEmbeddedImage, c as drawImage, e as getTextObj$1, g as getNoteRect$1 } from \"./svgDrawCommon-4835440b.js\";\nimport { sanitizeUrl } from \"@braintree/sanitize-url\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function () {\n  var o = function (k, v, o2, l) {\n      for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n      return o2;\n    },\n    $V0 = [1, 2],\n    $V1 = [1, 3],\n    $V2 = [1, 4],\n    $V3 = [2, 4],\n    $V4 = [1, 9],\n    $V5 = [1, 11],\n    $V6 = [1, 13],\n    $V7 = [1, 14],\n    $V8 = [1, 16],\n    $V9 = [1, 17],\n    $Va = [1, 18],\n    $Vb = [1, 24],\n    $Vc = [1, 25],\n    $Vd = [1, 26],\n    $Ve = [1, 27],\n    $Vf = [1, 28],\n    $Vg = [1, 29],\n    $Vh = [1, 30],\n    $Vi = [1, 31],\n    $Vj = [1, 32],\n    $Vk = [1, 33],\n    $Vl = [1, 34],\n    $Vm = [1, 35],\n    $Vn = [1, 36],\n    $Vo = [1, 37],\n    $Vp = [1, 38],\n    $Vq = [1, 39],\n    $Vr = [1, 41],\n    $Vs = [1, 42],\n    $Vt = [1, 43],\n    $Vu = [1, 44],\n    $Vv = [1, 45],\n    $Vw = [1, 46],\n    $Vx = [1, 4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 59, 60, 61, 62, 70],\n    $Vy = [4, 5, 16, 50, 52, 53],\n    $Vz = [4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 50, 52, 53, 54, 59, 60, 61, 62, 70],\n    $VA = [4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 49, 50, 52, 53, 54, 59, 60, 61, 62, 70],\n    $VB = [4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 48, 50, 52, 53, 54, 59, 60, 61, 62, 70],\n    $VC = [4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 47, 50, 52, 53, 54, 59, 60, 61, 62, 70],\n    $VD = [68, 69, 70],\n    $VE = [1, 120];\n  var parser2 = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"start\": 3,\n      \"SPACE\": 4,\n      \"NEWLINE\": 5,\n      \"SD\": 6,\n      \"document\": 7,\n      \"line\": 8,\n      \"statement\": 9,\n      \"box_section\": 10,\n      \"box_line\": 11,\n      \"participant_statement\": 12,\n      \"create\": 13,\n      \"box\": 14,\n      \"restOfLine\": 15,\n      \"end\": 16,\n      \"signal\": 17,\n      \"autonumber\": 18,\n      \"NUM\": 19,\n      \"off\": 20,\n      \"activate\": 21,\n      \"actor\": 22,\n      \"deactivate\": 23,\n      \"note_statement\": 24,\n      \"links_statement\": 25,\n      \"link_statement\": 26,\n      \"properties_statement\": 27,\n      \"details_statement\": 28,\n      \"title\": 29,\n      \"legacy_title\": 30,\n      \"acc_title\": 31,\n      \"acc_title_value\": 32,\n      \"acc_descr\": 33,\n      \"acc_descr_value\": 34,\n      \"acc_descr_multiline_value\": 35,\n      \"loop\": 36,\n      \"rect\": 37,\n      \"opt\": 38,\n      \"alt\": 39,\n      \"else_sections\": 40,\n      \"par\": 41,\n      \"par_sections\": 42,\n      \"par_over\": 43,\n      \"critical\": 44,\n      \"option_sections\": 45,\n      \"break\": 46,\n      \"option\": 47,\n      \"and\": 48,\n      \"else\": 49,\n      \"participant\": 50,\n      \"AS\": 51,\n      \"participant_actor\": 52,\n      \"destroy\": 53,\n      \"note\": 54,\n      \"placement\": 55,\n      \"text2\": 56,\n      \"over\": 57,\n      \"actor_pair\": 58,\n      \"links\": 59,\n      \"link\": 60,\n      \"properties\": 61,\n      \"details\": 62,\n      \"spaceList\": 63,\n      \",\": 64,\n      \"left_of\": 65,\n      \"right_of\": 66,\n      \"signaltype\": 67,\n      \"+\": 68,\n      \"-\": 69,\n      \"ACTOR\": 70,\n      \"SOLID_OPEN_ARROW\": 71,\n      \"DOTTED_OPEN_ARROW\": 72,\n      \"SOLID_ARROW\": 73,\n      \"DOTTED_ARROW\": 74,\n      \"SOLID_CROSS\": 75,\n      \"DOTTED_CROSS\": 76,\n      \"SOLID_POINT\": 77,\n      \"DOTTED_POINT\": 78,\n      \"TXT\": 79,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      4: \"SPACE\",\n      5: \"NEWLINE\",\n      6: \"SD\",\n      13: \"create\",\n      14: \"box\",\n      15: \"restOfLine\",\n      16: \"end\",\n      18: \"autonumber\",\n      19: \"NUM\",\n      20: \"off\",\n      21: \"activate\",\n      23: \"deactivate\",\n      29: \"title\",\n      30: \"legacy_title\",\n      31: \"acc_title\",\n      32: \"acc_title_value\",\n      33: \"acc_descr\",\n      34: \"acc_descr_value\",\n      35: \"acc_descr_multiline_value\",\n      36: \"loop\",\n      37: \"rect\",\n      38: \"opt\",\n      39: \"alt\",\n      41: \"par\",\n      43: \"par_over\",\n      44: \"critical\",\n      46: \"break\",\n      47: \"option\",\n      48: \"and\",\n      49: \"else\",\n      50: \"participant\",\n      51: \"AS\",\n      52: \"participant_actor\",\n      53: \"destroy\",\n      54: \"note\",\n      57: \"over\",\n      59: \"links\",\n      60: \"link\",\n      61: \"properties\",\n      62: \"details\",\n      64: \",\",\n      65: \"left_of\",\n      66: \"right_of\",\n      68: \"+\",\n      69: \"-\",\n      70: \"ACTOR\",\n      71: \"SOLID_OPEN_ARROW\",\n      72: \"DOTTED_OPEN_ARROW\",\n      73: \"SOLID_ARROW\",\n      74: \"DOTTED_ARROW\",\n      75: \"SOLID_CROSS\",\n      76: \"DOTTED_CROSS\",\n      77: \"SOLID_POINT\",\n      78: \"DOTTED_POINT\",\n      79: \"TXT\"\n    },\n    productions_: [0, [3, 2], [3, 2], [3, 2], [7, 0], [7, 2], [8, 2], [8, 1], [8, 1], [10, 0], [10, 2], [11, 2], [11, 1], [11, 1], [9, 1], [9, 2], [9, 4], [9, 2], [9, 4], [9, 3], [9, 3], [9, 2], [9, 3], [9, 3], [9, 2], [9, 2], [9, 2], [9, 2], [9, 2], [9, 1], [9, 1], [9, 2], [9, 2], [9, 1], [9, 4], [9, 4], [9, 4], [9, 4], [9, 4], [9, 4], [9, 4], [9, 4], [45, 1], [45, 4], [42, 1], [42, 4], [40, 1], [40, 4], [12, 5], [12, 3], [12, 5], [12, 3], [12, 3], [24, 4], [24, 4], [25, 3], [26, 3], [27, 3], [28, 3], [63, 2], [63, 1], [58, 3], [58, 1], [55, 1], [55, 1], [17, 5], [17, 5], [17, 4], [22, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [56, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 3:\n          yy.apply($$[$0]);\n          return $$[$0];\n        case 4:\n        case 9:\n          this.$ = [];\n          break;\n        case 5:\n        case 10:\n          $$[$0 - 1].push($$[$0]);\n          this.$ = $$[$0 - 1];\n          break;\n        case 6:\n        case 7:\n        case 11:\n        case 12:\n          this.$ = $$[$0];\n          break;\n        case 8:\n        case 13:\n          this.$ = [];\n          break;\n        case 15:\n          $$[$0].type = \"createParticipant\";\n          this.$ = $$[$0];\n          break;\n        case 16:\n          $$[$0 - 1].unshift({\n            type: \"boxStart\",\n            boxData: yy.parseBoxData($$[$0 - 2])\n          });\n          $$[$0 - 1].push({\n            type: \"boxEnd\",\n            boxText: $$[$0 - 2]\n          });\n          this.$ = $$[$0 - 1];\n          break;\n        case 18:\n          this.$ = {\n            type: \"sequenceIndex\",\n            sequenceIndex: Number($$[$0 - 2]),\n            sequenceIndexStep: Number($$[$0 - 1]),\n            sequenceVisible: true,\n            signalType: yy.LINETYPE.AUTONUMBER\n          };\n          break;\n        case 19:\n          this.$ = {\n            type: \"sequenceIndex\",\n            sequenceIndex: Number($$[$0 - 1]),\n            sequenceIndexStep: 1,\n            sequenceVisible: true,\n            signalType: yy.LINETYPE.AUTONUMBER\n          };\n          break;\n        case 20:\n          this.$ = {\n            type: \"sequenceIndex\",\n            sequenceVisible: false,\n            signalType: yy.LINETYPE.AUTONUMBER\n          };\n          break;\n        case 21:\n          this.$ = {\n            type: \"sequenceIndex\",\n            sequenceVisible: true,\n            signalType: yy.LINETYPE.AUTONUMBER\n          };\n          break;\n        case 22:\n          this.$ = {\n            type: \"activeStart\",\n            signalType: yy.LINETYPE.ACTIVE_START,\n            actor: $$[$0 - 1]\n          };\n          break;\n        case 23:\n          this.$ = {\n            type: \"activeEnd\",\n            signalType: yy.LINETYPE.ACTIVE_END,\n            actor: $$[$0 - 1]\n          };\n          break;\n        case 29:\n          yy.setDiagramTitle($$[$0].substring(6));\n          this.$ = $$[$0].substring(6);\n          break;\n        case 30:\n          yy.setDiagramTitle($$[$0].substring(7));\n          this.$ = $$[$0].substring(7);\n          break;\n        case 31:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 32:\n        case 33:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 34:\n          $$[$0 - 1].unshift({\n            type: \"loopStart\",\n            loopText: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.LOOP_START\n          });\n          $$[$0 - 1].push({\n            type: \"loopEnd\",\n            loopText: $$[$0 - 2],\n            signalType: yy.LINETYPE.LOOP_END\n          });\n          this.$ = $$[$0 - 1];\n          break;\n        case 35:\n          $$[$0 - 1].unshift({\n            type: \"rectStart\",\n            color: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.RECT_START\n          });\n          $$[$0 - 1].push({\n            type: \"rectEnd\",\n            color: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.RECT_END\n          });\n          this.$ = $$[$0 - 1];\n          break;\n        case 36:\n          $$[$0 - 1].unshift({\n            type: \"optStart\",\n            optText: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.OPT_START\n          });\n          $$[$0 - 1].push({\n            type: \"optEnd\",\n            optText: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.OPT_END\n          });\n          this.$ = $$[$0 - 1];\n          break;\n        case 37:\n          $$[$0 - 1].unshift({\n            type: \"altStart\",\n            altText: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.ALT_START\n          });\n          $$[$0 - 1].push({\n            type: \"altEnd\",\n            signalType: yy.LINETYPE.ALT_END\n          });\n          this.$ = $$[$0 - 1];\n          break;\n        case 38:\n          $$[$0 - 1].unshift({\n            type: \"parStart\",\n            parText: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.PAR_START\n          });\n          $$[$0 - 1].push({\n            type: \"parEnd\",\n            signalType: yy.LINETYPE.PAR_END\n          });\n          this.$ = $$[$0 - 1];\n          break;\n        case 39:\n          $$[$0 - 1].unshift({\n            type: \"parStart\",\n            parText: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.PAR_OVER_START\n          });\n          $$[$0 - 1].push({\n            type: \"parEnd\",\n            signalType: yy.LINETYPE.PAR_END\n          });\n          this.$ = $$[$0 - 1];\n          break;\n        case 40:\n          $$[$0 - 1].unshift({\n            type: \"criticalStart\",\n            criticalText: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.CRITICAL_START\n          });\n          $$[$0 - 1].push({\n            type: \"criticalEnd\",\n            signalType: yy.LINETYPE.CRITICAL_END\n          });\n          this.$ = $$[$0 - 1];\n          break;\n        case 41:\n          $$[$0 - 1].unshift({\n            type: \"breakStart\",\n            breakText: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.BREAK_START\n          });\n          $$[$0 - 1].push({\n            type: \"breakEnd\",\n            optText: yy.parseMessage($$[$0 - 2]),\n            signalType: yy.LINETYPE.BREAK_END\n          });\n          this.$ = $$[$0 - 1];\n          break;\n        case 43:\n          this.$ = $$[$0 - 3].concat([{\n            type: \"option\",\n            optionText: yy.parseMessage($$[$0 - 1]),\n            signalType: yy.LINETYPE.CRITICAL_OPTION\n          }, $$[$0]]);\n          break;\n        case 45:\n          this.$ = $$[$0 - 3].concat([{\n            type: \"and\",\n            parText: yy.parseMessage($$[$0 - 1]),\n            signalType: yy.LINETYPE.PAR_AND\n          }, $$[$0]]);\n          break;\n        case 47:\n          this.$ = $$[$0 - 3].concat([{\n            type: \"else\",\n            altText: yy.parseMessage($$[$0 - 1]),\n            signalType: yy.LINETYPE.ALT_ELSE\n          }, $$[$0]]);\n          break;\n        case 48:\n          $$[$0 - 3].draw = \"participant\";\n          $$[$0 - 3].type = \"addParticipant\";\n          $$[$0 - 3].description = yy.parseMessage($$[$0 - 1]);\n          this.$ = $$[$0 - 3];\n          break;\n        case 49:\n          $$[$0 - 1].draw = \"participant\";\n          $$[$0 - 1].type = \"addParticipant\";\n          this.$ = $$[$0 - 1];\n          break;\n        case 50:\n          $$[$0 - 3].draw = \"actor\";\n          $$[$0 - 3].type = \"addParticipant\";\n          $$[$0 - 3].description = yy.parseMessage($$[$0 - 1]);\n          this.$ = $$[$0 - 3];\n          break;\n        case 51:\n          $$[$0 - 1].draw = \"actor\";\n          $$[$0 - 1].type = \"addParticipant\";\n          this.$ = $$[$0 - 1];\n          break;\n        case 52:\n          $$[$0 - 1].type = \"destroyParticipant\";\n          this.$ = $$[$0 - 1];\n          break;\n        case 53:\n          this.$ = [$$[$0 - 1], {\n            type: \"addNote\",\n            placement: $$[$0 - 2],\n            actor: $$[$0 - 1].actor,\n            text: $$[$0]\n          }];\n          break;\n        case 54:\n          $$[$0 - 2] = [].concat($$[$0 - 1], $$[$0 - 1]).slice(0, 2);\n          $$[$0 - 2][0] = $$[$0 - 2][0].actor;\n          $$[$0 - 2][1] = $$[$0 - 2][1].actor;\n          this.$ = [$$[$0 - 1], {\n            type: \"addNote\",\n            placement: yy.PLACEMENT.OVER,\n            actor: $$[$0 - 2].slice(0, 2),\n            text: $$[$0]\n          }];\n          break;\n        case 55:\n          this.$ = [$$[$0 - 1], {\n            type: \"addLinks\",\n            actor: $$[$0 - 1].actor,\n            text: $$[$0]\n          }];\n          break;\n        case 56:\n          this.$ = [$$[$0 - 1], {\n            type: \"addALink\",\n            actor: $$[$0 - 1].actor,\n            text: $$[$0]\n          }];\n          break;\n        case 57:\n          this.$ = [$$[$0 - 1], {\n            type: \"addProperties\",\n            actor: $$[$0 - 1].actor,\n            text: $$[$0]\n          }];\n          break;\n        case 58:\n          this.$ = [$$[$0 - 1], {\n            type: \"addDetails\",\n            actor: $$[$0 - 1].actor,\n            text: $$[$0]\n          }];\n          break;\n        case 61:\n          this.$ = [$$[$0 - 2], $$[$0]];\n          break;\n        case 62:\n          this.$ = $$[$0];\n          break;\n        case 63:\n          this.$ = yy.PLACEMENT.LEFTOF;\n          break;\n        case 64:\n          this.$ = yy.PLACEMENT.RIGHTOF;\n          break;\n        case 65:\n          this.$ = [$$[$0 - 4], $$[$0 - 1], {\n            type: \"addMessage\",\n            from: $$[$0 - 4].actor,\n            to: $$[$0 - 1].actor,\n            signalType: $$[$0 - 3],\n            msg: $$[$0],\n            activate: true\n          }, {\n            type: \"activeStart\",\n            signalType: yy.LINETYPE.ACTIVE_START,\n            actor: $$[$0 - 1]\n          }];\n          break;\n        case 66:\n          this.$ = [$$[$0 - 4], $$[$0 - 1], {\n            type: \"addMessage\",\n            from: $$[$0 - 4].actor,\n            to: $$[$0 - 1].actor,\n            signalType: $$[$0 - 3],\n            msg: $$[$0]\n          }, {\n            type: \"activeEnd\",\n            signalType: yy.LINETYPE.ACTIVE_END,\n            actor: $$[$0 - 4]\n          }];\n          break;\n        case 67:\n          this.$ = [$$[$0 - 3], $$[$0 - 1], {\n            type: \"addMessage\",\n            from: $$[$0 - 3].actor,\n            to: $$[$0 - 1].actor,\n            signalType: $$[$0 - 2],\n            msg: $$[$0]\n          }];\n          break;\n        case 68:\n          this.$ = {\n            type: \"addParticipant\",\n            actor: $$[$0]\n          };\n          break;\n        case 69:\n          this.$ = yy.LINETYPE.SOLID_OPEN;\n          break;\n        case 70:\n          this.$ = yy.LINETYPE.DOTTED_OPEN;\n          break;\n        case 71:\n          this.$ = yy.LINETYPE.SOLID;\n          break;\n        case 72:\n          this.$ = yy.LINETYPE.DOTTED;\n          break;\n        case 73:\n          this.$ = yy.LINETYPE.SOLID_CROSS;\n          break;\n        case 74:\n          this.$ = yy.LINETYPE.DOTTED_CROSS;\n          break;\n        case 75:\n          this.$ = yy.LINETYPE.SOLID_POINT;\n          break;\n        case 76:\n          this.$ = yy.LINETYPE.DOTTED_POINT;\n          break;\n        case 77:\n          this.$ = yy.parseMessage($$[$0].trim().substring(1));\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: $V0,\n      5: $V1,\n      6: $V2\n    }, {\n      1: [3]\n    }, {\n      3: 5,\n      4: $V0,\n      5: $V1,\n      6: $V2\n    }, {\n      3: 6,\n      4: $V0,\n      5: $V1,\n      6: $V2\n    }, o([1, 4, 5, 13, 14, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 50, 52, 53, 54, 59, 60, 61, 62, 70], $V3, {\n      7: 7\n    }), {\n      1: [2, 1]\n    }, {\n      1: [2, 2]\n    }, {\n      1: [2, 3],\n      4: $V4,\n      5: $V5,\n      8: 8,\n      9: 10,\n      12: 12,\n      13: $V6,\n      14: $V7,\n      17: 15,\n      18: $V8,\n      21: $V9,\n      22: 40,\n      23: $Va,\n      24: 19,\n      25: 20,\n      26: 21,\n      27: 22,\n      28: 23,\n      29: $Vb,\n      30: $Vc,\n      31: $Vd,\n      33: $Ve,\n      35: $Vf,\n      36: $Vg,\n      37: $Vh,\n      38: $Vi,\n      39: $Vj,\n      41: $Vk,\n      43: $Vl,\n      44: $Vm,\n      46: $Vn,\n      50: $Vo,\n      52: $Vp,\n      53: $Vq,\n      54: $Vr,\n      59: $Vs,\n      60: $Vt,\n      61: $Vu,\n      62: $Vv,\n      70: $Vw\n    }, o($Vx, [2, 5]), {\n      9: 47,\n      12: 12,\n      13: $V6,\n      14: $V7,\n      17: 15,\n      18: $V8,\n      21: $V9,\n      22: 40,\n      23: $Va,\n      24: 19,\n      25: 20,\n      26: 21,\n      27: 22,\n      28: 23,\n      29: $Vb,\n      30: $Vc,\n      31: $Vd,\n      33: $Ve,\n      35: $Vf,\n      36: $Vg,\n      37: $Vh,\n      38: $Vi,\n      39: $Vj,\n      41: $Vk,\n      43: $Vl,\n      44: $Vm,\n      46: $Vn,\n      50: $Vo,\n      52: $Vp,\n      53: $Vq,\n      54: $Vr,\n      59: $Vs,\n      60: $Vt,\n      61: $Vu,\n      62: $Vv,\n      70: $Vw\n    }, o($Vx, [2, 7]), o($Vx, [2, 8]), o($Vx, [2, 14]), {\n      12: 48,\n      50: $Vo,\n      52: $Vp,\n      53: $Vq\n    }, {\n      15: [1, 49]\n    }, {\n      5: [1, 50]\n    }, {\n      5: [1, 53],\n      19: [1, 51],\n      20: [1, 52]\n    }, {\n      22: 54,\n      70: $Vw\n    }, {\n      22: 55,\n      70: $Vw\n    }, {\n      5: [1, 56]\n    }, {\n      5: [1, 57]\n    }, {\n      5: [1, 58]\n    }, {\n      5: [1, 59]\n    }, {\n      5: [1, 60]\n    }, o($Vx, [2, 29]), o($Vx, [2, 30]), {\n      32: [1, 61]\n    }, {\n      34: [1, 62]\n    }, o($Vx, [2, 33]), {\n      15: [1, 63]\n    }, {\n      15: [1, 64]\n    }, {\n      15: [1, 65]\n    }, {\n      15: [1, 66]\n    }, {\n      15: [1, 67]\n    }, {\n      15: [1, 68]\n    }, {\n      15: [1, 69]\n    }, {\n      15: [1, 70]\n    }, {\n      22: 71,\n      70: $Vw\n    }, {\n      22: 72,\n      70: $Vw\n    }, {\n      22: 73,\n      70: $Vw\n    }, {\n      67: 74,\n      71: [1, 75],\n      72: [1, 76],\n      73: [1, 77],\n      74: [1, 78],\n      75: [1, 79],\n      76: [1, 80],\n      77: [1, 81],\n      78: [1, 82]\n    }, {\n      55: 83,\n      57: [1, 84],\n      65: [1, 85],\n      66: [1, 86]\n    }, {\n      22: 87,\n      70: $Vw\n    }, {\n      22: 88,\n      70: $Vw\n    }, {\n      22: 89,\n      70: $Vw\n    }, {\n      22: 90,\n      70: $Vw\n    }, o([5, 51, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79], [2, 68]), o($Vx, [2, 6]), o($Vx, [2, 15]), o($Vy, [2, 9], {\n      10: 91\n    }), o($Vx, [2, 17]), {\n      5: [1, 93],\n      19: [1, 92]\n    }, {\n      5: [1, 94]\n    }, o($Vx, [2, 21]), {\n      5: [1, 95]\n    }, {\n      5: [1, 96]\n    }, o($Vx, [2, 24]), o($Vx, [2, 25]), o($Vx, [2, 26]), o($Vx, [2, 27]), o($Vx, [2, 28]), o($Vx, [2, 31]), o($Vx, [2, 32]), o($Vz, $V3, {\n      7: 97\n    }), o($Vz, $V3, {\n      7: 98\n    }), o($Vz, $V3, {\n      7: 99\n    }), o($VA, $V3, {\n      40: 100,\n      7: 101\n    }), o($VB, $V3, {\n      42: 102,\n      7: 103\n    }), o($VB, $V3, {\n      7: 103,\n      42: 104\n    }), o($VC, $V3, {\n      45: 105,\n      7: 106\n    }), o($Vz, $V3, {\n      7: 107\n    }), {\n      5: [1, 109],\n      51: [1, 108]\n    }, {\n      5: [1, 111],\n      51: [1, 110]\n    }, {\n      5: [1, 112]\n    }, {\n      22: 115,\n      68: [1, 113],\n      69: [1, 114],\n      70: $Vw\n    }, o($VD, [2, 69]), o($VD, [2, 70]), o($VD, [2, 71]), o($VD, [2, 72]), o($VD, [2, 73]), o($VD, [2, 74]), o($VD, [2, 75]), o($VD, [2, 76]), {\n      22: 116,\n      70: $Vw\n    }, {\n      22: 118,\n      58: 117,\n      70: $Vw\n    }, {\n      70: [2, 63]\n    }, {\n      70: [2, 64]\n    }, {\n      56: 119,\n      79: $VE\n    }, {\n      56: 121,\n      79: $VE\n    }, {\n      56: 122,\n      79: $VE\n    }, {\n      56: 123,\n      79: $VE\n    }, {\n      4: [1, 126],\n      5: [1, 128],\n      11: 125,\n      12: 127,\n      16: [1, 124],\n      50: $Vo,\n      52: $Vp,\n      53: $Vq\n    }, {\n      5: [1, 129]\n    }, o($Vx, [2, 19]), o($Vx, [2, 20]), o($Vx, [2, 22]), o($Vx, [2, 23]), {\n      4: $V4,\n      5: $V5,\n      8: 8,\n      9: 10,\n      12: 12,\n      13: $V6,\n      14: $V7,\n      16: [1, 130],\n      17: 15,\n      18: $V8,\n      21: $V9,\n      22: 40,\n      23: $Va,\n      24: 19,\n      25: 20,\n      26: 21,\n      27: 22,\n      28: 23,\n      29: $Vb,\n      30: $Vc,\n      31: $Vd,\n      33: $Ve,\n      35: $Vf,\n      36: $Vg,\n      37: $Vh,\n      38: $Vi,\n      39: $Vj,\n      41: $Vk,\n      43: $Vl,\n      44: $Vm,\n      46: $Vn,\n      50: $Vo,\n      52: $Vp,\n      53: $Vq,\n      54: $Vr,\n      59: $Vs,\n      60: $Vt,\n      61: $Vu,\n      62: $Vv,\n      70: $Vw\n    }, {\n      4: $V4,\n      5: $V5,\n      8: 8,\n      9: 10,\n      12: 12,\n      13: $V6,\n      14: $V7,\n      16: [1, 131],\n      17: 15,\n      18: $V8,\n      21: $V9,\n      22: 40,\n      23: $Va,\n      24: 19,\n      25: 20,\n      26: 21,\n      27: 22,\n      28: 23,\n      29: $Vb,\n      30: $Vc,\n      31: $Vd,\n      33: $Ve,\n      35: $Vf,\n      36: $Vg,\n      37: $Vh,\n      38: $Vi,\n      39: $Vj,\n      41: $Vk,\n      43: $Vl,\n      44: $Vm,\n      46: $Vn,\n      50: $Vo,\n      52: $Vp,\n      53: $Vq,\n      54: $Vr,\n      59: $Vs,\n      60: $Vt,\n      61: $Vu,\n      62: $Vv,\n      70: $Vw\n    }, {\n      4: $V4,\n      5: $V5,\n      8: 8,\n      9: 10,\n      12: 12,\n      13: $V6,\n      14: $V7,\n      16: [1, 132],\n      17: 15,\n      18: $V8,\n      21: $V9,\n      22: 40,\n      23: $Va,\n      24: 19,\n      25: 20,\n      26: 21,\n      27: 22,\n      28: 23,\n      29: $Vb,\n      30: $Vc,\n      31: $Vd,\n      33: $Ve,\n      35: $Vf,\n      36: $Vg,\n      37: $Vh,\n      38: $Vi,\n      39: $Vj,\n      41: $Vk,\n      43: $Vl,\n      44: $Vm,\n      46: $Vn,\n      50: $Vo,\n      52: $Vp,\n      53: $Vq,\n      54: $Vr,\n      59: $Vs,\n      60: $Vt,\n      61: $Vu,\n      62: $Vv,\n      70: $Vw\n    }, {\n      16: [1, 133]\n    }, {\n      4: $V4,\n      5: $V5,\n      8: 8,\n      9: 10,\n      12: 12,\n      13: $V6,\n      14: $V7,\n      16: [2, 46],\n      17: 15,\n      18: $V8,\n      21: $V9,\n      22: 40,\n      23: $Va,\n      24: 19,\n      25: 20,\n      26: 21,\n      27: 22,\n      28: 23,\n      29: $Vb,\n      30: $Vc,\n      31: $Vd,\n      33: $Ve,\n      35: $Vf,\n      36: $Vg,\n      37: $Vh,\n      38: $Vi,\n      39: $Vj,\n      41: $Vk,\n      43: $Vl,\n      44: $Vm,\n      46: $Vn,\n      49: [1, 134],\n      50: $Vo,\n      52: $Vp,\n      53: $Vq,\n      54: $Vr,\n      59: $Vs,\n      60: $Vt,\n      61: $Vu,\n      62: $Vv,\n      70: $Vw\n    }, {\n      16: [1, 135]\n    }, {\n      4: $V4,\n      5: $V5,\n      8: 8,\n      9: 10,\n      12: 12,\n      13: $V6,\n      14: $V7,\n      16: [2, 44],\n      17: 15,\n      18: $V8,\n      21: $V9,\n      22: 40,\n      23: $Va,\n      24: 19,\n      25: 20,\n      26: 21,\n      27: 22,\n      28: 23,\n      29: $Vb,\n      30: $Vc,\n      31: $Vd,\n      33: $Ve,\n      35: $Vf,\n      36: $Vg,\n      37: $Vh,\n      38: $Vi,\n      39: $Vj,\n      41: $Vk,\n      43: $Vl,\n      44: $Vm,\n      46: $Vn,\n      48: [1, 136],\n      50: $Vo,\n      52: $Vp,\n      53: $Vq,\n      54: $Vr,\n      59: $Vs,\n      60: $Vt,\n      61: $Vu,\n      62: $Vv,\n      70: $Vw\n    }, {\n      16: [1, 137]\n    }, {\n      16: [1, 138]\n    }, {\n      4: $V4,\n      5: $V5,\n      8: 8,\n      9: 10,\n      12: 12,\n      13: $V6,\n      14: $V7,\n      16: [2, 42],\n      17: 15,\n      18: $V8,\n      21: $V9,\n      22: 40,\n      23: $Va,\n      24: 19,\n      25: 20,\n      26: 21,\n      27: 22,\n      28: 23,\n      29: $Vb,\n      30: $Vc,\n      31: $Vd,\n      33: $Ve,\n      35: $Vf,\n      36: $Vg,\n      37: $Vh,\n      38: $Vi,\n      39: $Vj,\n      41: $Vk,\n      43: $Vl,\n      44: $Vm,\n      46: $Vn,\n      47: [1, 139],\n      50: $Vo,\n      52: $Vp,\n      53: $Vq,\n      54: $Vr,\n      59: $Vs,\n      60: $Vt,\n      61: $Vu,\n      62: $Vv,\n      70: $Vw\n    }, {\n      4: $V4,\n      5: $V5,\n      8: 8,\n      9: 10,\n      12: 12,\n      13: $V6,\n      14: $V7,\n      16: [1, 140],\n      17: 15,\n      18: $V8,\n      21: $V9,\n      22: 40,\n      23: $Va,\n      24: 19,\n      25: 20,\n      26: 21,\n      27: 22,\n      28: 23,\n      29: $Vb,\n      30: $Vc,\n      31: $Vd,\n      33: $Ve,\n      35: $Vf,\n      36: $Vg,\n      37: $Vh,\n      38: $Vi,\n      39: $Vj,\n      41: $Vk,\n      43: $Vl,\n      44: $Vm,\n      46: $Vn,\n      50: $Vo,\n      52: $Vp,\n      53: $Vq,\n      54: $Vr,\n      59: $Vs,\n      60: $Vt,\n      61: $Vu,\n      62: $Vv,\n      70: $Vw\n    }, {\n      15: [1, 141]\n    }, o($Vx, [2, 49]), {\n      15: [1, 142]\n    }, o($Vx, [2, 51]), o($Vx, [2, 52]), {\n      22: 143,\n      70: $Vw\n    }, {\n      22: 144,\n      70: $Vw\n    }, {\n      56: 145,\n      79: $VE\n    }, {\n      56: 146,\n      79: $VE\n    }, {\n      56: 147,\n      79: $VE\n    }, {\n      64: [1, 148],\n      79: [2, 62]\n    }, {\n      5: [2, 55]\n    }, {\n      5: [2, 77]\n    }, {\n      5: [2, 56]\n    }, {\n      5: [2, 57]\n    }, {\n      5: [2, 58]\n    }, o($Vx, [2, 16]), o($Vy, [2, 10]), {\n      12: 149,\n      50: $Vo,\n      52: $Vp,\n      53: $Vq\n    }, o($Vy, [2, 12]), o($Vy, [2, 13]), o($Vx, [2, 18]), o($Vx, [2, 34]), o($Vx, [2, 35]), o($Vx, [2, 36]), o($Vx, [2, 37]), {\n      15: [1, 150]\n    }, o($Vx, [2, 38]), {\n      15: [1, 151]\n    }, o($Vx, [2, 39]), o($Vx, [2, 40]), {\n      15: [1, 152]\n    }, o($Vx, [2, 41]), {\n      5: [1, 153]\n    }, {\n      5: [1, 154]\n    }, {\n      56: 155,\n      79: $VE\n    }, {\n      56: 156,\n      79: $VE\n    }, {\n      5: [2, 67]\n    }, {\n      5: [2, 53]\n    }, {\n      5: [2, 54]\n    }, {\n      22: 157,\n      70: $Vw\n    }, o($Vy, [2, 11]), o($VA, $V3, {\n      7: 101,\n      40: 158\n    }), o($VB, $V3, {\n      7: 103,\n      42: 159\n    }), o($VC, $V3, {\n      7: 106,\n      45: 160\n    }), o($Vx, [2, 48]), o($Vx, [2, 50]), {\n      5: [2, 65]\n    }, {\n      5: [2, 66]\n    }, {\n      79: [2, 61]\n    }, {\n      16: [2, 47]\n    }, {\n      16: [2, 45]\n    }, {\n      16: [2, 43]\n    }],\n    defaultActions: {\n      5: [2, 1],\n      6: [2, 2],\n      85: [2, 63],\n      86: [2, 64],\n      119: [2, 55],\n      120: [2, 77],\n      121: [2, 56],\n      122: [2, 57],\n      123: [2, 58],\n      145: [2, 67],\n      146: [2, 53],\n      147: [2, 54],\n      155: [2, 65],\n      156: [2, 66],\n      157: [2, 61],\n      158: [2, 47],\n      159: [2, 45],\n      160: [2, 43]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = \"\",\n        yylineno = 0,\n        yyleng = 0,\n        TERROR = 2,\n        EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol,\n        state,\n        action,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function () {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {\n        \"case-insensitive\": true\n      },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            return 5;\n          case 1:\n            break;\n          case 2:\n            break;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            break;\n          case 6:\n            return 19;\n          case 7:\n            this.begin(\"LINE\");\n            return 14;\n          case 8:\n            this.begin(\"ID\");\n            return 50;\n          case 9:\n            this.begin(\"ID\");\n            return 52;\n          case 10:\n            return 13;\n          case 11:\n            this.begin(\"ID\");\n            return 53;\n          case 12:\n            yy_.yytext = yy_.yytext.trim();\n            this.begin(\"ALIAS\");\n            return 70;\n          case 13:\n            this.popState();\n            this.popState();\n            this.begin(\"LINE\");\n            return 51;\n          case 14:\n            this.popState();\n            this.popState();\n            return 5;\n          case 15:\n            this.begin(\"LINE\");\n            return 36;\n          case 16:\n            this.begin(\"LINE\");\n            return 37;\n          case 17:\n            this.begin(\"LINE\");\n            return 38;\n          case 18:\n            this.begin(\"LINE\");\n            return 39;\n          case 19:\n            this.begin(\"LINE\");\n            return 49;\n          case 20:\n            this.begin(\"LINE\");\n            return 41;\n          case 21:\n            this.begin(\"LINE\");\n            return 43;\n          case 22:\n            this.begin(\"LINE\");\n            return 48;\n          case 23:\n            this.begin(\"LINE\");\n            return 44;\n          case 24:\n            this.begin(\"LINE\");\n            return 47;\n          case 25:\n            this.begin(\"LINE\");\n            return 46;\n          case 26:\n            this.popState();\n            return 15;\n          case 27:\n            return 16;\n          case 28:\n            return 65;\n          case 29:\n            return 66;\n          case 30:\n            return 59;\n          case 31:\n            return 60;\n          case 32:\n            return 61;\n          case 33:\n            return 62;\n          case 34:\n            return 57;\n          case 35:\n            return 54;\n          case 36:\n            this.begin(\"ID\");\n            return 21;\n          case 37:\n            this.begin(\"ID\");\n            return 23;\n          case 38:\n            return 29;\n          case 39:\n            return 30;\n          case 40:\n            this.begin(\"acc_title\");\n            return 31;\n          case 41:\n            this.popState();\n            return \"acc_title_value\";\n          case 42:\n            this.begin(\"acc_descr\");\n            return 33;\n          case 43:\n            this.popState();\n            return \"acc_descr_value\";\n          case 44:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 45:\n            this.popState();\n            break;\n          case 46:\n            return \"acc_descr_multiline_value\";\n          case 47:\n            return 6;\n          case 48:\n            return 18;\n          case 49:\n            return 20;\n          case 50:\n            return 64;\n          case 51:\n            return 5;\n          case 52:\n            yy_.yytext = yy_.yytext.trim();\n            return 70;\n          case 53:\n            return 73;\n          case 54:\n            return 74;\n          case 55:\n            return 71;\n          case 56:\n            return 72;\n          case 57:\n            return 75;\n          case 58:\n            return 76;\n          case 59:\n            return 77;\n          case 60:\n            return 78;\n          case 61:\n            return 79;\n          case 62:\n            return 68;\n          case 63:\n            return 69;\n          case 64:\n            return 5;\n          case 65:\n            return \"INVALID\";\n        }\n      },\n      rules: [/^(?:[\\n]+)/i, /^(?:\\s+)/i, /^(?:((?!\\n)\\s)+)/i, /^(?:#[^\\n]*)/i, /^(?:%(?!\\{)[^\\n]*)/i, /^(?:[^\\}]%%[^\\n]*)/i, /^(?:[0-9]+(?=[ \\n]+))/i, /^(?:box\\b)/i, /^(?:participant\\b)/i, /^(?:actor\\b)/i, /^(?:create\\b)/i, /^(?:destroy\\b)/i, /^(?:[^\\->:\\n,;]+?([\\-]*[^\\->:\\n,;]+?)*?(?=((?!\\n)\\s)+as(?!\\n)\\s|[#\\n;]|$))/i, /^(?:as\\b)/i, /^(?:(?:))/i, /^(?:loop\\b)/i, /^(?:rect\\b)/i, /^(?:opt\\b)/i, /^(?:alt\\b)/i, /^(?:else\\b)/i, /^(?:par\\b)/i, /^(?:par_over\\b)/i, /^(?:and\\b)/i, /^(?:critical\\b)/i, /^(?:option\\b)/i, /^(?:break\\b)/i, /^(?:(?:[:]?(?:no)?wrap)?[^#\\n;]*)/i, /^(?:end\\b)/i, /^(?:left of\\b)/i, /^(?:right of\\b)/i, /^(?:links\\b)/i, /^(?:link\\b)/i, /^(?:properties\\b)/i, /^(?:details\\b)/i, /^(?:over\\b)/i, /^(?:note\\b)/i, /^(?:activate\\b)/i, /^(?:deactivate\\b)/i, /^(?:title\\s[^#\\n;]+)/i, /^(?:title:\\s[^#\\n;]+)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:sequenceDiagram\\b)/i, /^(?:autonumber\\b)/i, /^(?:off\\b)/i, /^(?:,)/i, /^(?:;)/i, /^(?:[^\\+\\->:\\n,;]+((?!(-x|--x|-\\)|--\\)))[\\-]*[^\\+\\->:\\n,;]+)*)/i, /^(?:->>)/i, /^(?:-->>)/i, /^(?:->)/i, /^(?:-->)/i, /^(?:-[x])/i, /^(?:--[x])/i, /^(?:-[\\)])/i, /^(?:--[\\)])/i, /^(?::(?:(?:no)?wrap)?[^#\\n;]+)/i, /^(?:\\+)/i, /^(?:-)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: {\n        \"acc_descr_multiline\": {\n          \"rules\": [45, 46],\n          \"inclusive\": false\n        },\n        \"acc_descr\": {\n          \"rules\": [43],\n          \"inclusive\": false\n        },\n        \"acc_title\": {\n          \"rules\": [41],\n          \"inclusive\": false\n        },\n        \"ID\": {\n          \"rules\": [2, 3, 12],\n          \"inclusive\": false\n        },\n        \"ALIAS\": {\n          \"rules\": [2, 3, 13, 14],\n          \"inclusive\": false\n        },\n        \"LINE\": {\n          \"rules\": [2, 3, 26],\n          \"inclusive\": false\n        },\n        \"INITIAL\": {\n          \"rules\": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet prevActor = void 0;\nlet actors = {};\nlet createdActors = {};\nlet destroyedActors = {};\nlet boxes = [];\nlet messages = [];\nlet sequenceNumbersEnabled = false;\nlet wrapEnabled;\nlet currentBox = void 0;\nlet lastCreated = void 0;\nlet lastDestroyed = void 0;\nconst addBox = function (data) {\n  boxes.push({\n    name: data.text,\n    wrap: data.wrap === void 0 && autoWrap() || !!data.wrap,\n    fill: data.color,\n    actorKeys: []\n  });\n  currentBox = boxes.slice(-1)[0];\n};\nconst addActor = function (id, name, description, type) {\n  let assignedBox = currentBox;\n  const old = actors[id];\n  if (old) {\n    if (currentBox && old.box && currentBox !== old.box) {\n      throw new Error(\"A same participant should only be defined in one Box: \" + old.name + \" can't be in '\" + old.box.name + \"' and in '\" + currentBox.name + \"' at the same time.\");\n    }\n    assignedBox = old.box ? old.box : currentBox;\n    old.box = assignedBox;\n    if (old && name === old.name && description == null) {\n      return;\n    }\n  }\n  if (description == null || description.text == null) {\n    description = {\n      text: name,\n      wrap: null,\n      type\n    };\n  }\n  if (type == null || description.text == null) {\n    description = {\n      text: name,\n      wrap: null,\n      type\n    };\n  }\n  actors[id] = {\n    box: assignedBox,\n    name,\n    description: description.text,\n    wrap: description.wrap === void 0 && autoWrap() || !!description.wrap,\n    prevActor,\n    links: {},\n    properties: {},\n    actorCnt: null,\n    rectData: null,\n    type: type || \"participant\"\n  };\n  if (prevActor && actors[prevActor]) {\n    actors[prevActor].nextActor = id;\n  }\n  if (currentBox) {\n    currentBox.actorKeys.push(id);\n  }\n  prevActor = id;\n};\nconst activationCount = part => {\n  let i;\n  let count = 0;\n  for (i = 0; i < messages.length; i++) {\n    if (messages[i].type === LINETYPE.ACTIVE_START && messages[i].from.actor === part) {\n      count++;\n    }\n    if (messages[i].type === LINETYPE.ACTIVE_END && messages[i].from.actor === part) {\n      count--;\n    }\n  }\n  return count;\n};\nconst addMessage = function (idFrom, idTo, message, answer) {\n  messages.push({\n    from: idFrom,\n    to: idTo,\n    message: message.text,\n    wrap: message.wrap === void 0 && autoWrap() || !!message.wrap,\n    answer\n  });\n};\nconst addSignal = function (idFrom, idTo) {\n  let message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    text: void 0,\n    wrap: void 0\n  };\n  let messageType = arguments.length > 3 ? arguments[3] : undefined;\n  let activate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (messageType === LINETYPE.ACTIVE_END) {\n    const cnt = activationCount(idFrom.actor);\n    if (cnt < 1) {\n      let error = new Error(\"Trying to inactivate an inactive participant (\" + idFrom.actor + \")\");\n      error.hash = {\n        text: \"->>-\",\n        token: \"->>-\",\n        line: \"1\",\n        loc: {\n          first_line: 1,\n          last_line: 1,\n          first_column: 1,\n          last_column: 1\n        },\n        expected: [\"'ACTIVE_PARTICIPANT'\"]\n      };\n      throw error;\n    }\n  }\n  messages.push({\n    from: idFrom,\n    to: idTo,\n    message: message.text,\n    wrap: message.wrap === void 0 && autoWrap() || !!message.wrap,\n    type: messageType,\n    activate\n  });\n  return true;\n};\nconst hasAtLeastOneBox = function () {\n  return boxes.length > 0;\n};\nconst hasAtLeastOneBoxWithTitle = function () {\n  return boxes.some(b => b.name);\n};\nconst getMessages = function () {\n  return messages;\n};\nconst getBoxes = function () {\n  return boxes;\n};\nconst getActors = function () {\n  return actors;\n};\nconst getCreatedActors = function () {\n  return createdActors;\n};\nconst getDestroyedActors = function () {\n  return destroyedActors;\n};\nconst getActor = function (id) {\n  return actors[id];\n};\nconst getActorKeys = function () {\n  return Object.keys(actors);\n};\nconst enableSequenceNumbers = function () {\n  sequenceNumbersEnabled = true;\n};\nconst disableSequenceNumbers = function () {\n  sequenceNumbersEnabled = false;\n};\nconst showSequenceNumbers = () => sequenceNumbersEnabled;\nconst setWrap = function (wrapSetting) {\n  wrapEnabled = wrapSetting;\n};\nconst autoWrap = () => {\n  if (wrapEnabled !== void 0) {\n    return wrapEnabled;\n  }\n  return getConfig().sequence.wrap;\n};\nconst clear = function () {\n  actors = {};\n  createdActors = {};\n  destroyedActors = {};\n  boxes = [];\n  messages = [];\n  sequenceNumbersEnabled = false;\n  clear$1();\n};\nconst parseMessage = function (str) {\n  const _str = str.trim();\n  const message = {\n    text: _str.replace(/^:?(?:no)?wrap:/, \"\").trim(),\n    wrap: _str.match(/^:?wrap:/) !== null ? true : _str.match(/^:?nowrap:/) !== null ? false : void 0\n  };\n  log.debug(\"parseMessage:\", message);\n  return message;\n};\nconst parseBoxData = function (str) {\n  const match = str.match(/^((?:rgba?|hsla?)\\s*\\(.*\\)|\\w*)(.*)$/);\n  let color = match != null && match[1] ? match[1].trim() : \"transparent\";\n  let title = match != null && match[2] ? match[2].trim() : void 0;\n  if (window && window.CSS) {\n    if (!window.CSS.supports(\"color\", color)) {\n      color = \"transparent\";\n      title = str.trim();\n    }\n  } else {\n    const style = new Option().style;\n    style.color = color;\n    if (style.color !== color) {\n      color = \"transparent\";\n      title = str.trim();\n    }\n  }\n  const boxData = {\n    color,\n    text: title !== void 0 ? sanitizeText(title.replace(/^:?(?:no)?wrap:/, \"\"), getConfig()) : void 0,\n    wrap: title !== void 0 ? title.match(/^:?wrap:/) !== null ? true : title.match(/^:?nowrap:/) !== null ? false : void 0 : void 0\n  };\n  return boxData;\n};\nconst LINETYPE = {\n  SOLID: 0,\n  DOTTED: 1,\n  NOTE: 2,\n  SOLID_CROSS: 3,\n  DOTTED_CROSS: 4,\n  SOLID_OPEN: 5,\n  DOTTED_OPEN: 6,\n  LOOP_START: 10,\n  LOOP_END: 11,\n  ALT_START: 12,\n  ALT_ELSE: 13,\n  ALT_END: 14,\n  OPT_START: 15,\n  OPT_END: 16,\n  ACTIVE_START: 17,\n  ACTIVE_END: 18,\n  PAR_START: 19,\n  PAR_AND: 20,\n  PAR_END: 21,\n  RECT_START: 22,\n  RECT_END: 23,\n  SOLID_POINT: 24,\n  DOTTED_POINT: 25,\n  AUTONUMBER: 26,\n  CRITICAL_START: 27,\n  CRITICAL_OPTION: 28,\n  CRITICAL_END: 29,\n  BREAK_START: 30,\n  BREAK_END: 31,\n  PAR_OVER_START: 32\n};\nconst ARROWTYPE = {\n  FILLED: 0,\n  OPEN: 1\n};\nconst PLACEMENT = {\n  LEFTOF: 0,\n  RIGHTOF: 1,\n  OVER: 2\n};\nconst addNote = function (actor, placement, message) {\n  ({\n    actor,\n    placement,\n    message: message.text,\n    wrap: message.wrap === void 0 && autoWrap() || !!message.wrap\n  });\n  const actors2 = [].concat(actor, actor);\n  messages.push({\n    from: actors2[0],\n    to: actors2[1],\n    message: message.text,\n    wrap: message.wrap === void 0 && autoWrap() || !!message.wrap,\n    type: LINETYPE.NOTE,\n    placement\n  });\n};\nconst addLinks = function (actorId, text) {\n  const actor = getActor(actorId);\n  try {\n    let sanitizedText = sanitizeText(text.text, getConfig());\n    sanitizedText = sanitizedText.replace(/&amp;/g, \"&\");\n    sanitizedText = sanitizedText.replace(/&equals;/g, \"=\");\n    const links = JSON.parse(sanitizedText);\n    insertLinks(actor, links);\n  } catch (e) {\n    log.error(\"error while parsing actor link text\", e);\n  }\n};\nconst addALink = function (actorId, text) {\n  const actor = getActor(actorId);\n  try {\n    const links = {};\n    let sanitizedText = sanitizeText(text.text, getConfig());\n    var sep = sanitizedText.indexOf(\"@\");\n    sanitizedText = sanitizedText.replace(/&amp;/g, \"&\");\n    sanitizedText = sanitizedText.replace(/&equals;/g, \"=\");\n    var label = sanitizedText.slice(0, sep - 1).trim();\n    var link = sanitizedText.slice(sep + 1).trim();\n    links[label] = link;\n    insertLinks(actor, links);\n  } catch (e) {\n    log.error(\"error while parsing actor link text\", e);\n  }\n};\nfunction insertLinks(actor, links) {\n  if (actor.links == null) {\n    actor.links = links;\n  } else {\n    for (let key in links) {\n      actor.links[key] = links[key];\n    }\n  }\n}\nconst addProperties = function (actorId, text) {\n  const actor = getActor(actorId);\n  try {\n    let sanitizedText = sanitizeText(text.text, getConfig());\n    const properties = JSON.parse(sanitizedText);\n    insertProperties(actor, properties);\n  } catch (e) {\n    log.error(\"error while parsing actor properties text\", e);\n  }\n};\nfunction insertProperties(actor, properties) {\n  if (actor.properties == null) {\n    actor.properties = properties;\n  } else {\n    for (let key in properties) {\n      actor.properties[key] = properties[key];\n    }\n  }\n}\nfunction boxEnd() {\n  currentBox = void 0;\n}\nconst addDetails = function (actorId, text) {\n  const actor = getActor(actorId);\n  const elem = document.getElementById(text.text);\n  try {\n    const text2 = elem.innerHTML;\n    const details = JSON.parse(text2);\n    if (details[\"properties\"]) {\n      insertProperties(actor, details[\"properties\"]);\n    }\n    if (details[\"links\"]) {\n      insertLinks(actor, details[\"links\"]);\n    }\n  } catch (e) {\n    log.error(\"error while parsing actor details text\", e);\n  }\n};\nconst getActorProperty = function (actor, key) {\n  if (actor !== void 0 && actor.properties !== void 0) {\n    return actor.properties[key];\n  }\n  return void 0;\n};\nconst apply = function (param) {\n  if (Array.isArray(param)) {\n    param.forEach(function (item) {\n      apply(item);\n    });\n  } else {\n    switch (param.type) {\n      case \"sequenceIndex\":\n        messages.push({\n          from: void 0,\n          to: void 0,\n          message: {\n            start: param.sequenceIndex,\n            step: param.sequenceIndexStep,\n            visible: param.sequenceVisible\n          },\n          wrap: false,\n          type: param.signalType\n        });\n        break;\n      case \"addParticipant\":\n        addActor(param.actor, param.actor, param.description, param.draw);\n        break;\n      case \"createParticipant\":\n        if (actors[param.actor]) {\n          throw new Error(\"It is not possible to have actors with the same id, even if one is destroyed before the next is created. Use 'AS' aliases to simulate the behavior\");\n        }\n        lastCreated = param.actor;\n        addActor(param.actor, param.actor, param.description, param.draw);\n        createdActors[param.actor] = messages.length;\n        break;\n      case \"destroyParticipant\":\n        lastDestroyed = param.actor;\n        destroyedActors[param.actor] = messages.length;\n        break;\n      case \"activeStart\":\n        addSignal(param.actor, void 0, void 0, param.signalType);\n        break;\n      case \"activeEnd\":\n        addSignal(param.actor, void 0, void 0, param.signalType);\n        break;\n      case \"addNote\":\n        addNote(param.actor, param.placement, param.text);\n        break;\n      case \"addLinks\":\n        addLinks(param.actor, param.text);\n        break;\n      case \"addALink\":\n        addALink(param.actor, param.text);\n        break;\n      case \"addProperties\":\n        addProperties(param.actor, param.text);\n        break;\n      case \"addDetails\":\n        addDetails(param.actor, param.text);\n        break;\n      case \"addMessage\":\n        if (lastCreated) {\n          if (param.to !== lastCreated) {\n            throw new Error(\"The created participant \" + lastCreated + \" does not have an associated creating message after its declaration. Please check the sequence diagram.\");\n          } else {\n            lastCreated = void 0;\n          }\n        } else if (lastDestroyed) {\n          if (param.to !== lastDestroyed && param.from !== lastDestroyed) {\n            throw new Error(\"The destroyed participant \" + lastDestroyed + \" does not have an associated destroying message after its declaration. Please check the sequence diagram.\");\n          } else {\n            lastDestroyed = void 0;\n          }\n        }\n        addSignal(param.from, param.to, param.msg, param.signalType, param.activate);\n        break;\n      case \"boxStart\":\n        addBox(param.boxData);\n        break;\n      case \"boxEnd\":\n        boxEnd();\n        break;\n      case \"loopStart\":\n        addSignal(void 0, void 0, param.loopText, param.signalType);\n        break;\n      case \"loopEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"rectStart\":\n        addSignal(void 0, void 0, param.color, param.signalType);\n        break;\n      case \"rectEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"optStart\":\n        addSignal(void 0, void 0, param.optText, param.signalType);\n        break;\n      case \"optEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"altStart\":\n        addSignal(void 0, void 0, param.altText, param.signalType);\n        break;\n      case \"else\":\n        addSignal(void 0, void 0, param.altText, param.signalType);\n        break;\n      case \"altEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"setAccTitle\":\n        setAccTitle(param.text);\n        break;\n      case \"parStart\":\n        addSignal(void 0, void 0, param.parText, param.signalType);\n        break;\n      case \"and\":\n        addSignal(void 0, void 0, param.parText, param.signalType);\n        break;\n      case \"parEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"criticalStart\":\n        addSignal(void 0, void 0, param.criticalText, param.signalType);\n        break;\n      case \"option\":\n        addSignal(void 0, void 0, param.optionText, param.signalType);\n        break;\n      case \"criticalEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"breakStart\":\n        addSignal(void 0, void 0, param.breakText, param.signalType);\n        break;\n      case \"breakEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n    }\n  }\n};\nconst db = {\n  addActor,\n  addMessage,\n  addSignal,\n  addLinks,\n  addDetails,\n  addProperties,\n  autoWrap,\n  setWrap,\n  enableSequenceNumbers,\n  disableSequenceNumbers,\n  showSequenceNumbers,\n  getMessages,\n  getActors,\n  getCreatedActors,\n  getDestroyedActors,\n  getActor,\n  getActorKeys,\n  getActorProperty,\n  getAccTitle,\n  getBoxes,\n  getDiagramTitle,\n  setDiagramTitle,\n  getConfig: () => getConfig().sequence,\n  clear,\n  parseMessage,\n  parseBoxData,\n  LINETYPE,\n  ARROWTYPE,\n  PLACEMENT,\n  addNote,\n  setAccTitle,\n  apply,\n  setAccDescription,\n  getAccDescription,\n  hasAtLeastOneBox,\n  hasAtLeastOneBoxWithTitle\n};\nconst getStyles = options => \".actor {\\n    stroke: \".concat(options.actorBorder, \";\\n    fill: \").concat(options.actorBkg, \";\\n  }\\n\\n  text.actor > tspan {\\n    fill: \").concat(options.actorTextColor, \";\\n    stroke: none;\\n  }\\n\\n  .actor-line {\\n    stroke: \").concat(options.actorLineColor, \";\\n  }\\n\\n  .messageLine0 {\\n    stroke-width: 1.5;\\n    stroke-dasharray: none;\\n    stroke: \").concat(options.signalColor, \";\\n  }\\n\\n  .messageLine1 {\\n    stroke-width: 1.5;\\n    stroke-dasharray: 2, 2;\\n    stroke: \").concat(options.signalColor, \";\\n  }\\n\\n  #arrowhead path {\\n    fill: \").concat(options.signalColor, \";\\n    stroke: \").concat(options.signalColor, \";\\n  }\\n\\n  .sequenceNumber {\\n    fill: \").concat(options.sequenceNumberColor, \";\\n  }\\n\\n  #sequencenumber {\\n    fill: \").concat(options.signalColor, \";\\n  }\\n\\n  #crosshead path {\\n    fill: \").concat(options.signalColor, \";\\n    stroke: \").concat(options.signalColor, \";\\n  }\\n\\n  .messageText {\\n    fill: \").concat(options.signalTextColor, \";\\n    stroke: none;\\n  }\\n\\n  .labelBox {\\n    stroke: \").concat(options.labelBoxBorderColor, \";\\n    fill: \").concat(options.labelBoxBkgColor, \";\\n  }\\n\\n  .labelText, .labelText > tspan {\\n    fill: \").concat(options.labelTextColor, \";\\n    stroke: none;\\n  }\\n\\n  .loopText, .loopText > tspan {\\n    fill: \").concat(options.loopTextColor, \";\\n    stroke: none;\\n  }\\n\\n  .loopLine {\\n    stroke-width: 2px;\\n    stroke-dasharray: 2, 2;\\n    stroke: \").concat(options.labelBoxBorderColor, \";\\n    fill: \").concat(options.labelBoxBorderColor, \";\\n  }\\n\\n  .note {\\n    //stroke: #decc93;\\n    stroke: \").concat(options.noteBorderColor, \";\\n    fill: \").concat(options.noteBkgColor, \";\\n  }\\n\\n  .noteText, .noteText > tspan {\\n    fill: \").concat(options.noteTextColor, \";\\n    stroke: none;\\n  }\\n\\n  .activation0 {\\n    fill: \").concat(options.activationBkgColor, \";\\n    stroke: \").concat(options.activationBorderColor, \";\\n  }\\n\\n  .activation1 {\\n    fill: \").concat(options.activationBkgColor, \";\\n    stroke: \").concat(options.activationBorderColor, \";\\n  }\\n\\n  .activation2 {\\n    fill: \").concat(options.activationBkgColor, \";\\n    stroke: \").concat(options.activationBorderColor, \";\\n  }\\n\\n  .actorPopupMenu {\\n    position: absolute;\\n  }\\n\\n  .actorPopupMenuPanel {\\n    position: absolute;\\n    fill: \").concat(options.actorBkg, \";\\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\\n    filter: drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));\\n}\\n  .actor-man line {\\n    stroke: \").concat(options.actorBorder, \";\\n    fill: \").concat(options.actorBkg, \";\\n  }\\n  .actor-man circle, line {\\n    stroke: \").concat(options.actorBorder, \";\\n    fill: \").concat(options.actorBkg, \";\\n    stroke-width: 2px;\\n  }\\n\");\nconst styles = getStyles;\nconst ACTOR_TYPE_WIDTH = 18 * 2;\nconst drawRect = function (elem, rectData) {\n  return drawRect$1(elem, rectData);\n};\nconst addPopupInteraction = (id, actorCnt2) => {\n  addFunction(() => {\n    const arr = document.querySelectorAll(id);\n    if (arr.length === 0) {\n      return;\n    }\n    arr[0].addEventListener(\"mouseover\", function () {\n      popupMenuUpFunc(\"actor\" + actorCnt2 + \"_popup\");\n    });\n    arr[0].addEventListener(\"mouseout\", function () {\n      popupMenuDownFunc(\"actor\" + actorCnt2 + \"_popup\");\n    });\n  });\n};\nconst drawPopup = function (elem, actor, minMenuWidth, textAttrs, forceMenus) {\n  if (actor.links === void 0 || actor.links === null || Object.keys(actor.links).length === 0) {\n    return {\n      height: 0,\n      width: 0\n    };\n  }\n  const links = actor.links;\n  const actorCnt2 = actor.actorCnt;\n  const rectData = actor.rectData;\n  var displayValue = \"none\";\n  if (forceMenus) {\n    displayValue = \"block !important\";\n  }\n  const g = elem.append(\"g\");\n  g.attr(\"id\", \"actor\" + actorCnt2 + \"_popup\");\n  g.attr(\"class\", \"actorPopupMenu\");\n  g.attr(\"display\", displayValue);\n  addPopupInteraction(\"#actor\" + actorCnt2 + \"_popup\", actorCnt2);\n  var actorClass = \"\";\n  if (rectData.class !== void 0) {\n    actorClass = \" \" + rectData.class;\n  }\n  let menuWidth = rectData.width > minMenuWidth ? rectData.width : minMenuWidth;\n  const rectElem = g.append(\"rect\");\n  rectElem.attr(\"class\", \"actorPopupMenuPanel\" + actorClass);\n  rectElem.attr(\"x\", rectData.x);\n  rectElem.attr(\"y\", rectData.height);\n  rectElem.attr(\"fill\", rectData.fill);\n  rectElem.attr(\"stroke\", rectData.stroke);\n  rectElem.attr(\"width\", menuWidth);\n  rectElem.attr(\"height\", rectData.height);\n  rectElem.attr(\"rx\", rectData.rx);\n  rectElem.attr(\"ry\", rectData.ry);\n  if (links != null) {\n    var linkY = 20;\n    for (let key in links) {\n      var linkElem = g.append(\"a\");\n      var sanitizedLink = sanitizeUrl(links[key]);\n      linkElem.attr(\"xlink:href\", sanitizedLink);\n      linkElem.attr(\"target\", \"_blank\");\n      _drawMenuItemTextCandidateFunc(textAttrs)(key, linkElem, rectData.x + 10, rectData.height + linkY, menuWidth, 20, {\n        class: \"actor\"\n      }, textAttrs);\n      linkY += 30;\n    }\n  }\n  rectElem.attr(\"height\", linkY);\n  return {\n    height: rectData.height + linkY,\n    width: menuWidth\n  };\n};\nconst popupMenu = function (popid) {\n  return \"var pu = document.getElementById('\" + popid + \"'); if (pu != null) { pu.style.display = 'block'; }\";\n};\nconst popdownMenu = function (popid) {\n  return \"var pu = document.getElementById('\" + popid + \"'); if (pu != null) { pu.style.display = 'none'; }\";\n};\nconst popupMenuUpFunc = function (popupId) {\n  var pu = document.getElementById(popupId);\n  if (pu != null) {\n    pu.style.display = \"block\";\n  }\n};\nconst popupMenuDownFunc = function (popupId) {\n  var pu = document.getElementById(popupId);\n  if (pu != null) {\n    pu.style.display = \"none\";\n  }\n};\nconst drawText = function (elem, textData) {\n  let prevTextHeight = 0;\n  let textHeight = 0;\n  const lines = textData.text.split(common.lineBreakRegex);\n  const [_textFontSize, _textFontSizePx] = parseFontSize(textData.fontSize);\n  let textElems = [];\n  let dy = 0;\n  let yfunc = () => textData.y;\n  if (textData.valign !== void 0 && textData.textMargin !== void 0 && textData.textMargin > 0) {\n    switch (textData.valign) {\n      case \"top\":\n      case \"start\":\n        yfunc = () => Math.round(textData.y + textData.textMargin);\n        break;\n      case \"middle\":\n      case \"center\":\n        yfunc = () => Math.round(textData.y + (prevTextHeight + textHeight + textData.textMargin) / 2);\n        break;\n      case \"bottom\":\n      case \"end\":\n        yfunc = () => Math.round(textData.y + (prevTextHeight + textHeight + 2 * textData.textMargin) - textData.textMargin);\n        break;\n    }\n  }\n  if (textData.anchor !== void 0 && textData.textMargin !== void 0 && textData.width !== void 0) {\n    switch (textData.anchor) {\n      case \"left\":\n      case \"start\":\n        textData.x = Math.round(textData.x + textData.textMargin);\n        textData.anchor = \"start\";\n        textData.dominantBaseline = \"middle\";\n        textData.alignmentBaseline = \"middle\";\n        break;\n      case \"middle\":\n      case \"center\":\n        textData.x = Math.round(textData.x + textData.width / 2);\n        textData.anchor = \"middle\";\n        textData.dominantBaseline = \"middle\";\n        textData.alignmentBaseline = \"middle\";\n        break;\n      case \"right\":\n      case \"end\":\n        textData.x = Math.round(textData.x + textData.width - textData.textMargin);\n        textData.anchor = \"end\";\n        textData.dominantBaseline = \"middle\";\n        textData.alignmentBaseline = \"middle\";\n        break;\n    }\n  }\n  for (let [i, line] of lines.entries()) {\n    if (textData.textMargin !== void 0 && textData.textMargin === 0 && _textFontSize !== void 0) {\n      dy = i * _textFontSize;\n    }\n    const textElem = elem.append(\"text\");\n    textElem.attr(\"x\", textData.x);\n    textElem.attr(\"y\", yfunc());\n    if (textData.anchor !== void 0) {\n      textElem.attr(\"text-anchor\", textData.anchor).attr(\"dominant-baseline\", textData.dominantBaseline).attr(\"alignment-baseline\", textData.alignmentBaseline);\n    }\n    if (textData.fontFamily !== void 0) {\n      textElem.style(\"font-family\", textData.fontFamily);\n    }\n    if (_textFontSizePx !== void 0) {\n      textElem.style(\"font-size\", _textFontSizePx);\n    }\n    if (textData.fontWeight !== void 0) {\n      textElem.style(\"font-weight\", textData.fontWeight);\n    }\n    if (textData.fill !== void 0) {\n      textElem.attr(\"fill\", textData.fill);\n    }\n    if (textData.class !== void 0) {\n      textElem.attr(\"class\", textData.class);\n    }\n    if (textData.dy !== void 0) {\n      textElem.attr(\"dy\", textData.dy);\n    } else if (dy !== 0) {\n      textElem.attr(\"dy\", dy);\n    }\n    const text = line || ZERO_WIDTH_SPACE;\n    if (textData.tspan) {\n      const span = textElem.append(\"tspan\");\n      span.attr(\"x\", textData.x);\n      if (textData.fill !== void 0) {\n        span.attr(\"fill\", textData.fill);\n      }\n      span.text(text);\n    } else {\n      textElem.text(text);\n    }\n    if (textData.valign !== void 0 && textData.textMargin !== void 0 && textData.textMargin > 0) {\n      textHeight += (textElem._groups || textElem)[0][0].getBBox().height;\n      prevTextHeight = textHeight;\n    }\n    textElems.push(textElem);\n  }\n  return textElems;\n};\nconst drawLabel = function (elem, txtObject) {\n  function genPoints(x, y, width, height, cut) {\n    return x + \",\" + y + \" \" + (x + width) + \",\" + y + \" \" + (x + width) + \",\" + (y + height - cut) + \" \" + (x + width - cut * 1.2) + \",\" + (y + height) + \" \" + x + \",\" + (y + height);\n  }\n  const polygon = elem.append(\"polygon\");\n  polygon.attr(\"points\", genPoints(txtObject.x, txtObject.y, txtObject.width, txtObject.height, 7));\n  polygon.attr(\"class\", \"labelBox\");\n  txtObject.y = txtObject.y + txtObject.height / 2;\n  drawText(elem, txtObject);\n  return polygon;\n};\nlet actorCnt = -1;\nconst fixLifeLineHeights = (diagram2, actors2, actorKeys, conf2) => {\n  if (!diagram2.select) {\n    return;\n  }\n  actorKeys.forEach(actorKey => {\n    const actor = actors2[actorKey];\n    const actorDOM = diagram2.select(\"#actor\" + actor.actorCnt);\n    if (!conf2.mirrorActors && actor.stopy) {\n      actorDOM.attr(\"y2\", actor.stopy + actor.height / 2);\n    } else if (conf2.mirrorActors) {\n      actorDOM.attr(\"y2\", actor.stopy);\n    }\n  });\n};\nconst drawActorTypeParticipant = function (elem, actor, conf2, isFooter) {\n  const actorY = isFooter ? actor.stopy : actor.starty;\n  const center = actor.x + actor.width / 2;\n  const centerY = actorY + 5;\n  const boxpluslineGroup = elem.append(\"g\").lower();\n  var g = boxpluslineGroup;\n  if (!isFooter) {\n    actorCnt++;\n    g.append(\"line\").attr(\"id\", \"actor\" + actorCnt).attr(\"x1\", center).attr(\"y1\", centerY).attr(\"x2\", center).attr(\"y2\", 2e3).attr(\"class\", \"actor-line\").attr(\"class\", \"200\").attr(\"stroke-width\", \"0.5px\").attr(\"stroke\", \"#999\");\n    g = boxpluslineGroup.append(\"g\");\n    actor.actorCnt = actorCnt;\n    if (actor.links != null) {\n      g.attr(\"id\", \"root-\" + actorCnt);\n      addPopupInteraction(\"#root-\" + actorCnt, actorCnt);\n    }\n  }\n  const rect = getNoteRect$1();\n  var cssclass = \"actor\";\n  if (actor.properties != null && actor.properties[\"class\"]) {\n    cssclass = actor.properties[\"class\"];\n  } else {\n    rect.fill = \"#eaeaea\";\n  }\n  rect.x = actor.x;\n  rect.y = actorY;\n  rect.width = actor.width;\n  rect.height = actor.height;\n  rect.class = cssclass;\n  rect.rx = 3;\n  rect.ry = 3;\n  const rectElem = drawRect(g, rect);\n  actor.rectData = rect;\n  if (actor.properties != null && actor.properties[\"icon\"]) {\n    const iconSrc = actor.properties[\"icon\"].trim();\n    if (iconSrc.charAt(0) === \"@\") {\n      drawEmbeddedImage(g, rect.x + rect.width - 20, rect.y + 10, iconSrc.substr(1));\n    } else {\n      drawImage(g, rect.x + rect.width - 20, rect.y + 10, iconSrc);\n    }\n  }\n  _drawTextCandidateFunc(conf2)(actor.description, g, rect.x, rect.y, rect.width, rect.height, {\n    class: \"actor\"\n  }, conf2);\n  let height = actor.height;\n  if (rectElem.node) {\n    const bounds2 = rectElem.node().getBBox();\n    actor.height = bounds2.height;\n    height = bounds2.height;\n  }\n  return height;\n};\nconst drawActorTypeActor = function (elem, actor, conf2, isFooter) {\n  const actorY = isFooter ? actor.stopy : actor.starty;\n  const center = actor.x + actor.width / 2;\n  const centerY = actorY + 80;\n  elem.lower();\n  if (!isFooter) {\n    actorCnt++;\n    elem.append(\"line\").attr(\"id\", \"actor\" + actorCnt).attr(\"x1\", center).attr(\"y1\", centerY).attr(\"x2\", center).attr(\"y2\", 2e3).attr(\"class\", \"actor-line\").attr(\"class\", \"200\").attr(\"stroke-width\", \"0.5px\").attr(\"stroke\", \"#999\");\n    actor.actorCnt = actorCnt;\n  }\n  const actElem = elem.append(\"g\");\n  actElem.attr(\"class\", \"actor-man\");\n  const rect = getNoteRect$1();\n  rect.x = actor.x;\n  rect.y = actorY;\n  rect.fill = \"#eaeaea\";\n  rect.width = actor.width;\n  rect.height = actor.height;\n  rect.class = \"actor\";\n  rect.rx = 3;\n  rect.ry = 3;\n  actElem.append(\"line\").attr(\"id\", \"actor-man-torso\" + actorCnt).attr(\"x1\", center).attr(\"y1\", actorY + 25).attr(\"x2\", center).attr(\"y2\", actorY + 45);\n  actElem.append(\"line\").attr(\"id\", \"actor-man-arms\" + actorCnt).attr(\"x1\", center - ACTOR_TYPE_WIDTH / 2).attr(\"y1\", actorY + 33).attr(\"x2\", center + ACTOR_TYPE_WIDTH / 2).attr(\"y2\", actorY + 33);\n  actElem.append(\"line\").attr(\"x1\", center - ACTOR_TYPE_WIDTH / 2).attr(\"y1\", actorY + 60).attr(\"x2\", center).attr(\"y2\", actorY + 45);\n  actElem.append(\"line\").attr(\"x1\", center).attr(\"y1\", actorY + 45).attr(\"x2\", center + ACTOR_TYPE_WIDTH / 2 - 2).attr(\"y2\", actorY + 60);\n  const circle = actElem.append(\"circle\");\n  circle.attr(\"cx\", actor.x + actor.width / 2);\n  circle.attr(\"cy\", actorY + 10);\n  circle.attr(\"r\", 15);\n  circle.attr(\"width\", actor.width);\n  circle.attr(\"height\", actor.height);\n  const bounds2 = actElem.node().getBBox();\n  actor.height = bounds2.height;\n  _drawTextCandidateFunc(conf2)(actor.description, actElem, rect.x, rect.y + 35, rect.width, rect.height, {\n    class: \"actor\"\n  }, conf2);\n  return actor.height;\n};\nconst drawActor = function (elem, actor, conf2, isFooter) {\n  switch (actor.type) {\n    case \"actor\":\n      return drawActorTypeActor(elem, actor, conf2, isFooter);\n    case \"participant\":\n      return drawActorTypeParticipant(elem, actor, conf2, isFooter);\n  }\n};\nconst drawBox = function (elem, box, conf2) {\n  const boxplustextGroup = elem.append(\"g\");\n  const g = boxplustextGroup;\n  drawBackgroundRect(g, box);\n  if (box.name) {\n    _drawTextCandidateFunc(conf2)(box.name, g, box.x, box.y + (box.textMaxHeight || 0) / 2, box.width, 0, {\n      class: \"text\"\n    }, conf2);\n  }\n  g.lower();\n};\nconst anchorElement = function (elem) {\n  return elem.append(\"g\");\n};\nconst drawActivation = function (elem, bounds2, verticalPos, conf2, actorActivations2) {\n  const rect = getNoteRect$1();\n  const g = bounds2.anchored;\n  rect.x = bounds2.startx;\n  rect.y = bounds2.starty;\n  rect.class = \"activation\" + actorActivations2 % 3;\n  rect.width = bounds2.stopx - bounds2.startx;\n  rect.height = verticalPos - bounds2.starty;\n  drawRect(g, rect);\n};\nconst drawLoop = function (elem, loopModel, labelText, conf2) {\n  const {\n    boxMargin,\n    boxTextMargin,\n    labelBoxHeight,\n    labelBoxWidth,\n    messageFontFamily: fontFamily,\n    messageFontSize: fontSize,\n    messageFontWeight: fontWeight\n  } = conf2;\n  const g = elem.append(\"g\");\n  const drawLoopLine = function (startx, starty, stopx, stopy) {\n    return g.append(\"line\").attr(\"x1\", startx).attr(\"y1\", starty).attr(\"x2\", stopx).attr(\"y2\", stopy).attr(\"class\", \"loopLine\");\n  };\n  drawLoopLine(loopModel.startx, loopModel.starty, loopModel.stopx, loopModel.starty);\n  drawLoopLine(loopModel.stopx, loopModel.starty, loopModel.stopx, loopModel.stopy);\n  drawLoopLine(loopModel.startx, loopModel.stopy, loopModel.stopx, loopModel.stopy);\n  drawLoopLine(loopModel.startx, loopModel.starty, loopModel.startx, loopModel.stopy);\n  if (loopModel.sections !== void 0) {\n    loopModel.sections.forEach(function (item) {\n      drawLoopLine(loopModel.startx, item.y, loopModel.stopx, item.y).style(\"stroke-dasharray\", \"3, 3\");\n    });\n  }\n  let txt = getTextObj$1();\n  txt.text = labelText;\n  txt.x = loopModel.startx;\n  txt.y = loopModel.starty;\n  txt.fontFamily = fontFamily;\n  txt.fontSize = fontSize;\n  txt.fontWeight = fontWeight;\n  txt.anchor = \"middle\";\n  txt.valign = \"middle\";\n  txt.tspan = false;\n  txt.width = labelBoxWidth || 50;\n  txt.height = labelBoxHeight || 20;\n  txt.textMargin = boxTextMargin;\n  txt.class = \"labelText\";\n  drawLabel(g, txt);\n  txt = getTextObj();\n  txt.text = loopModel.title;\n  txt.x = loopModel.startx + labelBoxWidth / 2 + (loopModel.stopx - loopModel.startx) / 2;\n  txt.y = loopModel.starty + boxMargin + boxTextMargin;\n  txt.anchor = \"middle\";\n  txt.valign = \"middle\";\n  txt.textMargin = boxTextMargin;\n  txt.class = \"loopText\";\n  txt.fontFamily = fontFamily;\n  txt.fontSize = fontSize;\n  txt.fontWeight = fontWeight;\n  txt.wrap = true;\n  let textElem = drawText(g, txt);\n  if (loopModel.sectionTitles !== void 0) {\n    loopModel.sectionTitles.forEach(function (item, idx) {\n      if (item.message) {\n        txt.text = item.message;\n        txt.x = loopModel.startx + (loopModel.stopx - loopModel.startx) / 2;\n        txt.y = loopModel.sections[idx].y + boxMargin + boxTextMargin;\n        txt.class = \"loopText\";\n        txt.anchor = \"middle\";\n        txt.valign = \"middle\";\n        txt.tspan = false;\n        txt.fontFamily = fontFamily;\n        txt.fontSize = fontSize;\n        txt.fontWeight = fontWeight;\n        txt.wrap = loopModel.wrap;\n        textElem = drawText(g, txt);\n        let sectionHeight = Math.round(textElem.map(te => (te._groups || te)[0][0].getBBox().height).reduce((acc, curr) => acc + curr));\n        loopModel.sections[idx].height += sectionHeight - (boxMargin + boxTextMargin);\n      }\n    });\n  }\n  loopModel.height = Math.round(loopModel.stopy - loopModel.starty);\n  return g;\n};\nconst drawBackgroundRect = function (elem, bounds2) {\n  drawBackgroundRect$1(elem, bounds2);\n};\nconst insertDatabaseIcon = function (elem) {\n  elem.append(\"defs\").append(\"symbol\").attr(\"id\", \"database\").attr(\"fill-rule\", \"evenodd\").attr(\"clip-rule\", \"evenodd\").append(\"path\").attr(\"transform\", \"scale(.5)\").attr(\"d\", \"M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z\");\n};\nconst insertComputerIcon = function (elem) {\n  elem.append(\"defs\").append(\"symbol\").attr(\"id\", \"computer\").attr(\"width\", \"24\").attr(\"height\", \"24\").append(\"path\").attr(\"transform\", \"scale(.5)\").attr(\"d\", \"M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z\");\n};\nconst insertClockIcon = function (elem) {\n  elem.append(\"defs\").append(\"symbol\").attr(\"id\", \"clock\").attr(\"width\", \"24\").attr(\"height\", \"24\").append(\"path\").attr(\"transform\", \"scale(.5)\").attr(\"d\", \"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z\");\n};\nconst insertArrowHead = function (elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 7.9).attr(\"refY\", 5).attr(\"markerUnits\", \"userSpaceOnUse\").attr(\"markerWidth\", 12).attr(\"markerHeight\", 12).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\");\n};\nconst insertArrowFilledHead = function (elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"filled-head\").attr(\"refX\", 15.5).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L14,7 L9,1 Z\");\n};\nconst insertSequenceNumber = function (elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"sequencenumber\").attr(\"refX\", 15).attr(\"refY\", 15).attr(\"markerWidth\", 60).attr(\"markerHeight\", 40).attr(\"orient\", \"auto\").append(\"circle\").attr(\"cx\", 15).attr(\"cy\", 15).attr(\"r\", 6);\n};\nconst insertArrowCrossHead = function (elem) {\n  const defs = elem.append(\"defs\");\n  const marker = defs.append(\"marker\").attr(\"id\", \"crosshead\").attr(\"markerWidth\", 15).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").attr(\"refX\", 4).attr(\"refY\", 4.5);\n  marker.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"#000000\").style(\"stroke-dasharray\", \"0, 0\").attr(\"stroke-width\", \"1pt\").attr(\"d\", \"M 1,2 L 6,7 M 6,2 L 1,7\");\n};\nconst getTextObj = function () {\n  return {\n    x: 0,\n    y: 0,\n    fill: void 0,\n    anchor: void 0,\n    style: \"#666\",\n    width: void 0,\n    height: void 0,\n    textMargin: 0,\n    rx: 0,\n    ry: 0,\n    tspan: true,\n    valign: void 0\n  };\n};\nconst getNoteRect = function () {\n  return {\n    x: 0,\n    y: 0,\n    fill: \"#EDF2AE\",\n    stroke: \"#666\",\n    width: 100,\n    anchor: \"start\",\n    height: 100,\n    rx: 0,\n    ry: 0\n  };\n};\nconst _drawTextCandidateFunc = function () {\n  function byText(content, g, x, y, width, height, textAttrs) {\n    const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y + height / 2 + 5).style(\"text-anchor\", \"middle\").text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n  function byTspan(content, g, x, y, width, height, textAttrs, conf2) {\n    const {\n      actorFontSize,\n      actorFontFamily,\n      actorFontWeight\n    } = conf2;\n    const [_actorFontSize, _actorFontSizePx] = parseFontSize(actorFontSize);\n    const lines = content.split(common.lineBreakRegex);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * _actorFontSize - _actorFontSize * (lines.length - 1) / 2;\n      const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y).style(\"text-anchor\", \"middle\").style(\"font-size\", _actorFontSizePx).style(\"font-weight\", actorFontWeight).style(\"font-family\", actorFontFamily);\n      text.append(\"tspan\").attr(\"x\", x + width / 2).attr(\"dy\", dy).text(lines[i]);\n      text.attr(\"y\", y + height / 2).attr(\"dominant-baseline\", \"central\").attr(\"alignment-baseline\", \"central\");\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n  function byFo(content, g, x, y, width, height, textAttrs, conf2) {\n    const s = g.append(\"switch\");\n    const f = s.append(\"foreignObject\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height);\n    const text = f.append(\"xhtml:div\").style(\"display\", \"table\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n    text.append(\"div\").style(\"display\", \"table-cell\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").text(content);\n    byTspan(content, s, x, y, width, height, textAttrs, conf2);\n    _setTextAttrs(text, textAttrs);\n  }\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (fromTextAttrsDict.hasOwnProperty(key)) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n  return function (conf2) {\n    return conf2.textPlacement === \"fo\" ? byFo : conf2.textPlacement === \"old\" ? byText : byTspan;\n  };\n}();\nconst _drawMenuItemTextCandidateFunc = function () {\n  function byText(content, g, x, y, width, height, textAttrs) {\n    const text = g.append(\"text\").attr(\"x\", x).attr(\"y\", y).style(\"text-anchor\", \"start\").text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n  function byTspan(content, g, x, y, width, height, textAttrs, conf2) {\n    const {\n      actorFontSize,\n      actorFontFamily,\n      actorFontWeight\n    } = conf2;\n    const lines = content.split(common.lineBreakRegex);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * actorFontSize - actorFontSize * (lines.length - 1) / 2;\n      const text = g.append(\"text\").attr(\"x\", x).attr(\"y\", y).style(\"text-anchor\", \"start\").style(\"font-size\", actorFontSize).style(\"font-weight\", actorFontWeight).style(\"font-family\", actorFontFamily);\n      text.append(\"tspan\").attr(\"x\", x).attr(\"dy\", dy).text(lines[i]);\n      text.attr(\"y\", y + height / 2).attr(\"dominant-baseline\", \"central\").attr(\"alignment-baseline\", \"central\");\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n  function byFo(content, g, x, y, width, height, textAttrs, conf2) {\n    const s = g.append(\"switch\");\n    const f = s.append(\"foreignObject\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height);\n    const text = f.append(\"xhtml:div\").style(\"display\", \"table\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n    text.append(\"div\").style(\"display\", \"table-cell\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").text(content);\n    byTspan(content, s, x, y, width, height, textAttrs, conf2);\n    _setTextAttrs(text, textAttrs);\n  }\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (fromTextAttrsDict.hasOwnProperty(key)) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n  return function (conf2) {\n    return conf2.textPlacement === \"fo\" ? byFo : conf2.textPlacement === \"old\" ? byText : byTspan;\n  };\n}();\nconst svgDraw = {\n  drawRect,\n  drawText,\n  drawLabel,\n  drawActor,\n  drawBox,\n  drawPopup,\n  anchorElement,\n  drawActivation,\n  drawLoop,\n  drawBackgroundRect,\n  insertArrowHead,\n  insertArrowFilledHead,\n  insertSequenceNumber,\n  insertArrowCrossHead,\n  insertDatabaseIcon,\n  insertComputerIcon,\n  insertClockIcon,\n  getTextObj,\n  getNoteRect,\n  popupMenu,\n  popdownMenu,\n  fixLifeLineHeights,\n  sanitizeUrl\n};\nlet conf = {};\nconst bounds = {\n  data: {\n    startx: void 0,\n    stopx: void 0,\n    starty: void 0,\n    stopy: void 0\n  },\n  verticalPos: 0,\n  sequenceItems: [],\n  activations: [],\n  models: {\n    getHeight: function () {\n      return Math.max.apply(null, this.actors.length === 0 ? [0] : this.actors.map(actor => actor.height || 0)) + (this.loops.length === 0 ? 0 : this.loops.map(it => it.height || 0).reduce((acc, h) => acc + h)) + (this.messages.length === 0 ? 0 : this.messages.map(it => it.height || 0).reduce((acc, h) => acc + h)) + (this.notes.length === 0 ? 0 : this.notes.map(it => it.height || 0).reduce((acc, h) => acc + h));\n    },\n    clear: function () {\n      this.actors = [];\n      this.boxes = [];\n      this.loops = [];\n      this.messages = [];\n      this.notes = [];\n    },\n    addBox: function (boxModel) {\n      this.boxes.push(boxModel);\n    },\n    addActor: function (actorModel) {\n      this.actors.push(actorModel);\n    },\n    addLoop: function (loopModel) {\n      this.loops.push(loopModel);\n    },\n    addMessage: function (msgModel) {\n      this.messages.push(msgModel);\n    },\n    addNote: function (noteModel) {\n      this.notes.push(noteModel);\n    },\n    lastActor: function () {\n      return this.actors[this.actors.length - 1];\n    },\n    lastLoop: function () {\n      return this.loops[this.loops.length - 1];\n    },\n    lastMessage: function () {\n      return this.messages[this.messages.length - 1];\n    },\n    lastNote: function () {\n      return this.notes[this.notes.length - 1];\n    },\n    actors: [],\n    boxes: [],\n    loops: [],\n    messages: [],\n    notes: []\n  },\n  init: function () {\n    this.sequenceItems = [];\n    this.activations = [];\n    this.models.clear();\n    this.data = {\n      startx: void 0,\n      stopx: void 0,\n      starty: void 0,\n      stopy: void 0\n    };\n    this.verticalPos = 0;\n    setConf(getConfig());\n  },\n  updateVal: function (obj, key, val, fun) {\n    if (obj[key] === void 0) {\n      obj[key] = val;\n    } else {\n      obj[key] = fun(val, obj[key]);\n    }\n  },\n  updateBounds: function (startx, starty, stopx, stopy) {\n    const _self = this;\n    let cnt = 0;\n    function updateFn(type) {\n      return function updateItemBounds(item) {\n        cnt++;\n        const n = _self.sequenceItems.length - cnt + 1;\n        _self.updateVal(item, \"starty\", starty - n * conf.boxMargin, Math.min);\n        _self.updateVal(item, \"stopy\", stopy + n * conf.boxMargin, Math.max);\n        _self.updateVal(bounds.data, \"startx\", startx - n * conf.boxMargin, Math.min);\n        _self.updateVal(bounds.data, \"stopx\", stopx + n * conf.boxMargin, Math.max);\n        if (!(type === \"activation\")) {\n          _self.updateVal(item, \"startx\", startx - n * conf.boxMargin, Math.min);\n          _self.updateVal(item, \"stopx\", stopx + n * conf.boxMargin, Math.max);\n          _self.updateVal(bounds.data, \"starty\", starty - n * conf.boxMargin, Math.min);\n          _self.updateVal(bounds.data, \"stopy\", stopy + n * conf.boxMargin, Math.max);\n        }\n      };\n    }\n    this.sequenceItems.forEach(updateFn());\n    this.activations.forEach(updateFn(\"activation\"));\n  },\n  insert: function (startx, starty, stopx, stopy) {\n    const _startx = common.getMin(startx, stopx);\n    const _stopx = common.getMax(startx, stopx);\n    const _starty = common.getMin(starty, stopy);\n    const _stopy = common.getMax(starty, stopy);\n    this.updateVal(bounds.data, \"startx\", _startx, Math.min);\n    this.updateVal(bounds.data, \"starty\", _starty, Math.min);\n    this.updateVal(bounds.data, \"stopx\", _stopx, Math.max);\n    this.updateVal(bounds.data, \"stopy\", _stopy, Math.max);\n    this.updateBounds(_startx, _starty, _stopx, _stopy);\n  },\n  newActivation: function (message, diagram2, actors2) {\n    const actorRect = actors2[message.from.actor];\n    const stackedSize = actorActivations(message.from.actor).length || 0;\n    const x = actorRect.x + actorRect.width / 2 + (stackedSize - 1) * conf.activationWidth / 2;\n    this.activations.push({\n      startx: x,\n      starty: this.verticalPos + 2,\n      stopx: x + conf.activationWidth,\n      stopy: void 0,\n      actor: message.from.actor,\n      anchored: svgDraw.anchorElement(diagram2)\n    });\n  },\n  endActivation: function (message) {\n    const lastActorActivationIdx = this.activations.map(function (activation) {\n      return activation.actor;\n    }).lastIndexOf(message.from.actor);\n    return this.activations.splice(lastActorActivationIdx, 1)[0];\n  },\n  createLoop: function () {\n    let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      message: void 0,\n      wrap: false,\n      width: void 0\n    };\n    let fill = arguments.length > 1 ? arguments[1] : undefined;\n    return {\n      startx: void 0,\n      starty: this.verticalPos,\n      stopx: void 0,\n      stopy: void 0,\n      title: title.message,\n      wrap: title.wrap,\n      width: title.width,\n      height: 0,\n      fill\n    };\n  },\n  newLoop: function () {\n    let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      message: void 0,\n      wrap: false,\n      width: void 0\n    };\n    let fill = arguments.length > 1 ? arguments[1] : undefined;\n    this.sequenceItems.push(this.createLoop(title, fill));\n  },\n  endLoop: function () {\n    return this.sequenceItems.pop();\n  },\n  isLoopOverlap: function () {\n    return this.sequenceItems.length ? this.sequenceItems[this.sequenceItems.length - 1].overlap : false;\n  },\n  addSectionToLoop: function (message) {\n    const loop = this.sequenceItems.pop();\n    loop.sections = loop.sections || [];\n    loop.sectionTitles = loop.sectionTitles || [];\n    loop.sections.push({\n      y: bounds.getVerticalPos(),\n      height: 0\n    });\n    loop.sectionTitles.push(message);\n    this.sequenceItems.push(loop);\n  },\n  saveVerticalPos: function () {\n    if (this.isLoopOverlap()) {\n      this.savedVerticalPos = this.verticalPos;\n    }\n  },\n  resetVerticalPos: function () {\n    if (this.isLoopOverlap()) {\n      this.verticalPos = this.savedVerticalPos;\n    }\n  },\n  bumpVerticalPos: function (bump) {\n    this.verticalPos = this.verticalPos + bump;\n    this.data.stopy = common.getMax(this.data.stopy, this.verticalPos);\n  },\n  getVerticalPos: function () {\n    return this.verticalPos;\n  },\n  getBounds: function () {\n    return {\n      bounds: this.data,\n      models: this.models\n    };\n  }\n};\nconst drawNote = function (elem, noteModel) {\n  bounds.bumpVerticalPos(conf.boxMargin);\n  noteModel.height = conf.boxMargin;\n  noteModel.starty = bounds.getVerticalPos();\n  const rect = getNoteRect$1();\n  rect.x = noteModel.startx;\n  rect.y = noteModel.starty;\n  rect.width = noteModel.width || conf.width;\n  rect.class = \"note\";\n  const g = elem.append(\"g\");\n  const rectElem = svgDraw.drawRect(g, rect);\n  const textObj = getTextObj$1();\n  textObj.x = noteModel.startx;\n  textObj.y = noteModel.starty;\n  textObj.width = rect.width;\n  textObj.dy = \"1em\";\n  textObj.text = noteModel.message;\n  textObj.class = \"noteText\";\n  textObj.fontFamily = conf.noteFontFamily;\n  textObj.fontSize = conf.noteFontSize;\n  textObj.fontWeight = conf.noteFontWeight;\n  textObj.anchor = conf.noteAlign;\n  textObj.textMargin = conf.noteMargin;\n  textObj.valign = \"center\";\n  const textElem = drawText(g, textObj);\n  const textHeight = Math.round(textElem.map(te => (te._groups || te)[0][0].getBBox().height).reduce((acc, curr) => acc + curr));\n  rectElem.attr(\"height\", textHeight + 2 * conf.noteMargin);\n  noteModel.height += textHeight + 2 * conf.noteMargin;\n  bounds.bumpVerticalPos(textHeight + 2 * conf.noteMargin);\n  noteModel.stopy = noteModel.starty + textHeight + 2 * conf.noteMargin;\n  noteModel.stopx = noteModel.startx + rect.width;\n  bounds.insert(noteModel.startx, noteModel.starty, noteModel.stopx, noteModel.stopy);\n  bounds.models.addNote(noteModel);\n};\nconst messageFont = cnf => {\n  return {\n    fontFamily: cnf.messageFontFamily,\n    fontSize: cnf.messageFontSize,\n    fontWeight: cnf.messageFontWeight\n  };\n};\nconst noteFont = cnf => {\n  return {\n    fontFamily: cnf.noteFontFamily,\n    fontSize: cnf.noteFontSize,\n    fontWeight: cnf.noteFontWeight\n  };\n};\nconst actorFont = cnf => {\n  return {\n    fontFamily: cnf.actorFontFamily,\n    fontSize: cnf.actorFontSize,\n    fontWeight: cnf.actorFontWeight\n  };\n};\nfunction boundMessage(_diagram, msgModel) {\n  bounds.bumpVerticalPos(10);\n  const {\n    startx,\n    stopx,\n    message\n  } = msgModel;\n  const lines = common.splitBreaks(message).length;\n  const textDims = utils.calculateTextDimensions(message, messageFont(conf));\n  const lineHeight = textDims.height / lines;\n  msgModel.height += lineHeight;\n  bounds.bumpVerticalPos(lineHeight);\n  let lineStartY;\n  let totalOffset = textDims.height - 10;\n  const textWidth = textDims.width;\n  if (startx === stopx) {\n    lineStartY = bounds.getVerticalPos() + totalOffset;\n    if (!conf.rightAngles) {\n      totalOffset += conf.boxMargin;\n      lineStartY = bounds.getVerticalPos() + totalOffset;\n    }\n    totalOffset += 30;\n    const dx = common.getMax(textWidth / 2, conf.width / 2);\n    bounds.insert(startx - dx, bounds.getVerticalPos() - 10 + totalOffset, stopx + dx, bounds.getVerticalPos() + 30 + totalOffset);\n  } else {\n    totalOffset += conf.boxMargin;\n    lineStartY = bounds.getVerticalPos() + totalOffset;\n    bounds.insert(startx, lineStartY - 10, stopx, lineStartY);\n  }\n  bounds.bumpVerticalPos(totalOffset);\n  msgModel.height += totalOffset;\n  msgModel.stopy = msgModel.starty + msgModel.height;\n  bounds.insert(msgModel.fromBounds, msgModel.starty, msgModel.toBounds, msgModel.stopy);\n  return lineStartY;\n}\nconst drawMessage = function (diagram2, msgModel, lineStartY, diagObj) {\n  const {\n    startx,\n    stopx,\n    starty,\n    message,\n    type,\n    sequenceIndex,\n    sequenceVisible\n  } = msgModel;\n  const textDims = utils.calculateTextDimensions(message, messageFont(conf));\n  const textObj = getTextObj$1();\n  textObj.x = startx;\n  textObj.y = starty + 10;\n  textObj.width = stopx - startx;\n  textObj.class = \"messageText\";\n  textObj.dy = \"1em\";\n  textObj.text = message;\n  textObj.fontFamily = conf.messageFontFamily;\n  textObj.fontSize = conf.messageFontSize;\n  textObj.fontWeight = conf.messageFontWeight;\n  textObj.anchor = conf.messageAlign;\n  textObj.valign = \"center\";\n  textObj.textMargin = conf.wrapPadding;\n  textObj.tspan = false;\n  drawText(diagram2, textObj);\n  const textWidth = textDims.width;\n  let line;\n  if (startx === stopx) {\n    if (conf.rightAngles) {\n      line = diagram2.append(\"path\").attr(\"d\", \"M  \".concat(startx, \",\").concat(lineStartY, \" H \").concat(startx + common.getMax(conf.width / 2, textWidth / 2), \" V \").concat(lineStartY + 25, \" H \").concat(startx));\n    } else {\n      line = diagram2.append(\"path\").attr(\"d\", \"M \" + startx + \",\" + lineStartY + \" C \" + (startx + 60) + \",\" + (lineStartY - 10) + \" \" + (startx + 60) + \",\" + (lineStartY + 30) + \" \" + startx + \",\" + (lineStartY + 20));\n    }\n  } else {\n    line = diagram2.append(\"line\");\n    line.attr(\"x1\", startx);\n    line.attr(\"y1\", lineStartY);\n    line.attr(\"x2\", stopx);\n    line.attr(\"y2\", lineStartY);\n  }\n  if (type === diagObj.db.LINETYPE.DOTTED || type === diagObj.db.LINETYPE.DOTTED_CROSS || type === diagObj.db.LINETYPE.DOTTED_POINT || type === diagObj.db.LINETYPE.DOTTED_OPEN) {\n    line.style(\"stroke-dasharray\", \"3, 3\");\n    line.attr(\"class\", \"messageLine1\");\n  } else {\n    line.attr(\"class\", \"messageLine0\");\n  }\n  let url = \"\";\n  if (conf.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  line.attr(\"stroke-width\", 2);\n  line.attr(\"stroke\", \"none\");\n  line.style(\"fill\", \"none\");\n  if (type === diagObj.db.LINETYPE.SOLID || type === diagObj.db.LINETYPE.DOTTED) {\n    line.attr(\"marker-end\", \"url(\" + url + \"#arrowhead)\");\n  }\n  if (type === diagObj.db.LINETYPE.SOLID_POINT || type === diagObj.db.LINETYPE.DOTTED_POINT) {\n    line.attr(\"marker-end\", \"url(\" + url + \"#filled-head)\");\n  }\n  if (type === diagObj.db.LINETYPE.SOLID_CROSS || type === diagObj.db.LINETYPE.DOTTED_CROSS) {\n    line.attr(\"marker-end\", \"url(\" + url + \"#crosshead)\");\n  }\n  if (sequenceVisible || conf.showSequenceNumbers) {\n    line.attr(\"marker-start\", \"url(\" + url + \"#sequencenumber)\");\n    diagram2.append(\"text\").attr(\"x\", startx).attr(\"y\", lineStartY + 4).attr(\"font-family\", \"sans-serif\").attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"class\", \"sequenceNumber\").text(sequenceIndex);\n  }\n};\nconst addActorRenderingData = function (diagram2, actors2, createdActors2, actorKeys, verticalPos, messages2, isFooter) {\n  let prevWidth = 0;\n  let prevMargin = 0;\n  let prevBox = void 0;\n  let maxHeight = 0;\n  for (const actorKey of actorKeys) {\n    const actor = actors2[actorKey];\n    const box = actor.box;\n    if (prevBox && prevBox != box) {\n      if (!isFooter) {\n        bounds.models.addBox(prevBox);\n      }\n      prevMargin += conf.boxMargin + prevBox.margin;\n    }\n    if (box && box != prevBox) {\n      if (!isFooter) {\n        box.x = prevWidth + prevMargin;\n        box.y = verticalPos;\n      }\n      prevMargin += box.margin;\n    }\n    actor.width = actor.width || conf.width;\n    actor.height = common.getMax(actor.height || conf.height, conf.height);\n    actor.margin = actor.margin || conf.actorMargin;\n    maxHeight = common.getMax(maxHeight, actor.height);\n    if (createdActors2[actor.name]) {\n      prevMargin += actor.width / 2;\n    }\n    actor.x = prevWidth + prevMargin;\n    actor.starty = bounds.getVerticalPos();\n    bounds.insert(actor.x, verticalPos, actor.x + actor.width, actor.height);\n    prevWidth += actor.width + prevMargin;\n    if (actor.box) {\n      actor.box.width = prevWidth + box.margin - actor.box.x;\n    }\n    prevMargin = actor.margin;\n    prevBox = actor.box;\n    bounds.models.addActor(actor);\n  }\n  if (prevBox && !isFooter) {\n    bounds.models.addBox(prevBox);\n  }\n  bounds.bumpVerticalPos(maxHeight);\n};\nconst drawActors = function (diagram2, actors2, actorKeys, isFooter) {\n  if (!isFooter) {\n    for (const actorKey of actorKeys) {\n      const actor = actors2[actorKey];\n      svgDraw.drawActor(diagram2, actor, conf, false);\n    }\n  } else {\n    let maxHeight = 0;\n    bounds.bumpVerticalPos(conf.boxMargin * 2);\n    for (const actorKey of actorKeys) {\n      const actor = actors2[actorKey];\n      if (!actor.stopy) {\n        actor.stopy = bounds.getVerticalPos();\n      }\n      const height = svgDraw.drawActor(diagram2, actor, conf, true);\n      maxHeight = common.getMax(maxHeight, height);\n    }\n    bounds.bumpVerticalPos(maxHeight + conf.boxMargin);\n  }\n};\nconst drawActorsPopup = function (diagram2, actors2, actorKeys, doc) {\n  let maxHeight = 0;\n  let maxWidth = 0;\n  for (const actorKey of actorKeys) {\n    const actor = actors2[actorKey];\n    const minMenuWidth = getRequiredPopupWidth(actor);\n    const menuDimensions = svgDraw.drawPopup(diagram2, actor, minMenuWidth, conf, conf.forceMenus, doc);\n    if (menuDimensions.height > maxHeight) {\n      maxHeight = menuDimensions.height;\n    }\n    if (menuDimensions.width + actor.x > maxWidth) {\n      maxWidth = menuDimensions.width + actor.x;\n    }\n  }\n  return {\n    maxHeight,\n    maxWidth\n  };\n};\nconst setConf = function (cnf) {\n  assignWithDepth(conf, cnf);\n  if (cnf.fontFamily) {\n    conf.actorFontFamily = conf.noteFontFamily = conf.messageFontFamily = cnf.fontFamily;\n  }\n  if (cnf.fontSize) {\n    conf.actorFontSize = conf.noteFontSize = conf.messageFontSize = cnf.fontSize;\n  }\n  if (cnf.fontWeight) {\n    conf.actorFontWeight = conf.noteFontWeight = conf.messageFontWeight = cnf.fontWeight;\n  }\n};\nconst actorActivations = function (actor) {\n  return bounds.activations.filter(function (activation) {\n    return activation.actor === actor;\n  });\n};\nconst activationBounds = function (actor, actors2) {\n  const actorObj = actors2[actor];\n  const activations = actorActivations(actor);\n  const left = activations.reduce(function (acc, activation) {\n    return common.getMin(acc, activation.startx);\n  }, actorObj.x + actorObj.width / 2 - 1);\n  const right = activations.reduce(function (acc, activation) {\n    return common.getMax(acc, activation.stopx);\n  }, actorObj.x + actorObj.width / 2 + 1);\n  return [left, right];\n};\nfunction adjustLoopHeightForWrap(loopWidths, msg, preMargin, postMargin, addLoopFn) {\n  bounds.bumpVerticalPos(preMargin);\n  let heightAdjust = postMargin;\n  if (msg.id && msg.message && loopWidths[msg.id]) {\n    const loopWidth = loopWidths[msg.id].width;\n    const textConf = messageFont(conf);\n    msg.message = utils.wrapLabel(\"[\".concat(msg.message, \"]\"), loopWidth - 2 * conf.wrapPadding, textConf);\n    msg.width = loopWidth;\n    msg.wrap = true;\n    const textDims = utils.calculateTextDimensions(msg.message, textConf);\n    const totalOffset = common.getMax(textDims.height, conf.labelBoxHeight);\n    heightAdjust = postMargin + totalOffset;\n    log.debug(\"\".concat(totalOffset, \" - \").concat(msg.message));\n  }\n  addLoopFn(msg);\n  bounds.bumpVerticalPos(heightAdjust);\n}\nfunction adjustCreatedDestroyedData(msg, msgModel, lineStartY, index, actors2, createdActors2, destroyedActors2) {\n  function receiverAdjustment(actor, adjustment) {\n    if (actor.x < actors2[msg.from].x) {\n      bounds.insert(msgModel.stopx - adjustment, msgModel.starty, msgModel.startx, msgModel.stopy + actor.height / 2 + conf.noteMargin);\n      msgModel.stopx = msgModel.stopx + adjustment;\n    } else {\n      bounds.insert(msgModel.startx, msgModel.starty, msgModel.stopx + adjustment, msgModel.stopy + actor.height / 2 + conf.noteMargin);\n      msgModel.stopx = msgModel.stopx - adjustment;\n    }\n  }\n  function senderAdjustment(actor, adjustment) {\n    if (actor.x < actors2[msg.to].x) {\n      bounds.insert(msgModel.startx - adjustment, msgModel.starty, msgModel.stopx, msgModel.stopy + actor.height / 2 + conf.noteMargin);\n      msgModel.startx = msgModel.startx + adjustment;\n    } else {\n      bounds.insert(msgModel.stopx, msgModel.starty, msgModel.startx + adjustment, msgModel.stopy + actor.height / 2 + conf.noteMargin);\n      msgModel.startx = msgModel.startx - adjustment;\n    }\n  }\n  if (createdActors2[msg.to] == index) {\n    const actor = actors2[msg.to];\n    const adjustment = actor.type == \"actor\" ? ACTOR_TYPE_WIDTH / 2 + 3 : actor.width / 2 + 3;\n    receiverAdjustment(actor, adjustment);\n    actor.starty = lineStartY - actor.height / 2;\n    bounds.bumpVerticalPos(actor.height / 2);\n  } else if (destroyedActors2[msg.from] == index) {\n    const actor = actors2[msg.from];\n    if (conf.mirrorActors) {\n      const adjustment = actor.type == \"actor\" ? ACTOR_TYPE_WIDTH / 2 : actor.width / 2;\n      senderAdjustment(actor, adjustment);\n    }\n    actor.stopy = lineStartY - actor.height / 2;\n    bounds.bumpVerticalPos(actor.height / 2);\n  } else if (destroyedActors2[msg.to] == index) {\n    const actor = actors2[msg.to];\n    if (conf.mirrorActors) {\n      const adjustment = actor.type == \"actor\" ? ACTOR_TYPE_WIDTH / 2 + 3 : actor.width / 2 + 3;\n      receiverAdjustment(actor, adjustment);\n    }\n    actor.stopy = lineStartY - actor.height / 2;\n    bounds.bumpVerticalPos(actor.height / 2);\n  }\n}\nconst draw = function (_text, id, _version, diagObj) {\n  const {\n    securityLevel,\n    sequence\n  } = getConfig();\n  conf = sequence;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  bounds.init();\n  log.debug(diagObj.db);\n  const diagram2 = securityLevel === \"sandbox\" ? root.select(\"[id=\\\"\".concat(id, \"\\\"]\")) : select(\"[id=\\\"\".concat(id, \"\\\"]\"));\n  const actors2 = diagObj.db.getActors();\n  const createdActors2 = diagObj.db.getCreatedActors();\n  const destroyedActors2 = diagObj.db.getDestroyedActors();\n  const boxes2 = diagObj.db.getBoxes();\n  let actorKeys = diagObj.db.getActorKeys();\n  const messages2 = diagObj.db.getMessages();\n  const title = diagObj.db.getDiagramTitle();\n  const hasBoxes = diagObj.db.hasAtLeastOneBox();\n  const hasBoxTitles = diagObj.db.hasAtLeastOneBoxWithTitle();\n  const maxMessageWidthPerActor = getMaxMessageWidthPerActor(actors2, messages2, diagObj);\n  conf.height = calculateActorMargins(actors2, maxMessageWidthPerActor, boxes2);\n  svgDraw.insertComputerIcon(diagram2);\n  svgDraw.insertDatabaseIcon(diagram2);\n  svgDraw.insertClockIcon(diagram2);\n  if (hasBoxes) {\n    bounds.bumpVerticalPos(conf.boxMargin);\n    if (hasBoxTitles) {\n      bounds.bumpVerticalPos(boxes2[0].textMaxHeight);\n    }\n  }\n  if (conf.hideUnusedParticipants === true) {\n    const newActors = /* @__PURE__ */new Set();\n    messages2.forEach(message => {\n      newActors.add(message.from);\n      newActors.add(message.to);\n    });\n    actorKeys = actorKeys.filter(actorKey => newActors.has(actorKey));\n  }\n  addActorRenderingData(diagram2, actors2, createdActors2, actorKeys, 0, messages2, false);\n  const loopWidths = calculateLoopBounds(messages2, actors2, maxMessageWidthPerActor, diagObj);\n  svgDraw.insertArrowHead(diagram2);\n  svgDraw.insertArrowCrossHead(diagram2);\n  svgDraw.insertArrowFilledHead(diagram2);\n  svgDraw.insertSequenceNumber(diagram2);\n  function activeEnd(msg, verticalPos) {\n    const activationData = bounds.endActivation(msg);\n    if (activationData.starty + 18 > verticalPos) {\n      activationData.starty = verticalPos - 6;\n      verticalPos += 12;\n    }\n    svgDraw.drawActivation(diagram2, activationData, verticalPos, conf, actorActivations(msg.from.actor).length);\n    bounds.insert(activationData.startx, verticalPos - 10, activationData.stopx, verticalPos);\n  }\n  let sequenceIndex = 1;\n  let sequenceIndexStep = 1;\n  const messagesToDraw = [];\n  const backgrounds = [];\n  messages2.forEach(function (msg, index) {\n    let loopModel, noteModel, msgModel;\n    switch (msg.type) {\n      case diagObj.db.LINETYPE.NOTE:\n        bounds.resetVerticalPos();\n        noteModel = msg.noteModel;\n        drawNote(diagram2, noteModel);\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_START:\n        bounds.newActivation(msg, diagram2, actors2);\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_END:\n        activeEnd(msg, bounds.getVerticalPos());\n        break;\n      case diagObj.db.LINETYPE.LOOP_START:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, message => bounds.newLoop(message));\n        break;\n      case diagObj.db.LINETYPE.LOOP_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram2, loopModel, \"loop\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.RECT_START:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin, message => bounds.newLoop(void 0, message.message));\n        break;\n      case diagObj.db.LINETYPE.RECT_END:\n        loopModel = bounds.endLoop();\n        backgrounds.push(loopModel);\n        bounds.models.addLoop(loopModel);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        break;\n      case diagObj.db.LINETYPE.OPT_START:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, message => bounds.newLoop(message));\n        break;\n      case diagObj.db.LINETYPE.OPT_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram2, loopModel, \"opt\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.ALT_START:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, message => bounds.newLoop(message));\n        break;\n      case diagObj.db.LINETYPE.ALT_ELSE:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin + conf.boxTextMargin, conf.boxMargin, message => bounds.addSectionToLoop(message));\n        break;\n      case diagObj.db.LINETYPE.ALT_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram2, loopModel, \"alt\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.PAR_START:\n      case diagObj.db.LINETYPE.PAR_OVER_START:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, message => bounds.newLoop(message));\n        bounds.saveVerticalPos();\n        break;\n      case diagObj.db.LINETYPE.PAR_AND:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin + conf.boxTextMargin, conf.boxMargin, message => bounds.addSectionToLoop(message));\n        break;\n      case diagObj.db.LINETYPE.PAR_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram2, loopModel, \"par\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.AUTONUMBER:\n        sequenceIndex = msg.message.start || sequenceIndex;\n        sequenceIndexStep = msg.message.step || sequenceIndexStep;\n        if (msg.message.visible) {\n          diagObj.db.enableSequenceNumbers();\n        } else {\n          diagObj.db.disableSequenceNumbers();\n        }\n        break;\n      case diagObj.db.LINETYPE.CRITICAL_START:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, message => bounds.newLoop(message));\n        break;\n      case diagObj.db.LINETYPE.CRITICAL_OPTION:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin + conf.boxTextMargin, conf.boxMargin, message => bounds.addSectionToLoop(message));\n        break;\n      case diagObj.db.LINETYPE.CRITICAL_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram2, loopModel, \"critical\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.BREAK_START:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, message => bounds.newLoop(message));\n        break;\n      case diagObj.db.LINETYPE.BREAK_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram2, loopModel, \"break\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      default:\n        try {\n          msgModel = msg.msgModel;\n          msgModel.starty = bounds.getVerticalPos();\n          msgModel.sequenceIndex = sequenceIndex;\n          msgModel.sequenceVisible = diagObj.db.showSequenceNumbers();\n          const lineStartY = boundMessage(diagram2, msgModel);\n          adjustCreatedDestroyedData(msg, msgModel, lineStartY, index, actors2, createdActors2, destroyedActors2);\n          messagesToDraw.push({\n            messageModel: msgModel,\n            lineStartY\n          });\n          bounds.models.addMessage(msgModel);\n        } catch (e) {\n          log.error(\"error while drawing message\", e);\n        }\n    }\n    if ([diagObj.db.LINETYPE.SOLID_OPEN, diagObj.db.LINETYPE.DOTTED_OPEN, diagObj.db.LINETYPE.SOLID, diagObj.db.LINETYPE.DOTTED, diagObj.db.LINETYPE.SOLID_CROSS, diagObj.db.LINETYPE.DOTTED_CROSS, diagObj.db.LINETYPE.SOLID_POINT, diagObj.db.LINETYPE.DOTTED_POINT].includes(msg.type)) {\n      sequenceIndex = sequenceIndex + sequenceIndexStep;\n    }\n  });\n  log.debug(\"createdActors\", createdActors2);\n  log.debug(\"destroyedActors\", destroyedActors2);\n  drawActors(diagram2, actors2, actorKeys, false);\n  messagesToDraw.forEach(e => drawMessage(diagram2, e.messageModel, e.lineStartY, diagObj));\n  if (conf.mirrorActors) {\n    drawActors(diagram2, actors2, actorKeys, true);\n  }\n  backgrounds.forEach(e => svgDraw.drawBackgroundRect(diagram2, e));\n  fixLifeLineHeights(diagram2, actors2, actorKeys, conf);\n  bounds.models.boxes.forEach(function (box2) {\n    box2.height = bounds.getVerticalPos() - box2.y;\n    bounds.insert(box2.x, box2.y, box2.x + box2.width, box2.height);\n    box2.startx = box2.x;\n    box2.starty = box2.y;\n    box2.stopx = box2.startx + box2.width;\n    box2.stopy = box2.starty + box2.height;\n    box2.stroke = \"rgb(0,0,0, 0.5)\";\n    svgDraw.drawBox(diagram2, box2, conf);\n  });\n  if (hasBoxes) {\n    bounds.bumpVerticalPos(conf.boxMargin);\n  }\n  const requiredBoxSize = drawActorsPopup(diagram2, actors2, actorKeys, doc);\n  const {\n    bounds: box\n  } = bounds.getBounds();\n  let boxHeight = box.stopy - box.starty;\n  if (boxHeight < requiredBoxSize.maxHeight) {\n    boxHeight = requiredBoxSize.maxHeight;\n  }\n  let height = boxHeight + 2 * conf.diagramMarginY;\n  if (conf.mirrorActors) {\n    height = height - conf.boxMargin + conf.bottomMarginAdj;\n  }\n  let boxWidth = box.stopx - box.startx;\n  if (boxWidth < requiredBoxSize.maxWidth) {\n    boxWidth = requiredBoxSize.maxWidth;\n  }\n  const width = boxWidth + 2 * conf.diagramMarginX;\n  if (title) {\n    diagram2.append(\"text\").text(title).attr(\"x\", (box.stopx - box.startx) / 2 - 2 * conf.diagramMarginX).attr(\"y\", -25);\n  }\n  configureSvgSize(diagram2, height, width, conf.useMaxWidth);\n  const extraVertForTitle = title ? 40 : 0;\n  diagram2.attr(\"viewBox\", box.startx - conf.diagramMarginX + \" -\" + (conf.diagramMarginY + extraVertForTitle) + \" \" + width + \" \" + (height + extraVertForTitle));\n  log.debug(\"models:\", bounds.models);\n};\nfunction getMaxMessageWidthPerActor(actors2, messages2, diagObj) {\n  const maxMessageWidthPerActor = {};\n  messages2.forEach(function (msg) {\n    if (actors2[msg.to] && actors2[msg.from]) {\n      const actor = actors2[msg.to];\n      if (msg.placement === diagObj.db.PLACEMENT.LEFTOF && !actor.prevActor) {\n        return;\n      }\n      if (msg.placement === diagObj.db.PLACEMENT.RIGHTOF && !actor.nextActor) {\n        return;\n      }\n      const isNote = msg.placement !== void 0;\n      const isMessage = !isNote;\n      const textFont = isNote ? noteFont(conf) : messageFont(conf);\n      const wrappedMessage = msg.wrap ? utils.wrapLabel(msg.message, conf.width - 2 * conf.wrapPadding, textFont) : msg.message;\n      const messageDimensions = utils.calculateTextDimensions(wrappedMessage, textFont);\n      const messageWidth = messageDimensions.width + 2 * conf.wrapPadding;\n      if (isMessage && msg.from === actor.nextActor) {\n        maxMessageWidthPerActor[msg.to] = common.getMax(maxMessageWidthPerActor[msg.to] || 0, messageWidth);\n      } else if (isMessage && msg.from === actor.prevActor) {\n        maxMessageWidthPerActor[msg.from] = common.getMax(maxMessageWidthPerActor[msg.from] || 0, messageWidth);\n      } else if (isMessage && msg.from === msg.to) {\n        maxMessageWidthPerActor[msg.from] = common.getMax(maxMessageWidthPerActor[msg.from] || 0, messageWidth / 2);\n        maxMessageWidthPerActor[msg.to] = common.getMax(maxMessageWidthPerActor[msg.to] || 0, messageWidth / 2);\n      } else if (msg.placement === diagObj.db.PLACEMENT.RIGHTOF) {\n        maxMessageWidthPerActor[msg.from] = common.getMax(maxMessageWidthPerActor[msg.from] || 0, messageWidth);\n      } else if (msg.placement === diagObj.db.PLACEMENT.LEFTOF) {\n        maxMessageWidthPerActor[actor.prevActor] = common.getMax(maxMessageWidthPerActor[actor.prevActor] || 0, messageWidth);\n      } else if (msg.placement === diagObj.db.PLACEMENT.OVER) {\n        if (actor.prevActor) {\n          maxMessageWidthPerActor[actor.prevActor] = common.getMax(maxMessageWidthPerActor[actor.prevActor] || 0, messageWidth / 2);\n        }\n        if (actor.nextActor) {\n          maxMessageWidthPerActor[msg.from] = common.getMax(maxMessageWidthPerActor[msg.from] || 0, messageWidth / 2);\n        }\n      }\n    }\n  });\n  log.debug(\"maxMessageWidthPerActor:\", maxMessageWidthPerActor);\n  return maxMessageWidthPerActor;\n}\nconst getRequiredPopupWidth = function (actor) {\n  let requiredPopupWidth = 0;\n  const textFont = actorFont(conf);\n  for (const key in actor.links) {\n    const labelDimensions = utils.calculateTextDimensions(key, textFont);\n    const labelWidth = labelDimensions.width + 2 * conf.wrapPadding + 2 * conf.boxMargin;\n    if (requiredPopupWidth < labelWidth) {\n      requiredPopupWidth = labelWidth;\n    }\n  }\n  return requiredPopupWidth;\n};\nfunction calculateActorMargins(actors2, actorToMessageWidth, boxes2) {\n  let maxHeight = 0;\n  Object.keys(actors2).forEach(prop => {\n    const actor = actors2[prop];\n    if (actor.wrap) {\n      actor.description = utils.wrapLabel(actor.description, conf.width - 2 * conf.wrapPadding, actorFont(conf));\n    }\n    const actDims = utils.calculateTextDimensions(actor.description, actorFont(conf));\n    actor.width = actor.wrap ? conf.width : common.getMax(conf.width, actDims.width + 2 * conf.wrapPadding);\n    actor.height = actor.wrap ? common.getMax(actDims.height, conf.height) : conf.height;\n    maxHeight = common.getMax(maxHeight, actor.height);\n  });\n  for (const actorKey in actorToMessageWidth) {\n    const actor = actors2[actorKey];\n    if (!actor) {\n      continue;\n    }\n    const nextActor = actors2[actor.nextActor];\n    if (!nextActor) {\n      const messageWidth2 = actorToMessageWidth[actorKey];\n      const actorWidth2 = messageWidth2 + conf.actorMargin - actor.width / 2;\n      actor.margin = common.getMax(actorWidth2, conf.actorMargin);\n      continue;\n    }\n    const messageWidth = actorToMessageWidth[actorKey];\n    const actorWidth = messageWidth + conf.actorMargin - actor.width / 2 - nextActor.width / 2;\n    actor.margin = common.getMax(actorWidth, conf.actorMargin);\n  }\n  let maxBoxHeight = 0;\n  boxes2.forEach(box => {\n    const textFont = messageFont(conf);\n    let totalWidth = box.actorKeys.reduce((total, aKey) => {\n      return total += actors2[aKey].width + (actors2[aKey].margin || 0);\n    }, 0);\n    totalWidth -= 2 * conf.boxTextMargin;\n    if (box.wrap) {\n      box.name = utils.wrapLabel(box.name, totalWidth - 2 * conf.wrapPadding, textFont);\n    }\n    const boxMsgDimensions = utils.calculateTextDimensions(box.name, textFont);\n    maxBoxHeight = common.getMax(boxMsgDimensions.height, maxBoxHeight);\n    const minWidth = common.getMax(totalWidth, boxMsgDimensions.width + 2 * conf.wrapPadding);\n    box.margin = conf.boxTextMargin;\n    if (totalWidth < minWidth) {\n      const missing = (minWidth - totalWidth) / 2;\n      box.margin += missing;\n    }\n  });\n  boxes2.forEach(box => box.textMaxHeight = maxBoxHeight);\n  return common.getMax(maxHeight, conf.height);\n}\nconst buildNoteModel = function (msg, actors2, diagObj) {\n  const startx = actors2[msg.from].x;\n  const stopx = actors2[msg.to].x;\n  const shouldWrap = msg.wrap && msg.message;\n  let textDimensions = utils.calculateTextDimensions(shouldWrap ? utils.wrapLabel(msg.message, conf.width, noteFont(conf)) : msg.message, noteFont(conf));\n  const noteModel = {\n    width: shouldWrap ? conf.width : common.getMax(conf.width, textDimensions.width + 2 * conf.noteMargin),\n    height: 0,\n    startx: actors2[msg.from].x,\n    stopx: 0,\n    starty: 0,\n    stopy: 0,\n    message: msg.message\n  };\n  if (msg.placement === diagObj.db.PLACEMENT.RIGHTOF) {\n    noteModel.width = shouldWrap ? common.getMax(conf.width, textDimensions.width) : common.getMax(actors2[msg.from].width / 2 + actors2[msg.to].width / 2, textDimensions.width + 2 * conf.noteMargin);\n    noteModel.startx = startx + (actors2[msg.from].width + conf.actorMargin) / 2;\n  } else if (msg.placement === diagObj.db.PLACEMENT.LEFTOF) {\n    noteModel.width = shouldWrap ? common.getMax(conf.width, textDimensions.width + 2 * conf.noteMargin) : common.getMax(actors2[msg.from].width / 2 + actors2[msg.to].width / 2, textDimensions.width + 2 * conf.noteMargin);\n    noteModel.startx = startx - noteModel.width + (actors2[msg.from].width - conf.actorMargin) / 2;\n  } else if (msg.to === msg.from) {\n    textDimensions = utils.calculateTextDimensions(shouldWrap ? utils.wrapLabel(msg.message, common.getMax(conf.width, actors2[msg.from].width), noteFont(conf)) : msg.message, noteFont(conf));\n    noteModel.width = shouldWrap ? common.getMax(conf.width, actors2[msg.from].width) : common.getMax(actors2[msg.from].width, conf.width, textDimensions.width + 2 * conf.noteMargin);\n    noteModel.startx = startx + (actors2[msg.from].width - noteModel.width) / 2;\n  } else {\n    noteModel.width = Math.abs(startx + actors2[msg.from].width / 2 - (stopx + actors2[msg.to].width / 2)) + conf.actorMargin;\n    noteModel.startx = startx < stopx ? startx + actors2[msg.from].width / 2 - conf.actorMargin / 2 : stopx + actors2[msg.to].width / 2 - conf.actorMargin / 2;\n  }\n  if (shouldWrap) {\n    noteModel.message = utils.wrapLabel(msg.message, noteModel.width - 2 * conf.wrapPadding, noteFont(conf));\n  }\n  log.debug(\"NM:[\".concat(noteModel.startx, \",\").concat(noteModel.stopx, \",\").concat(noteModel.starty, \",\").concat(noteModel.stopy, \":\").concat(noteModel.width, \",\").concat(noteModel.height, \"=\").concat(msg.message, \"]\"));\n  return noteModel;\n};\nconst buildMessageModel = function (msg, actors2, diagObj) {\n  if (![diagObj.db.LINETYPE.SOLID_OPEN, diagObj.db.LINETYPE.DOTTED_OPEN, diagObj.db.LINETYPE.SOLID, diagObj.db.LINETYPE.DOTTED, diagObj.db.LINETYPE.SOLID_CROSS, diagObj.db.LINETYPE.DOTTED_CROSS, diagObj.db.LINETYPE.SOLID_POINT, diagObj.db.LINETYPE.DOTTED_POINT].includes(msg.type)) {\n    return {};\n  }\n  const [fromLeft, fromRight] = activationBounds(msg.from, actors2);\n  const [toLeft, toRight] = activationBounds(msg.to, actors2);\n  const isArrowToRight = fromLeft <= toLeft;\n  const startx = isArrowToRight ? fromRight : fromLeft;\n  let stopx = isArrowToRight ? toLeft : toRight;\n  const isArrowToActivation = Math.abs(toLeft - toRight) > 2;\n  const adjustValue = value => {\n    return isArrowToRight ? -value : value;\n  };\n  if (msg.from === msg.to) {\n    stopx = startx;\n  } else {\n    if (msg.activate && !isArrowToActivation) {\n      stopx += adjustValue(conf.activationWidth / 2 - 1);\n    }\n    if (![diagObj.db.LINETYPE.SOLID_OPEN, diagObj.db.LINETYPE.DOTTED_OPEN].includes(msg.type)) {\n      stopx += adjustValue(3);\n    }\n  }\n  const allBounds = [fromLeft, fromRight, toLeft, toRight];\n  const boundedWidth = Math.abs(startx - stopx);\n  if (msg.wrap && msg.message) {\n    msg.message = utils.wrapLabel(msg.message, common.getMax(boundedWidth + 2 * conf.wrapPadding, conf.width), messageFont(conf));\n  }\n  const msgDims = utils.calculateTextDimensions(msg.message, messageFont(conf));\n  return {\n    width: common.getMax(msg.wrap ? 0 : msgDims.width + 2 * conf.wrapPadding, boundedWidth + 2 * conf.wrapPadding, conf.width),\n    height: 0,\n    startx,\n    stopx,\n    starty: 0,\n    stopy: 0,\n    message: msg.message,\n    type: msg.type,\n    wrap: msg.wrap,\n    fromBounds: Math.min.apply(null, allBounds),\n    toBounds: Math.max.apply(null, allBounds)\n  };\n};\nconst calculateLoopBounds = function (messages2, actors2, _maxWidthPerActor, diagObj) {\n  const loops = {};\n  const stack = [];\n  let current, noteModel, msgModel;\n  messages2.forEach(function (msg) {\n    msg.id = utils.random({\n      length: 10\n    });\n    switch (msg.type) {\n      case diagObj.db.LINETYPE.LOOP_START:\n      case diagObj.db.LINETYPE.ALT_START:\n      case diagObj.db.LINETYPE.OPT_START:\n      case diagObj.db.LINETYPE.PAR_START:\n      case diagObj.db.LINETYPE.PAR_OVER_START:\n      case diagObj.db.LINETYPE.CRITICAL_START:\n      case diagObj.db.LINETYPE.BREAK_START:\n        stack.push({\n          id: msg.id,\n          msg: msg.message,\n          from: Number.MAX_SAFE_INTEGER,\n          to: Number.MIN_SAFE_INTEGER,\n          width: 0\n        });\n        break;\n      case diagObj.db.LINETYPE.ALT_ELSE:\n      case diagObj.db.LINETYPE.PAR_AND:\n      case diagObj.db.LINETYPE.CRITICAL_OPTION:\n        if (msg.message) {\n          current = stack.pop();\n          loops[current.id] = current;\n          loops[msg.id] = current;\n          stack.push(current);\n        }\n        break;\n      case diagObj.db.LINETYPE.LOOP_END:\n      case diagObj.db.LINETYPE.ALT_END:\n      case diagObj.db.LINETYPE.OPT_END:\n      case diagObj.db.LINETYPE.PAR_END:\n      case diagObj.db.LINETYPE.CRITICAL_END:\n      case diagObj.db.LINETYPE.BREAK_END:\n        current = stack.pop();\n        loops[current.id] = current;\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_START:\n        {\n          const actorRect = actors2[msg.from ? msg.from.actor : msg.to.actor];\n          const stackedSize = actorActivations(msg.from ? msg.from.actor : msg.to.actor).length;\n          const x = actorRect.x + actorRect.width / 2 + (stackedSize - 1) * conf.activationWidth / 2;\n          const toAdd = {\n            startx: x,\n            stopx: x + conf.activationWidth,\n            actor: msg.from.actor,\n            enabled: true\n          };\n          bounds.activations.push(toAdd);\n        }\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_END:\n        {\n          const lastActorActivationIdx = bounds.activations.map(a => a.actor).lastIndexOf(msg.from.actor);\n          delete bounds.activations.splice(lastActorActivationIdx, 1)[0];\n        }\n        break;\n    }\n    const isNote = msg.placement !== void 0;\n    if (isNote) {\n      noteModel = buildNoteModel(msg, actors2, diagObj);\n      msg.noteModel = noteModel;\n      stack.forEach(stk => {\n        current = stk;\n        current.from = common.getMin(current.from, noteModel.startx);\n        current.to = common.getMax(current.to, noteModel.startx + noteModel.width);\n        current.width = common.getMax(current.width, Math.abs(current.from - current.to)) - conf.labelBoxWidth;\n      });\n    } else {\n      msgModel = buildMessageModel(msg, actors2, diagObj);\n      msg.msgModel = msgModel;\n      if (msgModel.startx && msgModel.stopx && stack.length > 0) {\n        stack.forEach(stk => {\n          current = stk;\n          if (msgModel.startx === msgModel.stopx) {\n            const from = actors2[msg.from];\n            const to = actors2[msg.to];\n            current.from = common.getMin(from.x - msgModel.width / 2, from.x - from.width / 2, current.from);\n            current.to = common.getMax(to.x + msgModel.width / 2, to.x + from.width / 2, current.to);\n            current.width = common.getMax(current.width, Math.abs(current.to - current.from)) - conf.labelBoxWidth;\n          } else {\n            current.from = common.getMin(msgModel.startx, current.from);\n            current.to = common.getMax(msgModel.stopx, current.to);\n            current.width = common.getMax(current.width, msgModel.width) - conf.labelBoxWidth;\n          }\n        });\n      }\n    }\n  });\n  bounds.activations = [];\n  log.debug(\"Loop type widths:\", loops);\n  return loops;\n};\nconst renderer = {\n  bounds,\n  drawActors,\n  drawActorsPopup,\n  setConf,\n  draw\n};\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer,\n  styles,\n  init: _ref => {\n    let {\n      wrap\n    } = _ref;\n    db.setWrap(wrap);\n  }\n};\nexport { diagram };"],"sourceRoot":""}