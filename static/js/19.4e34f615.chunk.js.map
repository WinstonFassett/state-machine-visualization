{"version":3,"sources":["../node_modules/.pnpm/mermaid@10.6.0/node_modules/mermaid/dist/classDiagram-936ed81e.js"],"names":["__webpack_require__","r","__webpack_exports__","d","diagram","_styles_3dcbcfbf_js__WEBPACK_IMPORTED_MODULE_0__","d3__WEBPACK_IMPORTED_MODULE_1__","dagre_d3_es_src_dagre_index_js__WEBPACK_IMPORTED_MODULE_2__","dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_3__","_mermaid_8af3addd_js__WEBPACK_IMPORTED_MODULE_4__","edgeCount","getClassTitleString","classDef","classTitleString","id","type","Object","addTspan","textEl","member","isFirst","conf","displayText","cssStyle","getDisplayDetails","tSpan","append","attr","padding","text","textHeight","svgDraw","elem","diagObj","debug","classInfo","label","width","height","g","db","lookUpDomId","title","link","linkTarget","annotations","forEach","titleText2","classTitle","titleHeight","node","getBBox","membersLine","membersBox","methodsLine","members","length","dividerMargin","methods","method","classBox","cssClassStr","cssClasses","join","rectWidth","insert","childNodes","x","setAttribute","tooltip","path","relation","getRelationType","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","LOLLIPOP","points","filter","p","Number","isNaN","y","lineData","lineFunction","curve","svgPath","url","arrowMarkerAbsolute","window","location","protocol","host","pathname","search","replace","lineType","type1","type2","l","p1_card_x","p1_card_y","p2_card_x","p2_card_y","labelPosition","calcLabelPosition","cardinality_1_point","calcCardinalityPosition","cardinality_2_point","JSON","stringify","bounds","info","relationTitle1","relationTitle2","note","noteInfo","lines","parse","concat","split","line2","noteBox","idCache","getGraphId","foundEntry","entries","find","entry","renderer","draw","_version","class","securityLevel","sandboxElement","root","nodes","contentDocument","body","diagram2","select","multigraph","setGraph","isMultiGraph","setDefaultEdgeLabel","classes","getClasses","keys","key","setNode","getRelations","id1","id2","setEdge","getNotes","v","edges","e","edge","w","svgBounds","useMaxWidth","vBox","parser","styles","init","cnf","clear"],"mappings":"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","file":"static/js/19.4e34f615.chunk.js","sourcesContent":["import { p as parser, d as db, s as styles } from \"./styles-3dcbcfbf.js\";\nimport { line, curveBasis, select } from \"d3\";\nimport { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { u as utils, l as log, v as parseGenericTypes, c as getConfig, i as configureSvgSize } from \"./mermaid-8af3addd.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nlet edgeCount = 0;\nconst drawEdge = function (elem, path, relation, conf, diagObj) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case diagObj.db.relationType.EXTENSION:\n        return \"extension\";\n      case diagObj.db.relationType.COMPOSITION:\n        return \"composition\";\n      case diagObj.db.relationType.DEPENDENCY:\n        return \"dependency\";\n      case diagObj.db.relationType.LOLLIPOP:\n        return \"lollipop\";\n    }\n  };\n  path.points = path.points.filter(p => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function (d) {\n    return d.x;\n  }).y(function (d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"relation\");\n  let url = \"\";\n  if (conf.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  if (relation.relation.lineType == 1) {\n    svgPath.attr(\"class\", \"relation dashed-line\");\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr(\"class\", \"relation dotted-line\");\n  }\n  if (relation.relation.type1 !== \"none\") {\n    svgPath.attr(\"marker-start\", \"url(\" + url + \"#\" + getRelationType(relation.relation.type1) + \"Start)\");\n  }\n  if (relation.relation.type2 !== \"none\") {\n    svgPath.attr(\"marker-end\", \"url(\" + url + \"#\" + getRelationType(relation.relation.type2) + \"End)\");\n  }\n  let x, y;\n  const l = path.points.length;\n  let labelPosition = utils.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = utils.calcCardinalityPosition(relation.relation.type1 !== \"none\", path.points, path.points[0]);\n    let cardinality_2_point = utils.calcCardinalityPosition(relation.relation.type2 !== \"none\", path.points, path.points[l - 1]);\n    log.debug(\"cardinality_1_point \" + JSON.stringify(cardinality_1_point));\n    log.debug(\"cardinality_2_point \" + JSON.stringify(cardinality_2_point));\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n  if (relation.title !== void 0) {\n    const g = elem.append(\"g\").attr(\"class\", \"classLabel\");\n    const label = g.append(\"text\").attr(\"class\", \"label\").attr(\"x\", x).attr(\"y\", y).attr(\"fill\", \"red\").attr(\"text-anchor\", \"middle\").text(relation.title);\n    window.label = label;\n    const bounds = label.node().getBBox();\n    g.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", bounds.x - conf.padding / 2).attr(\"y\", bounds.y - conf.padding / 2).attr(\"width\", bounds.width + conf.padding).attr(\"height\", bounds.height + conf.padding);\n  }\n  log.info(\"Rendering relation \" + JSON.stringify(relation));\n  if (relation.relationTitle1 !== void 0 && relation.relationTitle1 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type1\").attr(\"x\", p1_card_x).attr(\"y\", p1_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== void 0 && relation.relationTitle2 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type2\").attr(\"x\", p2_card_x).attr(\"y\", p2_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle2);\n  }\n  edgeCount++;\n};\nconst drawClass = function (elem, classDef, conf, diagObj) {\n  log.debug(\"Rendering class \", classDef, conf);\n  const id = classDef.id;\n  const classInfo = {\n    id,\n    label: classDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", diagObj.db.lookUpDomId(id)).attr(\"class\", \"classGroup\");\n  let title;\n  if (classDef.link) {\n    title = g.append(\"svg:a\").attr(\"xlink:href\", classDef.link).attr(\"target\", classDef.linkTarget).append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  } else {\n    title = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  }\n  let isFirst = true;\n  classDef.annotations.forEach(function (member) {\n    const titleText2 = title.append(\"tspan\").text(\"«\" + member + \"»\");\n    if (!isFirst) {\n      titleText2.attr(\"dy\", conf.textHeight);\n    }\n    isFirst = false;\n  });\n  let classTitleString = getClassTitleString(classDef);\n  const classTitle = title.append(\"tspan\").text(classTitleString).attr(\"class\", \"title\");\n  if (!isFirst) {\n    classTitle.attr(\"dy\", conf.textHeight);\n  }\n  const titleHeight = title.node().getBBox().height;\n  let membersLine;\n  let membersBox;\n  let methodsLine;\n  if (classDef.members.length > 0) {\n    membersLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin / 2).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin / 2);\n    const members = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + conf.dividerMargin + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n    isFirst = true;\n    classDef.members.forEach(function (member) {\n      addTspan(members, member, isFirst, conf);\n      isFirst = false;\n    });\n    membersBox = members.node().getBBox();\n  }\n  if (classDef.methods.length > 0) {\n    methodsLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n    const methods = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n    isFirst = true;\n    classDef.methods.forEach(function (method) {\n      addTspan(methods, method, isFirst, conf);\n      isFirst = false;\n    });\n  }\n  const classBox = g.node().getBBox();\n  var cssClassStr = \" \";\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(\" \");\n  }\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", classBox.width + 2 * conf.padding).attr(\"height\", classBox.height + conf.padding + 0.5 * conf.dividerMargin).attr(\"class\", cssClassStr);\n  const rectWidth = rect.node().getBBox().width;\n  title.node().childNodes.forEach(function (x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  if (classDef.tooltip) {\n    title.insert(\"title\").text(classDef.tooltip);\n  }\n  if (membersLine) {\n    membersLine.attr(\"x2\", rectWidth);\n  }\n  if (methodsLine) {\n    methodsLine.attr(\"x2\", rectWidth);\n  }\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n  return classInfo;\n};\nconst getClassTitleString = function (classDef) {\n  let classTitleString = classDef.id;\n  if (classDef.type) {\n    classTitleString += \"<\" + parseGenericTypes(classDef.type) + \">\";\n  }\n  return classTitleString;\n};\nconst drawNote = function (elem, note, conf, diagObj) {\n  log.debug(\"Rendering note \", note, conf);\n  const id = note.id;\n  const noteInfo = {\n    id,\n    text: note.text,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"classGroup\");\n  let text = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  const lines = JSON.parse(\"\\\"\".concat(note.text, \"\\\"\")).split(\"\\n\");\n  lines.forEach(function (line2) {\n    log.debug(\"Adding line: \".concat(line2));\n    text.append(\"tspan\").text(line2).attr(\"class\", \"title\").attr(\"dy\", conf.textHeight);\n  });\n  const noteBox = g.node().getBBox();\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", noteBox.width + 2 * conf.padding).attr(\"height\", noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin);\n  const rectWidth = rect.node().getBBox().width;\n  text.node().childNodes.forEach(function (x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  noteInfo.width = rectWidth;\n  noteInfo.height = noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n  return noteInfo;\n};\nconst addTspan = function (textEl, member, isFirst, conf) {\n  const {\n    displayText,\n    cssStyle\n  } = member.getDisplayDetails();\n  const tSpan = textEl.append(\"tspan\").attr(\"x\", conf.padding).text(displayText);\n  if (cssStyle !== \"\") {\n    tSpan.attr(\"style\", member.cssStyle);\n  }\n  if (!isFirst) {\n    tSpan.attr(\"dy\", conf.textHeight);\n  }\n};\nconst svgDraw = {\n  getClassTitleString,\n  drawClass,\n  drawEdge,\n  drawNote\n};\nlet idCache = {};\nconst padding = 20;\nconst getGraphId = function (label) {\n  const foundEntry = Object.entries(idCache).find(entry => entry[1].label === label);\n  if (foundEntry) {\n    return foundEntry[0];\n  }\n};\nconst insertMarkers = function (elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"extensionStart\").attr(\"class\", \"extension\").attr(\"refX\", 0).attr(\"refY\", 7).attr(\"markerWidth\", 190).attr(\"markerHeight\", 240).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 1,7 L18,13 V 1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"extensionEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 1,1 V 13 L18,7 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"compositionStart\").attr(\"class\", \"extension\").attr(\"refX\", 0).attr(\"refY\", 7).attr(\"markerWidth\", 190).attr(\"markerHeight\", 240).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"compositionEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"aggregationStart\").attr(\"class\", \"extension\").attr(\"refX\", 0).attr(\"refY\", 7).attr(\"markerWidth\", 190).attr(\"markerHeight\", 240).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"aggregationEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyStart\").attr(\"class\", \"extension\").attr(\"refX\", 0).attr(\"refY\", 7).attr(\"markerWidth\", 190).attr(\"markerHeight\", 240).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 5,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L14,7 L9,1 Z\");\n};\nconst draw = function (text, id, _version, diagObj) {\n  const conf = getConfig().class;\n  idCache = {};\n  log.info(\"Rendering diagram \" + text);\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const diagram2 = root.select(\"[id='\".concat(id, \"']\"));\n  insertMarkers(diagram2);\n  const g = new graphlib.Graph({\n    multigraph: true\n  });\n  g.setGraph({\n    isMultiGraph: true\n  });\n  g.setDefaultEdgeLabel(function () {\n    return {};\n  });\n  const classes = diagObj.db.getClasses();\n  const keys = Object.keys(classes);\n  for (const key of keys) {\n    const classDef = classes[key];\n    const node = svgDraw.drawClass(diagram2, classDef, conf, diagObj);\n    idCache[node.id] = node;\n    g.setNode(node.id, node);\n    log.info(\"Org height: \" + node.height);\n  }\n  const relations = diagObj.db.getRelations();\n  relations.forEach(function (relation) {\n    log.info(\"tjoho\" + getGraphId(relation.id1) + getGraphId(relation.id2) + JSON.stringify(relation));\n    g.setEdge(getGraphId(relation.id1), getGraphId(relation.id2), {\n      relation\n    }, relation.title || \"DEFAULT\");\n  });\n  const notes = diagObj.db.getNotes();\n  notes.forEach(function (note) {\n    log.debug(\"Adding note: \".concat(JSON.stringify(note)));\n    const node = svgDraw.drawNote(diagram2, note, conf, diagObj);\n    idCache[node.id] = node;\n    g.setNode(node.id, node);\n    if (note.class && note.class in classes) {\n      g.setEdge(note.id, getGraphId(note.class), {\n        relation: {\n          id1: note.id,\n          id2: note.class,\n          relation: {\n            type1: \"none\",\n            type2: \"none\",\n            lineType: 10\n          }\n        }\n      }, \"DEFAULT\");\n    }\n  });\n  layout(g);\n  g.nodes().forEach(function (v) {\n    if (v !== void 0 && g.node(v) !== void 0) {\n      log.debug(\"Node \" + v + \": \" + JSON.stringify(g.node(v)));\n      root.select(\"#\" + (diagObj.db.lookUpDomId(v) || v)).attr(\"transform\", \"translate(\" + (g.node(v).x - g.node(v).width / 2) + \",\" + (g.node(v).y - g.node(v).height / 2) + \" )\");\n    }\n  });\n  g.edges().forEach(function (e) {\n    if (e !== void 0 && g.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(g.edge(e)));\n      svgDraw.drawEdge(diagram2, g.edge(e), g.edge(e).relation, conf, diagObj);\n    }\n  });\n  const svgBounds = diagram2.node().getBBox();\n  const width = svgBounds.width + padding * 2;\n  const height = svgBounds.height + padding * 2;\n  configureSvgSize(diagram2, height, width, conf.useMaxWidth);\n  const vBox = \"\".concat(svgBounds.x - padding, \" \").concat(svgBounds.y - padding, \" \").concat(width, \" \").concat(height);\n  log.debug(\"viewBox \".concat(vBox));\n  diagram2.attr(\"viewBox\", vBox);\n};\nconst renderer = {\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: cnf => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport { diagram };"],"sourceRoot":""}